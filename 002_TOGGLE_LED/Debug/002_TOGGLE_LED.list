
002_TOGGLE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d64  08005d64  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d6c  08005d6c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a80c  2000001c  08005d90  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a828  08005d90  0002a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154fb  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d43  00000000  00000000  00035547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00039380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022990  00000000  00000000  0003a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011752  00000000  00000000  0005cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4578  00000000  00000000  0006e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  001429b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bcc 	.word	0x08005bcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005bcc 	.word	0x08005bcc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a780 	.word	0x2001a780

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb7b 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d5 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800056e:	482d      	ldr	r0, [pc, #180]	; (8000624 <main+0xc8>)
 8000570:	f003 f99e 	bl	80038b0 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <main+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <main+0xcc>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000580:	f002 ffc8 	bl	8003514 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4926      	ldr	r1, [pc, #152]	; (800062c <main+0xd0>)
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xd4>)
 8000596:	f001 fdd1 	bl	800213c <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xd8>)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xdc>)
 80005ca:	f001 fdb7 	bl	800213c <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x90>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xe0>)
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xe4>)
 80005fc:	f001 fd9e 	bl	800213c <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	613b      	str	r3, [r7, #16]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800061e:	f001 ff29 	bl	8002474 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xc6>
 8000624:	0007a120 	.word	0x0007a120
 8000628:	e0001000 	.word	0xe0001000
 800062c:	08005be4 	.word	0x08005be4
 8000630:	080009d9 	.word	0x080009d9
 8000634:	08005bf4 	.word	0x08005bf4
 8000638:	08000a31 	.word	0x08000a31
 800063c:	08005c04 	.word	0x08005c04
 8000640:	08000a05 	.word	0x08000a05

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fab2 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdbb 	bl	8001244 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9d4 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f814 	bl	8001724 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9bd 	bl	8000a80 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba1      	ldr	r3, [pc, #644]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa0      	ldr	r2, [pc, #640]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9e      	ldr	r3, [pc, #632]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9a      	ldr	r3, [pc, #616]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a99      	ldr	r2, [pc, #612]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b97      	ldr	r3, [pc, #604]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b93      	ldr	r3, [pc, #588]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a92      	ldr	r2, [pc, #584]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b90      	ldr	r3, [pc, #576]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8b      	ldr	r2, [pc, #556]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b85      	ldr	r3, [pc, #532]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a84      	ldr	r2, [pc, #528]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7e      	ldr	r3, [pc, #504]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7d      	ldr	r2, [pc, #500]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7b      	ldr	r3, [pc, #492]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4878      	ldr	r0, [pc, #480]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007dc:	f000 fcfe 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4876      	ldr	r0, [pc, #472]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fcf9 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4874      	ldr	r0, [pc, #464]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fcf3 	bl	80011dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486b      	ldr	r0, [pc, #428]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800080e:	f000 fb49 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4865      	ldr	r0, [pc, #404]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800082a:	f000 fb3b 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485d      	ldr	r0, [pc, #372]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800084a:	f000 fb2b 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000862:	f000 fb1f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000866:	2310      	movs	r3, #16
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000876:	2306      	movs	r3, #6
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000882:	f000 fb0f 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000886:	23e0      	movs	r3, #224	; 0xe0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a2:	f000 faff 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a6:	2304      	movs	r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008ba:	f000 faf3 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d0:	2305      	movs	r3, #5
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	483d      	ldr	r0, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008dc:	f000 fae2 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008e0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4832      	ldr	r0, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 fad3 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000910:	2306      	movs	r3, #6
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800091c:	f000 fac2 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000936:	f000 fab5 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094c:	230a      	movs	r3, #10
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	481d      	ldr	r0, [pc, #116]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000958:	f000 faa4 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095c:	2320      	movs	r3, #32
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 8000970:	f000 fa98 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000974:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	2301      	movs	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000986:	2304      	movs	r3, #4
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000992:	f000 fa87 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80009aa:	f000 fa7b 	bl	8000ea4 <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	10110000 	.word	0x10110000
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400
 80009d4:	10120000 	.word	0x10120000

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <led_green_handler+0x24>)
 80009e2:	f005 f80d 	bl	8005a00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <led_green_handler+0x28>)
 80009ec:	f000 fc0f 	bl	800120e <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f4:	f001 fd06 	bl	8002404 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f8:	e7f2      	b.n	80009e0 <led_green_handler+0x8>
 80009fa:	bf00      	nop
 80009fc:	08005c14 	.word	0x08005c14
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <led_orange_handler+0x24>)
 8000a0e:	f004 fff7 	bl	8005a00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <led_orange_handler+0x28>)
 8000a18:	f000 fbf9 	bl	800120e <HAL_GPIO_TogglePin>
//		HAL_Delay(800);
		vTaskDelay(pdMS_TO_TICKS(800));
 8000a1c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a20:	f001 fcf0 	bl	8002404 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a24:	e7f2      	b.n	8000a0c <led_orange_handler+0x8>
 8000a26:	bf00      	nop
 8000a28:	08005c28 	.word	0x08005c28
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <led_red_handler+0x24>)
 8000a3a:	f004 ffe1 	bl	8005a00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <led_red_handler+0x28>)
 8000a44:	f000 fbe3 	bl	800120e <HAL_GPIO_TogglePin>
//		HAL_Delay(400);
		vTaskDelay(pdMS_TO_TICKS(400));
 8000a48:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a4c:	f001 fcda 	bl	8002404 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a50:	e7f2      	b.n	8000a38 <led_red_handler+0x8>
 8000a52:	bf00      	nop
 8000a54:	08005c3c 	.word	0x08005c3c
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 f917 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001000 	.word	0x40001000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ace:	f002 f96b 	bl	8002da8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f000 f9ab 	bl	8000e50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000afa:	2036      	movs	r0, #54	; 0x36
 8000afc:	f000 f9c4 	bl	8000e88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ffe4 	bl	8001af4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b2c:	f000 ffce 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8000b30:	4603      	mov	r3, r0
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_InitTick+0xac>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_InitTick+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_InitTick+0xac>)
 8000b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_InitTick+0xac>)
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_InitTick+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_InitTick+0xac>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_InitTick+0xac>)
 8000b66:	f000 fff7 	bl	8001b58 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_InitTick+0xac>)
 8000b72:	f001 f826 	bl	8001bc2 <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	2001a73c 	.word	0x2001a73c
 8000b90:	40001000 	.word	0x40001000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM6_DAC_IRQHandler+0x10>)
 8000bce:	f001 f81c 	bl	8001c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2001a73c 	.word	0x2001a73c

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x28>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0e:	e003      	b.n	8000c18 <LoopCopyDataInit>

08000c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c16:	3104      	adds	r1, #4

08000c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c20:	d3f6      	bcc.n	8000c10 <CopyDataInit>
  ldr  r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c24:	e002      	b.n	8000c2c <LoopFillZerobss>

08000c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c28:	f842 3b04 	str.w	r3, [r2], #4

08000c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c30:	d3f9      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd3 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f004 ff81 	bl	8005b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fc8f 	bl	800055c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c44:	08005d74 	.word	0x08005d74
  ldr  r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c4c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000c50:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000c54:	2001a828 	.word	0x2001a828

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8d8 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ff28 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fefe 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	2001a77c 	.word	0x2001a77c

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2001a77c 	.word	0x2001a77c

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e16b      	b.n	8001198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 815a 	bne.w	8001192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d00b      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef2:	2b11      	cmp	r3, #17
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d130      	bne.n	8000f60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68da      	ldr	r2, [r3, #12]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	091b      	lsrs	r3, r3, #4
 8000f4a:	f003 0201 	and.w	r2, r3, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0xfc>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80b4 	beq.w	8001192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a5f      	ldr	r2, [pc, #380]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b5d      	ldr	r3, [pc, #372]	; (80011b0 <HAL_GPIO_Init+0x30c>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a5b      	ldr	r2, [pc, #364]	; (80011b4 <HAL_GPIO_Init+0x310>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x314>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d02b      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a51      	ldr	r2, [pc, #324]	; (80011bc <HAL_GPIO_Init+0x318>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d025      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a50      	ldr	r2, [pc, #320]	; (80011c0 <HAL_GPIO_Init+0x31c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d01f      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_GPIO_Init+0x320>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d019      	beq.n	80010be <HAL_GPIO_Init+0x21a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <HAL_GPIO_Init+0x324>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x216>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4d      	ldr	r2, [pc, #308]	; (80011cc <HAL_GPIO_Init+0x328>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x212>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x32c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	; (80011d4 <HAL_GPIO_Init+0x330>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x20a>
 80010aa:	2307      	movs	r3, #7
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ae:	2308      	movs	r3, #8
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x228>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x310>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_GPIO_Init+0x334>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001138:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f ae90 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	401a      	ands	r2, r3
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	429a      	cmp	r2, r3
 8001226:	d104      	bne.n	8001232 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001230:	e002      	b.n	8001238 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e25b      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4ba3      	ldr	r3, [pc, #652]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4ba0      	ldr	r3, [pc, #640]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b99      	ldr	r3, [pc, #612]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e236      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a87      	ldr	r2, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a80      	ldr	r2, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fce4 	bl	8000cc8 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fce0 	bl	8000cc8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1fb      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fcd0 	bl	8000cc8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fccc 	bl	8000cc8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1e7      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b65      	ldr	r3, [pc, #404]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1bb      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4952      	ldr	r1, [pc, #328]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc85 	bl	8000cc8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc81 	bl	8000cc8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e19c      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4940      	ldr	r1, [pc, #256]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc64 	bl	8000cc8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc60 	bl	8000cc8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e17b      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fc44 	bl	8000cc8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc40 	bl	8000cc8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e15b      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc2d 	bl	8000cc8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fc29 	bl	8000cc8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e144      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a0 	beq.w	80015de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fbef 	bl	8000cc8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e011      	b.n	8001512 <HAL_RCC_OscConfig+0x2ce>
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	42470000 	.word	0x42470000
 80014f8:	42470e80 	.word	0x42470e80
 80014fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff fbe2 	bl	8000cc8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e0fd      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x4d4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 8001526:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a7c      	ldr	r2, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 800153c:	4b77      	ldr	r3, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a76      	ldr	r2, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001556:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a70      	ldr	r2, [pc, #448]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b6e      	ldr	r3, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a6d      	ldr	r2, [pc, #436]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fba7 	bl	8000cc8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fba3 	bl	8000cc8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0bc      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b61      	ldr	r3, [pc, #388]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x33a>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb91 	bl	8000cc8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fb8d 	bl	8000cc8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0a6      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b52      	ldr	r3, [pc, #328]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a51      	ldr	r2, [pc, #324]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8092 	beq.w	800170c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d05c      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d141      	bne.n	8001680 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b48      	ldr	r3, [pc, #288]	; (8001720 <HAL_RCC_OscConfig+0x4dc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fb61 	bl	8000cc8 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fb5d 	bl	8000cc8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e078      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	4933      	ldr	r1, [pc, #204]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <HAL_RCC_OscConfig+0x4dc>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb36 	bl	8000cc8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb32 	bl	8000cc8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e04d      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x41c>
 800167e:	e045      	b.n	800170c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_RCC_OscConfig+0x4dc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff fb1f 	bl	8000cc8 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fb1b 	bl	8000cc8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e036      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x44a>
 80016ac:	e02e      	b.n	800170c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e029      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x4d8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d115      	bne.n	8001708 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d10d      	bne.n	8001708 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40007000 	.word	0x40007000
 800171c:	40023800 	.word	0x40023800
 8001720:	42470060 	.word	0x42470060

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa58 	bl	8000cc8 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa54 	bl	8000cc8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f908 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08005d24 	.word	0x08005d24
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80bd 	bhi.w	8001a94 <HAL_RCC_GetSysClockFreq+0x1a4>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e0b7      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001926:	60bb      	str	r3, [r7, #8]
       break;
 8001928:	e0b7      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800192c:	60bb      	str	r3, [r7, #8]
      break;
 800192e:	e0b4      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d04d      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	461a      	mov	r2, r3
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	ea02 0800 	and.w	r8, r2, r0
 800195e:	ea03 0901 	and.w	r9, r3, r1
 8001962:	4640      	mov	r0, r8
 8001964:	4649      	mov	r1, r9
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	014b      	lsls	r3, r1, #5
 8001970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001974:	0142      	lsls	r2, r0, #5
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	ebb0 0008 	subs.w	r0, r0, r8
 800197e:	eb61 0109 	sbc.w	r1, r1, r9
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	018b      	lsls	r3, r1, #6
 800198c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001990:	0182      	lsls	r2, r0, #6
 8001992:	1a12      	subs	r2, r2, r0
 8001994:	eb63 0301 	sbc.w	r3, r3, r1
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	00d9      	lsls	r1, r3, #3
 80019a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019a6:	00d0      	lsls	r0, r2, #3
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	eb12 0208 	adds.w	r2, r2, r8
 80019b0:	eb43 0309 	adc.w	r3, r3, r9
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	0259      	lsls	r1, r3, #9
 80019be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019c2:	0250      	lsls	r0, r2, #9
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	f7fe fc46 	bl	8000264 <__aeabi_uldivmod>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4613      	mov	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e04a      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	461a      	mov	r2, r3
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	ea02 0400 	and.w	r4, r2, r0
 80019fa:	ea03 0501 	and.w	r5, r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	014b      	lsls	r3, r1, #5
 8001a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a10:	0142      	lsls	r2, r0, #5
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	1b00      	subs	r0, r0, r4
 8001a18:	eb61 0105 	sbc.w	r1, r1, r5
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	018b      	lsls	r3, r1, #6
 8001a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a2a:	0182      	lsls	r2, r0, #6
 8001a2c:	1a12      	subs	r2, r2, r0
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	f04f 0000 	mov.w	r0, #0
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	00d9      	lsls	r1, r3, #3
 8001a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a40:	00d0      	lsls	r0, r2, #3
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	1912      	adds	r2, r2, r4
 8001a48:	eb45 0303 	adc.w	r3, r5, r3
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0299      	lsls	r1, r3, #10
 8001a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a5a:	0290      	lsls	r0, r2, #10
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	f7fe fbfa 	bl	8000264 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	0c1b      	lsrs	r3, r3, #16
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	3301      	adds	r3, #1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a90:	60bb      	str	r3, [r7, #8]
      break;
 8001a92:	e002      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a96:	60bb      	str	r3, [r7, #8]
      break;
 8001a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	007a1200 	.word	0x007a1200

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08005d34 	.word	0x08005d34

08001af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	220f      	movs	r2, #15
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetClockConfig+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 020f 	and.w	r2, r3, #15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e01d      	b.n	8001ba6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f815 	bl	8001bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f000 f968 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d007      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d122      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d11b      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0202 	mvn.w	r2, #2
 8001c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8ee 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001c52:	e005      	b.n	8001c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8e0 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8f1 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d122      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d11b      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f06f 0204 	mvn.w	r2, #4
 8001c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8c4 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001ca6:	e005      	b.n	8001cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8b6 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8c7 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d122      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11b      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f06f 0208 	mvn.w	r2, #8
 8001cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f89a 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001cfa:	e005      	b.n	8001d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f88c 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f89d 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d122      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d11b      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0210 	mvn.w	r2, #16
 8001d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2208      	movs	r2, #8
 8001d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f870 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001d4e:	e005      	b.n	8001d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f862 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f873 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0201 	mvn.w	r2, #1
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fe67 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d10e      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d107      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f903 	bl	8001fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d10e      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f838 	bl	8001e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0220 	mvn.w	r2, #32
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8cd 	bl	8001fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8a:	d00f      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <TIM_Base_SetConfig+0x118>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00b      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <TIM_Base_SetConfig+0x11c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <TIM_Base_SetConfig+0x120>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d027      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <TIM_Base_SetConfig+0x118>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d023      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <TIM_Base_SetConfig+0x11c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <TIM_Base_SetConfig+0x120>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d017      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <TIM_Base_SetConfig+0x128>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <TIM_Base_SetConfig+0x12c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <TIM_Base_SetConfig+0x130>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <TIM_Base_SetConfig+0x134>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <TIM_Base_SetConfig+0x138>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <TIM_Base_SetConfig+0x13c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0xf8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d103      	bne.n	8001f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	615a      	str	r2, [r3, #20]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	40014800 	.word	0x40014800
 8001fa0:	40001800 	.word	0x40001800
 8001fa4:	40001c00 	.word	0x40001c00
 8001fa8:	40002000 	.word	0x40002000

08001fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0208 	add.w	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f103 0208 	add.w	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0208 	add.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d103      	bne.n	8002096 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e00c      	b.n	80020b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3308      	adds	r3, #8
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	e002      	b.n	80020a4 <vListInsert+0x2e>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d2f6      	bcs.n	800209e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	601a      	str	r2, [r3, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6892      	ldr	r2, [r2, #8]
 80020fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6852      	ldr	r2, [r2, #4]
 8002108:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d103      	bne.n	800211c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1e5a      	subs	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800213c:	b580      	push	{r7, lr}
 800213e:	b08c      	sub	sp, #48	; 0x30
 8002140:	af04      	add	r7, sp, #16
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f000 ffd3 	bl	80030fc <pvPortMalloc>
 8002156:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800215e:	2058      	movs	r0, #88	; 0x58
 8002160:	f000 ffcc 	bl	80030fc <pvPortMalloc>
 8002164:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
 8002172:	e005      	b.n	8002180 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002174:	6978      	ldr	r0, [r7, #20]
 8002176:	f001 f8a1 	bl	80032bc <vPortFree>
 800217a:	e001      	b.n	8002180 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d013      	beq.n	80021ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002186:	88fa      	ldrh	r2, [r7, #6]
 8002188:	2300      	movs	r3, #0
 800218a:	9303      	str	r3, [sp, #12]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f80e 	bl	80021be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021a2:	69f8      	ldr	r0, [r7, #28]
 80021a4:	f000 f8a2 	bl	80022ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e002      	b.n	80021b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021b4:	69bb      	ldr	r3, [r7, #24]
    }
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b088      	sub	sp, #32
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	21a5      	movs	r1, #165	; 0xa5
 80021d8:	f003 fcf0 	bl	8005bbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021e6:	3b01      	subs	r3, #1
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f023 0307 	bic.w	r3, r3, #7
 80021f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	617b      	str	r3, [r7, #20]
    }
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01f      	beq.n	800225c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	e012      	b.n	8002248 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	7819      	ldrb	r1, [r3, #0]
 800222a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	3334      	adds	r3, #52	; 0x34
 8002232:	460a      	mov	r2, r1
 8002234:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d006      	beq.n	8002250 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b09      	cmp	r3, #9
 800224c:	d9e9      	bls.n	8002222 <prvInitialiseNewTask+0x64>
 800224e:	e000      	b.n	8002252 <prvInitialiseNewTask+0x94>
            {
                break;
 8002250:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800225a:	e003      	b.n	8002264 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	2b04      	cmp	r3, #4
 8002268:	d901      	bls.n	800226e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800226a:	2304      	movs	r3, #4
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002278:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	2200      	movs	r2, #0
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	3304      	adds	r3, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fec5 	bl	8002014 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	3318      	adds	r3, #24
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fec0 	bl	8002014 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002298:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	f1c3 0205 	rsb	r2, r3, #5
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	3350      	adds	r3, #80	; 0x50
 80022ae:	2204      	movs	r2, #4
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 fc82 	bl	8005bbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	3354      	adds	r3, #84	; 0x54
 80022bc:	2201      	movs	r2, #1
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 fc7b 	bl	8005bbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	68f9      	ldr	r1, [r7, #12]
 80022ca:	69b8      	ldr	r0, [r7, #24]
 80022cc:	f000 fc3e 	bl	8002b4c <pxPortInitialiseStack>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022e2:	bf00      	nop
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022ec:	b5b0      	push	{r4, r5, r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022f4:	f000 fdd6 	bl	8002ea4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022f8:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <prvAddNewTaskToReadyList+0xfc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <prvAddNewTaskToReadyList+0xfc>)
 8002300:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <prvAddNewTaskToReadyList+0x100>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800230a:	4a38      	ldr	r2, [pc, #224]	; (80023ec <prvAddNewTaskToReadyList+0x100>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <prvAddNewTaskToReadyList+0xfc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d110      	bne.n	800233a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002318:	f000 fb06 	bl	8002928 <prvInitialiseTaskLists>
 800231c:	e00d      	b.n	800233a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <prvAddNewTaskToReadyList+0x104>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <prvAddNewTaskToReadyList+0x100>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	429a      	cmp	r2, r3
 8002332:	d802      	bhi.n	800233a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002334:	4a2d      	ldr	r2, [pc, #180]	; (80023ec <prvAddNewTaskToReadyList+0x100>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800233a:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <prvAddNewTaskToReadyList+0x108>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a2c      	ldr	r2, [pc, #176]	; (80023f4 <prvAddNewTaskToReadyList+0x108>)
 8002342:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <prvAddNewTaskToReadyList+0x108>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <prvAddNewTaskToReadyList+0x94>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 f951 	bl	80055fc <SEGGER_SYSVIEW_OnTaskCreate>
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	461d      	mov	r5, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461c      	mov	r4, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	1ae3      	subs	r3, r4, r3
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	462b      	mov	r3, r5
 800237c:	f001 f964 	bl	8003648 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 f9be 	bl	8005704 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2201      	movs	r2, #1
 800238e:	409a      	lsls	r2, r3
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <prvAddNewTaskToReadyList+0x10c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4313      	orrs	r3, r2
 8002396:	4a18      	ldr	r2, [pc, #96]	; (80023f8 <prvAddNewTaskToReadyList+0x10c>)
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <prvAddNewTaskToReadyList+0x110>)
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7ff fe3c 	bl	800202e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023b6:	f000 fda5 	bl	8002f04 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <prvAddNewTaskToReadyList+0x104>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00e      	beq.n	80023e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <prvAddNewTaskToReadyList+0x100>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <prvAddNewTaskToReadyList+0x114>)
 80023d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	20000110 	.word	0x20000110
 80023ec:	20000038 	.word	0x20000038
 80023f0:	2000011c 	.word	0x2000011c
 80023f4:	2000012c 	.word	0x2000012c
 80023f8:	20000118 	.word	0x20000118
 80023fc:	2000003c 	.word	0x2000003c
 8002400:	e000ed04 	.word	0xe000ed04

08002404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01b      	beq.n	800244e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <vTaskDelay+0x68>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <vTaskDelay+0x30>
        __asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	60bb      	str	r3, [r7, #8]
    }
 8002430:	bf00      	nop
 8002432:	e7fe      	b.n	8002432 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002434:	f000 f87a 	bl	800252c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	2023      	movs	r0, #35	; 0x23
 800243c:	f002 fce8 	bl	8004e10 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002440:	2100      	movs	r1, #0
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb0a 	bl	8002a5c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002448:	f000 f87e 	bl	8002548 <xTaskResumeAll>
 800244c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <vTaskDelay+0x6c>)
 8002456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000138 	.word	0x20000138
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <vTaskStartScheduler+0x98>)
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	2282      	movs	r2, #130	; 0x82
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <vTaskStartScheduler+0x9c>)
 8002488:	4822      	ldr	r0, [pc, #136]	; (8002514 <vTaskStartScheduler+0xa0>)
 800248a:	f7ff fe57 	bl	800213c <xTaskCreate>
 800248e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d124      	bne.n	80024e0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	60bb      	str	r3, [r7, #8]
    }
 80024a8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <vTaskStartScheduler+0xa4>)
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <vTaskStartScheduler+0xa8>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <vTaskStartScheduler+0xac>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <vTaskStartScheduler+0xb0>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <vTaskStartScheduler+0x98>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d102      	bne.n	80024d0 <vTaskStartScheduler+0x5c>
 80024ca:	f003 f87b 	bl	80055c4 <SEGGER_SYSVIEW_OnIdle>
 80024ce:	e004      	b.n	80024da <vTaskStartScheduler+0x66>
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <vTaskStartScheduler+0xb0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 f8d3 	bl	8005680 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024da:	f000 fbc3 	bl	8002c64 <xPortStartScheduler>
 80024de:	e00e      	b.n	80024fe <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d10a      	bne.n	80024fe <vTaskStartScheduler+0x8a>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	607b      	str	r3, [r7, #4]
    }
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <vTaskStartScheduler+0xb4>)
 8002500:	681b      	ldr	r3, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000134 	.word	0x20000134
 8002510:	08005c50 	.word	0x08005c50
 8002514:	080028f9 	.word	0x080028f9
 8002518:	20000130 	.word	0x20000130
 800251c:	2000011c 	.word	0x2000011c
 8002520:	20000114 	.word	0x20000114
 8002524:	20000038 	.word	0x20000038
 8002528:	2000000c 	.word	0x2000000c

0800252c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <vTaskSuspendAll+0x18>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <vTaskSuspendAll+0x18>)
 8002538:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	20000138 	.word	0x20000138

08002548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002556:	4b43      	ldr	r3, [pc, #268]	; (8002664 <xTaskResumeAll+0x11c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <xTaskResumeAll+0x2c>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	603b      	str	r3, [r7, #0]
    }
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002574:	f000 fc96 	bl	8002ea4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002578:	4b3a      	ldr	r3, [pc, #232]	; (8002664 <xTaskResumeAll+0x11c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	4a39      	ldr	r2, [pc, #228]	; (8002664 <xTaskResumeAll+0x11c>)
 8002580:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002582:	4b38      	ldr	r3, [pc, #224]	; (8002664 <xTaskResumeAll+0x11c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d165      	bne.n	8002656 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <xTaskResumeAll+0x120>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d061      	beq.n	8002656 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002592:	e032      	b.n	80025fa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <xTaskResumeAll+0x124>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3318      	adds	r3, #24
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fda1 	bl	80020e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fd9c 	bl	80020e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 f8a6 	bl	8005704 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2201      	movs	r2, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <xTaskResumeAll+0x128>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <xTaskResumeAll+0x128>)
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4a27      	ldr	r2, [pc, #156]	; (8002674 <xTaskResumeAll+0x12c>)
 80025d8:	441a      	add	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3304      	adds	r3, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7ff fd24 	bl	800202e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <xTaskResumeAll+0x130>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d302      	bcc.n	80025fa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <xTaskResumeAll+0x134>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <xTaskResumeAll+0x124>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1c8      	bne.n	8002594 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002608:	f000 fa0c 	bl	8002a24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <xTaskResumeAll+0x138>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002618:	f000 f848 	bl	80026ac <xTaskIncrementTick>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <xTaskResumeAll+0x134>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f1      	bne.n	8002618 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <xTaskResumeAll+0x138>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <xTaskResumeAll+0x134>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002642:	2301      	movs	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <xTaskResumeAll+0x13c>)
 8002648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002656:	f000 fc55 	bl	8002f04 <vPortExitCritical>

    return xAlreadyYielded;
 800265a:	68bb      	ldr	r3, [r7, #8]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000138 	.word	0x20000138
 8002668:	20000110 	.word	0x20000110
 800266c:	200000d0 	.word	0x200000d0
 8002670:	20000118 	.word	0x20000118
 8002674:	2000003c 	.word	0x2000003c
 8002678:	20000038 	.word	0x20000038
 800267c:	20000124 	.word	0x20000124
 8002680:	20000120 	.word	0x20000120
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800268e:	f000 fcf5 	bl	800307c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <xTaskGetTickCountFromISR+0x20>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800269c:	683b      	ldr	r3, [r7, #0]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000114 	.word	0x20000114

080026ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <xTaskIncrementTick+0x14c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8092 	bne.w	80027e4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <xTaskIncrementTick+0x150>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026c8:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <xTaskIncrementTick+0x150>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d120      	bne.n	8002716 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026d4:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <xTaskIncrementTick+0x154>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <xTaskIncrementTick+0x48>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	603b      	str	r3, [r7, #0]
    }
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xTaskIncrementTick+0x46>
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <xTaskIncrementTick+0x154>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b42      	ldr	r3, [pc, #264]	; (8002804 <xTaskIncrementTick+0x158>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <xTaskIncrementTick+0x154>)
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4a40      	ldr	r2, [pc, #256]	; (8002804 <xTaskIncrementTick+0x158>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <xTaskIncrementTick+0x15c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <xTaskIncrementTick+0x15c>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	f000 f987 	bl	8002a24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <xTaskIncrementTick+0x160>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d34c      	bcc.n	80027ba <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <xTaskIncrementTick+0x154>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <xTaskIncrementTick+0x160>)
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	601a      	str	r2, [r3, #0]
                    break;
 8002732:	e042      	b.n	80027ba <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <xTaskIncrementTick+0x154>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	429a      	cmp	r2, r3
 800274a:	d203      	bcs.n	8002754 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800274c:	4a2f      	ldr	r2, [pc, #188]	; (800280c <xTaskIncrementTick+0x160>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002752:	e032      	b.n	80027ba <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fcc5 	bl	80020e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3318      	adds	r3, #24
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fcbc 	bl	80020e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 ffc6 	bl	8005704 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <xTaskIncrementTick+0x164>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	4a22      	ldr	r2, [pc, #136]	; (8002810 <xTaskIncrementTick+0x164>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <xTaskIncrementTick+0x168>)
 8002798:	441a      	add	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7ff fc44 	bl	800202e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <xTaskIncrementTick+0x16c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3b5      	bcc.n	8002720 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027b8:	e7b2      	b.n	8002720 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027ba:	4b17      	ldr	r3, [pc, #92]	; (8002818 <xTaskIncrementTick+0x16c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4914      	ldr	r1, [pc, #80]	; (8002814 <xTaskIncrementTick+0x168>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d901      	bls.n	80027d6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <xTaskIncrementTick+0x170>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80027de:	2301      	movs	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e004      	b.n	80027ee <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <xTaskIncrementTick+0x174>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <xTaskIncrementTick+0x174>)
 80027ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027ee:	697b      	ldr	r3, [r7, #20]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000138 	.word	0x20000138
 80027fc:	20000114 	.word	0x20000114
 8002800:	200000c8 	.word	0x200000c8
 8002804:	200000cc 	.word	0x200000cc
 8002808:	20000128 	.word	0x20000128
 800280c:	20000130 	.word	0x20000130
 8002810:	20000118 	.word	0x20000118
 8002814:	2000003c 	.word	0x2000003c
 8002818:	20000038 	.word	0x20000038
 800281c:	20000124 	.word	0x20000124
 8002820:	20000120 	.word	0x20000120

08002824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <vTaskSwitchContext+0xbc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <vTaskSwitchContext+0xc0>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002838:	e04d      	b.n	80028d6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <vTaskSwitchContext+0xc0>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <vTaskSwitchContext+0xc4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800284e:	7afb      	ldrb	r3, [r7, #11]
 8002850:	f1c3 031f 	rsb	r3, r3, #31
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	4925      	ldr	r1, [pc, #148]	; (80028ec <vTaskSwitchContext+0xc8>)
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <vTaskSwitchContext+0x5c>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	607b      	str	r3, [r7, #4]
    }
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <vTaskSwitchContext+0x5a>
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <vTaskSwitchContext+0xc8>)
 800288c:	4413      	add	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3308      	adds	r3, #8
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d104      	bne.n	80028b0 <vTaskSwitchContext+0x8c>
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <vTaskSwitchContext+0xcc>)
 80028b8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <vTaskSwitchContext+0xcc>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <vTaskSwitchContext+0xd0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d102      	bne.n	80028cc <vTaskSwitchContext+0xa8>
 80028c6:	f002 fe7d 	bl	80055c4 <SEGGER_SYSVIEW_OnIdle>
}
 80028ca:	e004      	b.n	80028d6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <vTaskSwitchContext+0xcc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f002 fed5 	bl	8005680 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000138 	.word	0x20000138
 80028e4:	20000124 	.word	0x20000124
 80028e8:	20000118 	.word	0x20000118
 80028ec:	2000003c 	.word	0x2000003c
 80028f0:	20000038 	.word	0x20000038
 80028f4:	20000134 	.word	0x20000134

080028f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002900:	f000 f852 	bl	80029a8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <prvIdleTask+0x28>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d9f9      	bls.n	8002900 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <prvIdleTask+0x2c>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800291c:	e7f0      	b.n	8002900 <prvIdleTask+0x8>
 800291e:	bf00      	nop
 8002920:	2000003c 	.word	0x2000003c
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	e00c      	b.n	800294e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <prvInitialiseTaskLists+0x60>)
 8002940:	4413      	add	r3, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fb46 	bl	8001fd4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3301      	adds	r3, #1
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d9ef      	bls.n	8002934 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <prvInitialiseTaskLists+0x64>)
 8002956:	f7ff fb3d 	bl	8001fd4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800295a:	480d      	ldr	r0, [pc, #52]	; (8002990 <prvInitialiseTaskLists+0x68>)
 800295c:	f7ff fb3a 	bl	8001fd4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <prvInitialiseTaskLists+0x6c>)
 8002962:	f7ff fb37 	bl	8001fd4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002966:	480c      	ldr	r0, [pc, #48]	; (8002998 <prvInitialiseTaskLists+0x70>)
 8002968:	f7ff fb34 	bl	8001fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <prvInitialiseTaskLists+0x74>)
 800296e:	f7ff fb31 	bl	8001fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <prvInitialiseTaskLists+0x78>)
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <prvInitialiseTaskLists+0x64>)
 8002976:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <prvInitialiseTaskLists+0x7c>)
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <prvInitialiseTaskLists+0x68>)
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000003c 	.word	0x2000003c
 800298c:	200000a0 	.word	0x200000a0
 8002990:	200000b4 	.word	0x200000b4
 8002994:	200000d0 	.word	0x200000d0
 8002998:	200000e4 	.word	0x200000e4
 800299c:	200000fc 	.word	0x200000fc
 80029a0:	200000c8 	.word	0x200000c8
 80029a4:	200000cc 	.word	0x200000cc

080029a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029ae:	e019      	b.n	80029e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029b0:	f000 fa78 	bl	8002ea4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <prvCheckTasksWaitingTermination+0x50>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fb91 	bl	80020e8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <prvCheckTasksWaitingTermination+0x54>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <prvCheckTasksWaitingTermination+0x54>)
 80029ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <prvCheckTasksWaitingTermination+0x58>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <prvCheckTasksWaitingTermination+0x58>)
 80029d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80029da:	f000 fa93 	bl	8002f04 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f810 	bl	8002a04 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <prvCheckTasksWaitingTermination+0x58>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e1      	bne.n	80029b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200000e4 	.word	0x200000e4
 80029fc:	20000110 	.word	0x20000110
 8002a00:	200000f8 	.word	0x200000f8

08002a04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fc53 	bl	80032bc <vPortFree>
                vPortFree( pxTCB );
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fc50 	bl	80032bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <prvResetNextTaskUnblockTime+0x30>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <prvResetNextTaskUnblockTime+0x34>)
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a3a:	e005      	b.n	8002a48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <prvResetNextTaskUnblockTime+0x30>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <prvResetNextTaskUnblockTime+0x34>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	200000c8 	.word	0x200000c8
 8002a58:	20000130 	.word	0x20000130

08002a5c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a66:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fb38 	bl	80020e8 <uxListRemove>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10b      	bne.n	8002a96 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2201      	movs	r2, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4013      	ands	r3, r2
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002a94:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d110      	bne.n	8002ac0 <prvAddCurrentTaskToDelayedList+0x64>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00d      	beq.n	8002ac0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002aa4:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	211b      	movs	r1, #27
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fe6c 	bl	8005788 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4820      	ldr	r0, [pc, #128]	; (8002b3c <prvAddCurrentTaskToDelayedList+0xe0>)
 8002aba:	f7ff fab8 	bl	800202e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002abe:	e032      	b.n	8002b26 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d20f      	bcs.n	8002af8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2104      	movs	r1, #4
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 fe52 	bl	8005788 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7ff fac0 	bl	8002076 <vListInsert>
}
 8002af6:	e016      	b.n	8002b26 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2104      	movs	r1, #4
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fe42 	bl	8005788 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f7ff fab0 	bl	8002076 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d202      	bcs.n	8002b26 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002b20:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <prvAddCurrentTaskToDelayedList+0xec>)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6013      	str	r3, [r2, #0]
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000114 	.word	0x20000114
 8002b34:	20000038 	.word	0x20000038
 8002b38:	20000118 	.word	0x20000118
 8002b3c:	200000fc 	.word	0x200000fc
 8002b40:	200000cc 	.word	0x200000cc
 8002b44:	200000c8 	.word	0x200000c8
 8002b48:	20000130 	.word	0x20000130

08002b4c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3b04      	subs	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f023 0201 	bic.w	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	3b04      	subs	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <pxPortInitialiseStack+0x64>)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b14      	subs	r3, #20
 8002b86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3b04      	subs	r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f06f 0202 	mvn.w	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3b20      	subs	r3, #32
 8002ba0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	08002bb5 	.word	0x08002bb5

08002bb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <prvTaskExitError+0x54>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d00a      	beq.n	8002bde <prvTaskExitError+0x2a>
        __asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	60fb      	str	r3, [r7, #12]
    }
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <prvTaskExitError+0x28>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	60bb      	str	r3, [r7, #8]
    }
 8002bf0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002bf2:	bf00      	nop
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0fc      	beq.n	8002bf4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	20000010 	.word	0x20000010
 8002c0c:	00000000 	.word	0x00000000

08002c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <pxCurrentTCBConst2>)
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	6808      	ldr	r0, [r1, #0]
 8002c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1a:	f380 8809 	msr	PSP, r0
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f380 8811 	msr	BASEPRI, r0
 8002c2a:	4770      	bx	lr
 8002c2c:	f3af 8000 	nop.w

08002c30 <pxCurrentTCBConst2>:
 8002c30:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop

08002c38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c38:	4808      	ldr	r0, [pc, #32]	; (8002c5c <prvPortStartFirstTask+0x24>)
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	6800      	ldr	r0, [r0, #0]
 8002c3e:	f380 8808 	msr	MSP, r0
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f380 8814 	msr	CONTROL, r0
 8002c4a:	b662      	cpsie	i
 8002c4c:	b661      	cpsie	f
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	df00      	svc	0
 8002c58:	bf00      	nop
 8002c5a:	0000      	.short	0x0000
 8002c5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop

08002c64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <xPortStartScheduler+0x120>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <xPortStartScheduler+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d10a      	bne.n	8002c8a <xPortStartScheduler+0x26>
        __asm volatile
 8002c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	613b      	str	r3, [r7, #16]
    }
 8002c86:	bf00      	nop
 8002c88:	e7fe      	b.n	8002c88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <xPortStartScheduler+0x120>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <xPortStartScheduler+0x128>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10a      	bne.n	8002caa <xPortStartScheduler+0x46>
        __asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	60fb      	str	r3, [r7, #12]
    }
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002caa:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <xPortStartScheduler+0x12c>)
 8002cac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <xPortStartScheduler+0x130>)
 8002cd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cd2:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <xPortStartScheduler+0x134>)
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd8:	e009      	b.n	8002cee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <xPortStartScheduler+0x134>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <xPortStartScheduler+0x134>)
 8002ce2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf6:	2b80      	cmp	r3, #128	; 0x80
 8002cf8:	d0ef      	beq.n	8002cda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <xPortStartScheduler+0x134>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00a      	beq.n	8002d1c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	60bb      	str	r3, [r7, #8]
    }
 8002d18:	bf00      	nop
 8002d1a:	e7fe      	b.n	8002d1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <xPortStartScheduler+0x134>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <xPortStartScheduler+0x134>)
 8002d24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d26:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <xPortStartScheduler+0x134>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d2e:	4a1a      	ldr	r2, [pc, #104]	; (8002d98 <xPortStartScheduler+0x134>)
 8002d30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <xPortStartScheduler+0x138>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <xPortStartScheduler+0x138>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <xPortStartScheduler+0x138>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <xPortStartScheduler+0x138>)
 8002d4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d52:	f000 f963 	bl	800301c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <xPortStartScheduler+0x13c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d5c:	f000 f982 	bl	8003064 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <xPortStartScheduler+0x140>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <xPortStartScheduler+0x140>)
 8002d66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d6c:	f7ff ff64 	bl	8002c38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d70:	f7ff fd58 	bl	8002824 <vTaskSwitchContext>
    prvTaskExitError();
 8002d74:	f7ff ff1e 	bl	8002bb4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00
 8002d88:	410fc271 	.word	0x410fc271
 8002d8c:	410fc270 	.word	0x410fc270
 8002d90:	e000e400 	.word	0xe000e400
 8002d94:	2000013c 	.word	0x2000013c
 8002d98:	20000140 	.word	0x20000140
 8002d9c:	e000ed20 	.word	0xe000ed20
 8002da0:	20000010 	.word	0x20000010
 8002da4:	e000ef34 	.word	0xe000ef34

08002da8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dae:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <vInitPrioGroupValue+0xe4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <vInitPrioGroupValue+0xe8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10a      	bne.n	8002dce <vInitPrioGroupValue+0x26>
        __asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	613b      	str	r3, [r7, #16]
    }
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <vInitPrioGroupValue+0xe4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <vInitPrioGroupValue+0xec>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10a      	bne.n	8002dee <vInitPrioGroupValue+0x46>
        __asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
    }
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <vInitPrioGroupValue+0xf0>)
 8002df0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	22ff      	movs	r2, #255	; 0xff
 8002dfe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <vInitPrioGroupValue+0xf4>)
 8002e14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e18:	2207      	movs	r2, #7
 8002e1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e1c:	e009      	b.n	8002e32 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	2b80      	cmp	r3, #128	; 0x80
 8002e3c:	d0ef      	beq.n	8002e1e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e3e:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00a      	beq.n	8002e60 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
    }
 8002e5c:	bf00      	nop
 8002e5e:	e7fe      	b.n	8002e5e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e68:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <vInitPrioGroupValue+0xf8>)
 8002e74:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	410fc271 	.word	0x410fc271
 8002e94:	410fc270 	.word	0x410fc270
 8002e98:	e000e400 	.word	0xe000e400
 8002e9c:	2000013c 	.word	0x2000013c
 8002ea0:	20000140 	.word	0x20000140

08002ea4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	607b      	str	r3, [r7, #4]
    }
 8002ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <vPortEnterCritical+0x58>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <vPortEnterCritical+0x58>)
 8002ec6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <vPortEnterCritical+0x58>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10f      	bne.n	8002ef0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <vPortEnterCritical+0x5c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	603b      	str	r3, [r7, #0]
    }
 8002eec:	bf00      	nop
 8002eee:	e7fe      	b.n	8002eee <vPortEnterCritical+0x4a>
    }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	20000010 	.word	0x20000010
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <vPortExitCritical+0x50>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <vPortExitCritical+0x24>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	607b      	str	r3, [r7, #4]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <vPortExitCritical+0x50>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <vPortExitCritical+0x50>)
 8002f30:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <vPortExitCritical+0x50>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <vPortExitCritical+0x42>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f44:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000010 	.word	0x20000010
	...

08002f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f60:	f3ef 8009 	mrs	r0, PSP
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <pxCurrentTCBConst>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f01e 0f10 	tst.w	lr, #16
 8002f70:	bf08      	it	eq
 8002f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7a:	6010      	str	r0, [r2, #0]
 8002f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f84:	f380 8811 	msr	BASEPRI, r0
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f7ff fc48 	bl	8002824 <vTaskSwitchContext>
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f380 8811 	msr	BASEPRI, r0
 8002f9c:	bc09      	pop	{r0, r3}
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	6808      	ldr	r0, [r1, #0]
 8002fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa6:	f01e 0f10 	tst.w	lr, #16
 8002faa:	bf08      	it	eq
 8002fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fb0:	f380 8809 	msr	PSP, r0
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	f3af 8000 	nop.w

08002fc0 <pxCurrentTCBConst>:
 8002fc0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop

08002fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	607b      	str	r3, [r7, #4]
    }
 8002fe0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002fe2:	f002 fa75 	bl	80054d0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002fe6:	f7ff fb61 	bl	80026ac <xTaskIncrementTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ff0:	f002 facc 	bl	800558c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <SysTick_Handler+0x50>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e001      	b.n	8003002 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002ffe:	f002 faa9 	bl	8005554 <SEGGER_SYSVIEW_RecordExitISR>
 8003002:	2300      	movs	r3, #0
 8003004:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f383 8811 	msr	BASEPRI, r3
    }
 800300c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <vPortSetupTimerInterrupt+0x38>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <vPortSetupTimerInterrupt+0x3c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <vPortSetupTimerInterrupt+0x40>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <vPortSetupTimerInterrupt+0x44>)
 800303a:	3b01      	subs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010
 8003054:	e000e018 	.word	0xe000e018
 8003058:	20000000 	.word	0x20000000
 800305c:	10624dd3 	.word	0x10624dd3
 8003060:	e000e014 	.word	0xe000e014

08003064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003074 <vPortEnableVFP+0x10>
 8003068:	6801      	ldr	r1, [r0, #0]
 800306a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800306e:	6001      	str	r1, [r0, #0]
 8003070:	4770      	bx	lr
 8003072:	0000      	.short	0x0000
 8003074:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop

0800307c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003082:	f3ef 8305 	mrs	r3, IPSR
 8003086:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	d914      	bls.n	80030b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800308e:	4a17      	ldr	r2, [pc, #92]	; (80030ec <vPortValidateInterruptPriority+0x70>)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <vPortValidateInterruptPriority+0x74>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	7afa      	ldrb	r2, [r7, #11]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20a      	bcs.n	80030b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	607b      	str	r3, [r7, #4]
    }
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <vPortValidateInterruptPriority+0x78>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <vPortValidateInterruptPriority+0x7c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d90a      	bls.n	80030de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	603b      	str	r3, [r7, #0]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <vPortValidateInterruptPriority+0x60>
    }
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000e3f0 	.word	0xe000e3f0
 80030f0:	2000013c 	.word	0x2000013c
 80030f4:	e000ed0c 	.word	0xe000ed0c
 80030f8:	20000140 	.word	0x20000140

080030fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003108:	f7ff fa10 	bl	800252c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800310c:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <pvPortMalloc+0x1a8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003114:	f000 f934 	bl	8003380 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003118:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <pvPortMalloc+0x1ac>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 80a7 	bne.w	8003274 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02d      	beq.n	8003188 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800312c:	2208      	movs	r2, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	d227      	bcs.n	8003188 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003138:	2208      	movs	r2, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	2b00      	cmp	r3, #0
 8003148:	d021      	beq.n	800318e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f023 0307 	bic.w	r3, r3, #7
 8003150:	3308      	adds	r3, #8
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d214      	bcs.n	8003182 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f023 0307 	bic.w	r3, r3, #7
 800315e:	3308      	adds	r3, #8
 8003160:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <pvPortMalloc+0x92>
        __asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	617b      	str	r3, [r7, #20]
    }
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003186:	e002      	b.n	800318e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e000      	b.n	8003190 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800318e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06e      	beq.n	8003274 <pvPortMalloc+0x178>
 8003196:	4b45      	ldr	r3, [pc, #276]	; (80032ac <pvPortMalloc+0x1b0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d869      	bhi.n	8003274 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031a0:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <pvPortMalloc+0x1b4>)
 80031a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <pvPortMalloc+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031aa:	e004      	b.n	80031b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d903      	bls.n	80031c8 <pvPortMalloc+0xcc>
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f1      	bne.n	80031ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <pvPortMalloc+0x1a8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d050      	beq.n	8003274 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2208      	movs	r2, #8
 80031d8:	4413      	add	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	1ad2      	subs	r2, r2, r3
 80031ec:	2308      	movs	r3, #8
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d91f      	bls.n	8003234 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <pvPortMalloc+0x120>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	613b      	str	r3, [r7, #16]
    }
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800322e:	69b8      	ldr	r0, [r7, #24]
 8003230:	f000 f908 	bl	8003444 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <pvPortMalloc+0x1b0>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <pvPortMalloc+0x1b0>)
 8003240:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003242:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <pvPortMalloc+0x1b0>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <pvPortMalloc+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d203      	bcs.n	8003256 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <pvPortMalloc+0x1b0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <pvPortMalloc+0x1b8>)
 8003254:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <pvPortMalloc+0x1ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	431a      	orrs	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <pvPortMalloc+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <pvPortMalloc+0x1bc>)
 8003272:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003274:	f7ff f968 	bl	8002548 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <pvPortMalloc+0x19c>
        __asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	60fb      	str	r3, [r7, #12]
    }
 8003294:	bf00      	nop
 8003296:	e7fe      	b.n	8003296 <pvPortMalloc+0x19a>
    return pvReturn;
 8003298:	69fb      	ldr	r3, [r7, #28]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2001914c 	.word	0x2001914c
 80032a8:	20019160 	.word	0x20019160
 80032ac:	20019150 	.word	0x20019150
 80032b0:	20019144 	.word	0x20019144
 80032b4:	20019154 	.word	0x20019154
 80032b8:	20019158 	.word	0x20019158

080032bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04d      	beq.n	800336a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032ce:	2308      	movs	r3, #8
 80032d0:	425b      	negs	r3, r3
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4b24      	ldr	r3, [pc, #144]	; (8003374 <vPortFree+0xb8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <vPortFree+0x44>
        __asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	60fb      	str	r3, [r7, #12]
    }
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <vPortFree+0x62>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	60bb      	str	r3, [r7, #8]
    }
 800331a:	bf00      	nop
 800331c:	e7fe      	b.n	800331c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <vPortFree+0xb8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01e      	beq.n	800336a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11a      	bne.n	800336a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <vPortFree+0xb8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003344:	f7ff f8f2 	bl	800252c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <vPortFree+0xbc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4413      	add	r3, r2
 8003352:	4a09      	ldr	r2, [pc, #36]	; (8003378 <vPortFree+0xbc>)
 8003354:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003356:	6938      	ldr	r0, [r7, #16]
 8003358:	f000 f874 	bl	8003444 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <vPortFree+0xc0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a06      	ldr	r2, [pc, #24]	; (800337c <vPortFree+0xc0>)
 8003364:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003366:	f7ff f8ef 	bl	8002548 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800336a:	bf00      	nop
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20019160 	.word	0x20019160
 8003378:	20019150 	.word	0x20019150
 800337c:	2001915c 	.word	0x2001915c

08003380 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003386:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800338a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800338c:	4b27      	ldr	r3, [pc, #156]	; (800342c <prvHeapInit+0xac>)
 800338e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3307      	adds	r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	4a1f      	ldr	r2, [pc, #124]	; (800342c <prvHeapInit+0xac>)
 80033b0:	4413      	add	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <prvHeapInit+0xb0>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <prvHeapInit+0xb0>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	4413      	add	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033cc:	2208      	movs	r2, #8
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0307 	bic.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <prvHeapInit+0xb4>)
 80033e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <prvHeapInit+0xb4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <prvHeapInit+0xb4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	1ad2      	subs	r2, r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <prvHeapInit+0xb4>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <prvHeapInit+0xb8>)
 800340e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a09      	ldr	r2, [pc, #36]	; (800343c <prvHeapInit+0xbc>)
 8003416:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <prvHeapInit+0xc0>)
 800341a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800341e:	601a      	str	r2, [r3, #0]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	20000144 	.word	0x20000144
 8003430:	20019144 	.word	0x20019144
 8003434:	2001914c 	.word	0x2001914c
 8003438:	20019154 	.word	0x20019154
 800343c:	20019150 	.word	0x20019150
 8003440:	20019160 	.word	0x20019160

08003444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800344c:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <prvInsertBlockIntoFreeList+0xac>)
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e002      	b.n	8003458 <prvInsertBlockIntoFreeList+0x14>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d8f7      	bhi.n	8003452 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4413      	add	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d108      	bne.n	8003486 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	441a      	add	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d118      	bne.n	80034cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <prvInsertBlockIntoFreeList+0xb0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d00d      	beq.n	80034c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	441a      	add	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e008      	b.n	80034d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <prvInsertBlockIntoFreeList+0xb0>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e003      	b.n	80034d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d002      	beq.n	80034e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20019144 	.word	0x20019144
 80034f4:	2001914c 	.word	0x2001914c

080034f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <_cbSendSystemDesc+0x14>)
 80034fe:	f001 ff91 	bl	8005424 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <_cbSendSystemDesc+0x18>)
 8003504:	f001 ff8e 	bl	8005424 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}
 800350c:	08005c58 	.word	0x08005c58
 8003510:	08005c9c 	.word	0x08005c9c

08003514 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <SEGGER_SYSVIEW_Conf+0x20>)
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SEGGER_SYSVIEW_Conf+0x20>)
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <SEGGER_SYSVIEW_Conf+0x24>)
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <SEGGER_SYSVIEW_Conf+0x28>)
 8003524:	f001 fc02 	bl	8004d2c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003528:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800352c:	f001 fc42 	bl	8004db4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003530:	bf00      	nop
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000000 	.word	0x20000000
 8003538:	080034f9 	.word	0x080034f9
 800353c:	08005d3c 	.word	0x08005d3c

08003540 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	e033      	b.n	80035b4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800354c:	491e      	ldr	r1, [pc, #120]	; (80035c8 <_cbSendTaskList+0x88>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	491a      	ldr	r1, [pc, #104]	; (80035c8 <_cbSendTaskList+0x88>)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3304      	adds	r3, #4
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	4c16      	ldr	r4, [pc, #88]	; (80035c8 <_cbSendTaskList+0x88>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4423      	add	r3, r4
 800357c:	3308      	adds	r3, #8
 800357e:	681c      	ldr	r4, [r3, #0]
 8003580:	4d11      	ldr	r5, [pc, #68]	; (80035c8 <_cbSendTaskList+0x88>)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	442b      	add	r3, r5
 800358e:	330c      	adds	r3, #12
 8003590:	681d      	ldr	r5, [r3, #0]
 8003592:	4e0d      	ldr	r6, [pc, #52]	; (80035c8 <_cbSendTaskList+0x88>)
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4433      	add	r3, r6
 80035a0:	3310      	adds	r3, #16
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	462b      	mov	r3, r5
 80035a8:	4622      	mov	r2, r4
 80035aa:	f000 f8b5 	bl	8003718 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3301      	adds	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <_cbSendTaskList+0x8c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d3c6      	bcc.n	800354c <_cbSendTaskList+0xc>
  }
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c8:	20019164 	.word	0x20019164
 80035cc:	20019204 	.word	0x20019204

080035d0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035d0:	b5b0      	push	{r4, r5, r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035d6:	f7ff f857 	bl	8002688 <xTaskGetTickCountFromISR>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80035e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	f04f 0400 	mov.w	r4, #0
 80035f2:	f04f 0500 	mov.w	r5, #0
 80035f6:	015d      	lsls	r5, r3, #5
 80035f8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80035fc:	0154      	lsls	r4, r2, #5
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	1a12      	subs	r2, r2, r0
 8003604:	eb63 0301 	sbc.w	r3, r3, r1
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	f04f 0500 	mov.w	r5, #0
 8003610:	009d      	lsls	r5, r3, #2
 8003612:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003616:	0094      	lsls	r4, r2, #2
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	1812      	adds	r2, r2, r0
 800361e:	eb41 0303 	adc.w	r3, r1, r3
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	00d9      	lsls	r1, r3, #3
 800362c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003630:	00d0      	lsls	r0, r2, #3
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800363a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bdb0      	pop	{r4, r5, r7, pc}

08003648 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003656:	2205      	movs	r2, #5
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <SYSVIEW_AddTask+0xc0>)
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f002 fa92 	bl	8005b84 <memcmp>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04b      	beq.n	80036fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d903      	bls.n	8003676 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800366e:	4828      	ldr	r0, [pc, #160]	; (8003710 <SYSVIEW_AddTask+0xc8>)
 8003670:	f002 f9da 	bl	8005a28 <SEGGER_SYSVIEW_Warn>
    return;
 8003674:	e044      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <SYSVIEW_AddTask+0xc4>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4926      	ldr	r1, [pc, #152]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <SYSVIEW_AddTask+0xc4>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4921      	ldr	r1, [pc, #132]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3304      	adds	r3, #4
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	491b      	ldr	r1, [pc, #108]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3308      	adds	r3, #8
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	330c      	adds	r3, #12
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4910      	ldr	r1, [pc, #64]	; (8003714 <SYSVIEW_AddTask+0xcc>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3310      	adds	r3, #16
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3301      	adds	r3, #1
 80036e8:	4a08      	ldr	r2, [pc, #32]	; (800370c <SYSVIEW_AddTask+0xc4>)
 80036ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f80e 	bl	8003718 <SYSVIEW_SendTaskInfo>
 80036fc:	e000      	b.n	8003700 <SYSVIEW_AddTask+0xb8>
    return;
 80036fe:	bf00      	nop

}
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08005cac 	.word	0x08005cac
 800370c:	20019204 	.word	0x20019204
 8003710:	08005cb4 	.word	0x08005cb4
 8003714:	20019164 	.word	0x20019164

08003718 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2214      	movs	r2, #20
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f002 fa44 	bl	8005bbc <memset>
  TaskInfo.TaskID     = TaskID;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fd71 	bl	8005234 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003752:	bf00      	nop
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <__NVIC_EnableIRQ>:
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	db0b      	blt.n	8003786 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	f003 021f 	and.w	r2, r3, #31
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <__NVIC_EnableIRQ+0x38>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2001      	movs	r0, #1
 800377e:	fa00 f202 	lsl.w	r2, r0, r2
 8003782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80037f2:	f002 f975 	bl	8005ae0 <SEGGER_SYSVIEW_IsStarted>
 80037f6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80037fe:	f001 fb9d 	bl	8004f3c <SEGGER_SYSVIEW_Start>
  }
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d806      	bhi.n	800382c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003828:	701a      	strb	r2, [r3, #0]
    goto Done;
 800382a:	e009      	b.n	8003840 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800382c:	f7ff ffde 	bl	80037ec <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <_cbOnUARTRx+0x3c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	2201      	movs	r2, #1
 800383a:	4619      	mov	r1, r3
 800383c:	f000 fb9a 	bl	8003f74 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003840:	bf00      	nop
}
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000014 	.word	0x20000014

0800384c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <_cbOnUARTTx+0x5c>)
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d80f      	bhi.n	800387c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	461a      	mov	r2, r3
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <_cbOnUARTTx+0x60>)
 8003864:	5c9a      	ldrb	r2, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	3301      	adds	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <_cbOnUARTTx+0x5c>)
 8003874:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
    goto Done;
 800387a:	e00f      	b.n	800389c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <_cbOnUARTTx+0x5c>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa19 	bl	8003cbc <SEGGER_RTT_ReadUpBufferNoLock>
 800388a:	4603      	mov	r3, r0
 800388c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	da02      	bge.n	800389a <_cbOnUARTTx+0x4e>
    r = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e000      	b.n	800389c <_cbOnUARTTx+0x50>
  }
Done:
 800389a:	bf00      	nop
  return r;
 800389c:	68fb      	ldr	r3, [r7, #12]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000014 	.word	0x20000014
 80038ac:	08005d44 	.word	0x08005d44

080038b0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80038b8:	4a04      	ldr	r2, [pc, #16]	; (80038cc <SEGGER_UART_init+0x1c>)
 80038ba:	4905      	ldr	r1, [pc, #20]	; (80038d0 <SEGGER_UART_init+0x20>)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f863 	bl	8003988 <HIF_UART_Init>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	0800380d 	.word	0x0800380d
 80038d0:	0800384d 	.word	0x0800384d

080038d4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <USART2_IRQHandler+0x80>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <USART2_IRQHandler+0x84>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 030b 	and.w	r3, r3, #11
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80038fc:	4b17      	ldr	r3, [pc, #92]	; (800395c <USART2_IRQHandler+0x88>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <USART2_IRQHandler+0x88>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	79fa      	ldrb	r2, [r7, #7]
 800390a:	4610      	mov	r0, r2
 800390c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <USART2_IRQHandler+0x8c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <USART2_IRQHandler+0x8c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1dfa      	adds	r2, r7, #7
 8003926:	4610      	mov	r0, r2
 8003928:	4798      	blx	r3
 800392a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <USART2_IRQHandler+0x90>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <USART2_IRQHandler+0x90>)
 8003938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e006      	b.n	800394e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <USART2_IRQHandler+0x80>)
 8003942:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	4b04      	ldr	r3, [pc, #16]	; (8003958 <USART2_IRQHandler+0x84>)
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e000      	b.n	800394e <USART2_IRQHandler+0x7a>
      return;
 800394c:	bf00      	nop
    }
  }
}
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40004400 	.word	0x40004400
 8003958:	40004404 	.word	0x40004404
 800395c:	20019208 	.word	0x20019208
 8003960:	2001920c 	.word	0x2001920c
 8003964:	4000440c 	.word	0x4000440c

08003968 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	4000440c 	.word	0x4000440c

08003988 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HIF_UART_Init+0xc8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HIF_UART_Init+0xc8>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80039a0:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HIF_UART_Init+0xcc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HIF_UART_Init+0xcc>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HIF_UART_Init+0xd0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80039c0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HIF_UART_Init+0xd0>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HIF_UART_Init+0xd4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80039dc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80039de:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HIF_UART_Init+0xd4>)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <HIF_UART_Init+0xd8>)
 80039e6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80039ea:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HIF_UART_Init+0xdc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HIF_UART_Init+0xe0>)
 80039f4:	2280      	movs	r2, #128	; 0x80
 80039f6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HIF_UART_Init+0xe4>)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d302      	bcc.n	8003a1e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a18:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a1c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HIF_UART_Init+0xe8>)
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HIF_UART_Init+0xec>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003a34:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <HIF_UART_Init+0xf0>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003a3a:	2106      	movs	r1, #6
 8003a3c:	2026      	movs	r0, #38	; 0x26
 8003a3e:	f7ff feab 	bl	8003798 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003a42:	2026      	movs	r0, #38	; 0x26
 8003a44:	f7ff fe8a 	bl	800375c <__NVIC_EnableIRQ>
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023840 	.word	0x40023840
 8003a54:	40023830 	.word	0x40023830
 8003a58:	40020020 	.word	0x40020020
 8003a5c:	40020000 	.word	0x40020000
 8003a60:	4000440c 	.word	0x4000440c
 8003a64:	40004410 	.word	0x40004410
 8003a68:	40004414 	.word	0x40004414
 8003a6c:	0501bd00 	.word	0x0501bd00
 8003a70:	40004408 	.word	0x40004408
 8003a74:	20019208 	.word	0x20019208
 8003a78:	2001920c 	.word	0x2001920c

08003a7c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <_DoInit+0x98>)
 8003a84:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <_DoInit+0x9c>)
 8003a96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <_DoInit+0xa0>)
 8003a9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a17      	ldr	r2, [pc, #92]	; (8003b18 <_DoInit+0x9c>)
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <_DoInit+0xa4>)
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2210      	movs	r2, #16
 8003ac8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3307      	adds	r3, #7
 8003ae0:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <_DoInit+0xa8>)
 8003ae2:	6810      	ldr	r0, [r2, #0]
 8003ae4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ae6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <_DoInit+0xac>)
 8003aee:	6810      	ldr	r0, [r2, #0]
 8003af0:	6018      	str	r0, [r3, #0]
 8003af2:	8891      	ldrh	r1, [r2, #4]
 8003af4:	7992      	ldrb	r2, [r2, #6]
 8003af6:	8099      	strh	r1, [r3, #4]
 8003af8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003afa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b04:	f3bf 8f5f 	dmb	sy
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	2001a780 	.word	0x2001a780
 8003b18:	08005d04 	.word	0x08005d04
 8003b1c:	20019210 	.word	0x20019210
 8003b20:	20019610 	.word	0x20019610
 8003b24:	08005d10 	.word	0x08005d10
 8003b28:	08005d14 	.word	0x08005d14

08003b2c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d905      	bls.n	8003b5c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	e007      	b.n	8003b6c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	1acb      	subs	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bf28      	it	cs
 8003b7a:	4613      	movcs	r3, r2
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	bf28      	it	cs
 8003b86:	4613      	movcs	r3, r2
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6978      	ldr	r0, [r7, #20]
 8003b9a:	f002 f801 	bl	8005ba0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	4413      	add	r3, r2
 8003ba4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	4413      	add	r3, r2
 8003bac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	4413      	add	r3, r2
 8003bbc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d101      	bne.n	8003bcc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003bcc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1b2      	bne.n	8003b42 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d911      	bls.n	8003c2e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	6938      	ldr	r0, [r7, #16]
 8003c1a:	f001 ffc1 	bl	8005ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c1e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	441a      	add	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003c2c:	e01f      	b.n	8003c6e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	6938      	ldr	r0, [r7, #16]
 8003c42:	f001 ffad 	bl	8005ba0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6938      	ldr	r0, [r7, #16]
 8003c60:	f001 ff9e 	bl	8005ba0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c64:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	60da      	str	r2, [r3, #12]
}
 8003c6e:	bf00      	nop
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d808      	bhi.n	8003ca4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad2      	subs	r2, r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e004      	b.n	8003cae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cae:	697b      	ldr	r3, [r7, #20]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08c      	sub	sp, #48	; 0x30
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003cc8:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003cd6:	f7ff fed1 	bl	8003a7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4a37      	ldr	r2, [pc, #220]	; (8003dc4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003ce8:	4413      	add	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d92b      	bls.n	8003d60 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4293      	cmp	r3, r2
 8003d18:	bf28      	it	cs
 8003d1a:	4613      	movcs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	4413      	add	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	6939      	ldr	r1, [r7, #16]
 8003d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d2e:	f001 ff37 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	4413      	add	r3, r2
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	4413      	add	r3, r2
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d101      	bne.n	8003d60 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bf28      	it	cs
 8003d70:	4613      	movcs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	4413      	add	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	6939      	ldr	r1, [r7, #16]
 8003d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d8a:	f001 ff09 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4413      	add	r3, r2
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	4413      	add	r3, r2
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3730      	adds	r7, #48	; 0x30
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2001a780 	.word	0x2001a780

08003dc8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <SEGGER_RTT_ReadNoLock+0x1e>
 8003de2:	f7ff fe4b 	bl	8003a7c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3360      	adds	r3, #96	; 0x60
 8003df2:	4a37      	ldr	r2, [pc, #220]	; (8003ed0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003df4:	4413      	add	r3, r2
 8003df6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d92b      	bls.n	8003e6c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	bf28      	it	cs
 8003e26:	4613      	movcs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	4413      	add	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e3a:	f001 feb1 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d101      	bne.n	8003e6c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf28      	it	cs
 8003e7c:	4613      	movcs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d019      	beq.n	8003eba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	4413      	add	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	6939      	ldr	r1, [r7, #16]
 8003e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e96:	f001 fe83 	bl	8005ba0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3730      	adds	r7, #48	; 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2001a780 	.word	0x2001a780

08003ed4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d029      	beq.n	8003f52 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d82e      	bhi.n	8003f60 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d013      	beq.n	8003f32 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f0a:	e029      	b.n	8003f60 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f0c:	6978      	ldr	r0, [r7, #20]
 8003f0e:	f7ff feb2 	bl	8003c76 <_GetAvailWriteSpace>
 8003f12:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d202      	bcs.n	8003f22 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f20:	e021      	b.n	8003f66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff fe5b 	bl	8003be6 <_WriteNoCheck>
    break;
 8003f30:	e019      	b.n	8003f66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f7ff fe9f 	bl	8003c76 <_GetAvailWriteSpace>
 8003f38:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bf28      	it	cs
 8003f42:	4613      	movcs	r3, r2
 8003f44:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff fe4b 	bl	8003be6 <_WriteNoCheck>
    break;
 8003f50:	e009      	b.n	8003f66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7ff fde8 	bl	8003b2c <_WriteBlocking>
 8003f5c:	61f8      	str	r0, [r7, #28]
    break;
 8003f5e:	e002      	b.n	8003f66 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61fb      	str	r3, [r7, #28]
    break;
 8003f64:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f66:	69fb      	ldr	r3, [r7, #28]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	2001a780 	.word	0x2001a780

08003f74 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003f8e:	f7ff fd75 	bl	8003a7c <_DoInit>
  SEGGER_RTT_LOCK();
 8003f92:	f3ef 8311 	mrs	r3, BASEPRI
 8003f96:	f04f 0120 	mov.w	r1, #32
 8003f9a:	f381 8811 	msr	BASEPRI, r1
 8003f9e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff ff95 	bl	8003ed4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003faa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fb2:	697b      	ldr	r3, [r7, #20]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	2001a780 	.word	0x2001a780

08003fc0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003fce:	4b3d      	ldr	r3, [pc, #244]	; (80040c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003fdc:	f7ff fd4e 	bl	8003a7c <_DoInit>
  SEGGER_RTT_LOCK();
 8003fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe4:	f04f 0120 	mov.w	r1, #32
 8003fe8:	f381 8811 	msr	BASEPRI, r1
 8003fec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fee:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ff0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003ff6:	6939      	ldr	r1, [r7, #16]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	440b      	add	r3, r1
 8004006:	3304      	adds	r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3301      	adds	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	69fa      	ldr	r2, [r7, #28]
 800401a:	429a      	cmp	r2, r3
 800401c:	dbeb      	blt.n	8003ff6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800401e:	e000      	b.n	8004022 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004020:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	429a      	cmp	r2, r3
 800402a:	da3f      	bge.n	80040ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800402c:	6939      	ldr	r1, [r7, #16]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004040:	6939      	ldr	r1, [r7, #16]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	3304      	adds	r3, #4
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	3320      	adds	r3, #32
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	3328      	adds	r3, #40	; 0x28
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3324      	adds	r3, #36	; 0x24
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004092:	6939      	ldr	r1, [r7, #16]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	332c      	adds	r3, #44	; 0x2c
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040a6:	f3bf 8f5f 	dmb	sy
 80040aa:	e002      	b.n	80040b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040b8:	69fb      	ldr	r3, [r7, #28]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2001a780 	.word	0x2001a780

080040c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80040e4:	f7ff fcca 	bl	8003a7c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80040ea:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d24d      	bcs.n	8004194 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80040f8:	f3ef 8311 	mrs	r3, BASEPRI
 80040fc:	f04f 0120 	mov.w	r1, #32
 8004100:	f381 8811 	msr	BASEPRI, r1
 8004104:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d031      	beq.n	8004170 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	3360      	adds	r3, #96	; 0x60
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004120:	6979      	ldr	r1, [r7, #20]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	440b      	add	r3, r1
 800412e:	3364      	adds	r3, #100	; 0x64
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	3368      	adds	r3, #104	; 0x68
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	3370      	adds	r3, #112	; 0x70
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800415c:	6979      	ldr	r1, [r7, #20]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	336c      	adds	r3, #108	; 0x6c
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	3374      	adds	r3, #116	; 0x74
 8004180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004182:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004184:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e002      	b.n	800419a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800419a:	69fb      	ldr	r3, [r7, #28]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	2001a780 	.word	0x2001a780

080041a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80041b8:	e002      	b.n	80041c0 <_EncodeStr+0x18>
    Len++;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3301      	adds	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f6      	bne.n	80041ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d901      	bls.n	80041d8 <_EncodeStr+0x30>
    Len = Limit;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2bfe      	cmp	r3, #254	; 0xfe
 80041dc:	d806      	bhi.n	80041ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	60fa      	str	r2, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e011      	b.n	8004210 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	60fa      	str	r2, [r7, #12]
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	60fa      	str	r2, [r7, #12]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	0a19      	lsrs	r1, r3, #8
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	b2ca      	uxtb	r2, r1
 800420e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004214:	e00a      	b.n	800422c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	1c53      	adds	r3, r2, #1
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1c59      	adds	r1, r3, #1
 8004220:	60f9      	str	r1, [r7, #12]
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	701a      	strb	r2, [r3, #0]
    n++;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3301      	adds	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	429a      	cmp	r2, r3
 8004232:	d3f0      	bcc.n	8004216 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004262:	4b36      	ldr	r3, [pc, #216]	; (800433c <_HandleIncomingPacket+0xe0>)
 8004264:	7e1b      	ldrb	r3, [r3, #24]
 8004266:	4618      	mov	r0, r3
 8004268:	1cfb      	adds	r3, r7, #3
 800426a:	2201      	movs	r2, #1
 800426c:	4619      	mov	r1, r3
 800426e:	f7ff fdab 	bl	8003dc8 <SEGGER_RTT_ReadNoLock>
 8004272:	4603      	mov	r3, r0
 8004274:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	dd54      	ble.n	8004326 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d032      	beq.n	80042e8 <_HandleIncomingPacket+0x8c>
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	dc42      	bgt.n	800430c <_HandleIncomingPacket+0xb0>
 8004286:	2b07      	cmp	r3, #7
 8004288:	dc16      	bgt.n	80042b8 <_HandleIncomingPacket+0x5c>
 800428a:	2b00      	cmp	r3, #0
 800428c:	dd3e      	ble.n	800430c <_HandleIncomingPacket+0xb0>
 800428e:	3b01      	subs	r3, #1
 8004290:	2b06      	cmp	r3, #6
 8004292:	d83b      	bhi.n	800430c <_HandleIncomingPacket+0xb0>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <_HandleIncomingPacket+0x40>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042bf 	.word	0x080042bf
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042cb 	.word	0x080042cb
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042dd 	.word	0x080042dd
 80042b4:	080042e3 	.word	0x080042e3
 80042b8:	2b7f      	cmp	r3, #127	; 0x7f
 80042ba:	d036      	beq.n	800432a <_HandleIncomingPacket+0xce>
 80042bc:	e026      	b.n	800430c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042be:	f000 fe3d 	bl	8004f3c <SEGGER_SYSVIEW_Start>
      break;
 80042c2:	e037      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042c4:	f000 fef6 	bl	80050b4 <SEGGER_SYSVIEW_Stop>
      break;
 80042c8:	e034      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042ca:	f001 f8cf 	bl	800546c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042ce:	e031      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042d0:	f001 f894 	bl	80053fc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042d4:	e02e      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042d6:	f000 ff13 	bl	8005100 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042da:	e02b      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042dc:	f001 fb52 	bl	8005984 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80042e0:	e028      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80042e2:	f001 fb31 	bl	8005948 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042e6:	e025      	b.n	8004334 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <_HandleIncomingPacket+0xe0>)
 80042ea:	7e1b      	ldrb	r3, [r3, #24]
 80042ec:	4618      	mov	r0, r3
 80042ee:	1cfb      	adds	r3, r7, #3
 80042f0:	2201      	movs	r2, #1
 80042f2:	4619      	mov	r1, r3
 80042f4:	f7ff fd68 	bl	8003dc8 <SEGGER_RTT_ReadNoLock>
 80042f8:	4603      	mov	r3, r0
 80042fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dd15      	ble.n	800432e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	4618      	mov	r0, r3
 8004306:	f001 fa9f 	bl	8005848 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800430a:	e010      	b.n	800432e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	b25b      	sxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	da0e      	bge.n	8004332 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <_HandleIncomingPacket+0xe0>)
 8004316:	7e1b      	ldrb	r3, [r3, #24]
 8004318:	4618      	mov	r0, r3
 800431a:	1cfb      	adds	r3, r7, #3
 800431c:	2201      	movs	r2, #1
 800431e:	4619      	mov	r1, r3
 8004320:	f7ff fd52 	bl	8003dc8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004324:	e005      	b.n	8004332 <_HandleIncomingPacket+0xd6>
    }
  }
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <_HandleIncomingPacket+0xd8>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <_HandleIncomingPacket+0xd8>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <_HandleIncomingPacket+0xd8>
      break;
 8004332:	bf00      	nop
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	2001a628 	.word	0x2001a628

08004340 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004346:	2301      	movs	r3, #1
 8004348:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004354:	4b32      	ldr	r3, [pc, #200]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
 800435a:	e00b      	b.n	8004374 <_TrySendOverflowPacket+0x34>
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	b2da      	uxtb	r2, r3
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	1c59      	adds	r1, r3, #1
 8004364:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	09db      	lsrs	r3, r3, #7
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	2b7f      	cmp	r3, #127	; 0x7f
 8004378:	d8f0      	bhi.n	800435c <_TrySendOverflowPacket+0x1c>
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <_TrySendOverflowPacket+0xe4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004390:	4b23      	ldr	r3, [pc, #140]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	e00b      	b.n	80043bc <_TrySendOverflowPacket+0x7c>
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	6279      	str	r1, [r7, #36]	; 0x24
 80043ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	09db      	lsrs	r3, r3, #7
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	2b7f      	cmp	r3, #127	; 0x7f
 80043c0:	d8f0      	bhi.n	80043a4 <_TrySendOverflowPacket+0x64>
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	627a      	str	r2, [r7, #36]	; 0x24
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	4618      	mov	r0, r3
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7fb fef4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043e8:	4603      	mov	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80043ec:	f7ff fabc 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e004      	b.n	8004414 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	3301      	adds	r3, #1
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <_TrySendOverflowPacket+0xe0>)
 8004412:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004414:	693b      	ldr	r3, [r7, #16]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3730      	adds	r7, #48	; 0x30
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2001a628 	.word	0x2001a628
 8004424:	e0001004 	.word	0xe0001004

08004428 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004434:	4b6d      	ldr	r3, [pc, #436]	; (80045ec <_SendPacket+0x1c4>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d010      	beq.n	800445e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800443c:	4b6b      	ldr	r3, [pc, #428]	; (80045ec <_SendPacket+0x1c4>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80a5 	beq.w	8004590 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004446:	4b69      	ldr	r3, [pc, #420]	; (80045ec <_SendPacket+0x1c4>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d109      	bne.n	8004462 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800444e:	f7ff ff77 	bl	8004340 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004452:	4b66      	ldr	r3, [pc, #408]	; (80045ec <_SendPacket+0x1c4>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 809c 	bne.w	8004594 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800445c:	e001      	b.n	8004462 <_SendPacket+0x3a>
    goto Send;
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <_SendPacket+0x3c>
Send:
 8004462:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b1f      	cmp	r3, #31
 8004468:	d809      	bhi.n	800447e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800446a:	4b60      	ldr	r3, [pc, #384]	; (80045ec <_SendPacket+0x1c4>)
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	fa22 f303 	lsr.w	r3, r2, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 808d 	bne.w	8004598 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b17      	cmp	r3, #23
 8004482:	d807      	bhi.n	8004494 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b01      	subs	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	e03d      	b.n	8004510 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b7f      	cmp	r3, #127	; 0x7f
 80044a0:	d912      	bls.n	80044c8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	09da      	lsrs	r2, r3, #7
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	3a01      	subs	r2, #1
 80044ba:	60fa      	str	r2, [r7, #12]
 80044bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e006      	b.n	80044d6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b7f      	cmp	r3, #127	; 0x7f
 80044da:	d912      	bls.n	8004502 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	09da      	lsrs	r2, r3, #7
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	3a01      	subs	r2, #1
 80044f4:	60fa      	str	r2, [r7, #12]
 80044f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e006      	b.n	8004510 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b01      	subs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004510:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <_SendPacket+0x1c8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004516:	4b35      	ldr	r3, [pc, #212]	; (80045ec <_SendPacket+0x1c4>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	e00b      	b.n	8004542 <_SendPacket+0x11a>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	6279      	str	r1, [r7, #36]	; 0x24
 8004534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	09db      	lsrs	r3, r3, #7
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2b7f      	cmp	r3, #127	; 0x7f
 8004546:	d8f0      	bhi.n	800452a <_SendPacket+0x102>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	627a      	str	r2, [r7, #36]	; 0x24
 800454e:	6a3a      	ldr	r2, [r7, #32]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <_SendPacket+0x1c4>)
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	4618      	mov	r0, r3
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	461a      	mov	r2, r3
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f7fb fe32 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800456c:	4603      	mov	r3, r0
 800456e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004570:	f7ff f9fa 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <_SendPacket+0x1c4>)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	60d3      	str	r3, [r2, #12]
 8004580:	e00b      	b.n	800459a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <_SendPacket+0x1c4>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <_SendPacket+0x1c4>)
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e004      	b.n	800459a <_SendPacket+0x172>
    goto SendDone;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <_SendPacket+0x172>
      goto SendDone;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <_SendPacket+0x172>
      goto SendDone;
 8004598:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <_SendPacket+0x1c4>)
 800459c:	7e1b      	ldrb	r3, [r3, #24]
 800459e:	4619      	mov	r1, r3
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <_SendPacket+0x1cc>)
 80045a2:	460b      	mov	r3, r1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	440b      	add	r3, r1
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	336c      	adds	r3, #108	; 0x6c
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <_SendPacket+0x1c4>)
 80045b2:	7e1b      	ldrb	r3, [r3, #24]
 80045b4:	4618      	mov	r0, r3
 80045b6:	490f      	ldr	r1, [pc, #60]	; (80045f4 <_SendPacket+0x1cc>)
 80045b8:	4603      	mov	r3, r0
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4403      	add	r3, r0
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	3370      	adds	r3, #112	; 0x70
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d00b      	beq.n	80045e2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <_SendPacket+0x1c4>)
 80045cc:	789b      	ldrb	r3, [r3, #2]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d107      	bne.n	80045e2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <_SendPacket+0x1c4>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80045d8:	f7ff fe40 	bl	800425c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <_SendPacket+0x1c4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80045e2:	bf00      	nop
 80045e4:	3728      	adds	r7, #40	; 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2001a628 	.word	0x2001a628
 80045f0:	e0001004 	.word	0xe0001004
 80045f4:	2001a780 	.word	0x2001a780

080045f8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	3301      	adds	r3, #1
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d80a      	bhi.n	8004628 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6051      	str	r1, [r2, #4]
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d15a      	bne.n	80046e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	e00b      	b.n	800466a <_StoreChar+0x72>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	6279      	str	r1, [r7, #36]	; 0x24
 800465c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	09db      	lsrs	r3, r3, #7
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	2b7f      	cmp	r3, #127	; 0x7f
 800466e:	d8f0      	bhi.n	8004652 <_StoreChar+0x5a>
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	627a      	str	r2, [r7, #36]	; 0x24
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
 8004688:	e00b      	b.n	80046a2 <_StoreChar+0xaa>
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	1c59      	adds	r1, r3, #1
 8004692:	61f9      	str	r1, [r7, #28]
 8004694:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b7f      	cmp	r3, #127	; 0x7f
 80046a6:	d8f0      	bhi.n	800468a <_StoreChar+0x92>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	61fa      	str	r2, [r7, #28]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	221a      	movs	r2, #26
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff feb1 	bl	8004428 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fdb9 	bl	8004242 <_PreparePacket>
 80046d0:	4602      	mov	r2, r0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
  }
}
 80046e6:	bf00      	nop
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004702:	2301      	movs	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004706:	2301      	movs	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800470a:	e007      	b.n	800471c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	623b      	str	r3, [r7, #32]
    Width++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d2f3      	bcs.n	800470c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d901      	bls.n	8004730 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11f      	bne.n	800477a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <_PrintUnsigned+0x66>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <_PrintUnsigned+0x66>
        c = '0';
 8004750:	2330      	movs	r3, #48	; 0x30
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e001      	b.n	800475a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004756:	2320      	movs	r3, #32
 8004758:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800475a:	e007      	b.n	800476c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	3b01      	subs	r3, #1
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004762:	7efb      	ldrb	r3, [r7, #27]
 8004764:	4619      	mov	r1, r3
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ff46 	bl	80045f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <_PrintUnsigned+0x8a>
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	429a      	cmp	r2, r3
 8004778:	d3f0      	bcc.n	800475c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d903      	bls.n	8004788 <_PrintUnsigned+0x98>
      NumDigits--;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	e009      	b.n	800479c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d200      	bcs.n	800479c <_PrintUnsigned+0xac>
        break;
 800479a:	e005      	b.n	80047a8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80047a6:	e7e8      	b.n	800477a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <_PrintUnsigned+0x128>)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff ff14 	bl	80045f8 <_StoreChar>
    Digit /= Base;
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e3      	bne.n	80047a8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d011      	beq.n	800480e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00e      	beq.n	800480e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047f0:	e006      	b.n	8004800 <_PrintUnsigned+0x110>
        FieldWidth--;
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	3b01      	subs	r3, #1
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80047f8:	2120      	movs	r1, #32
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fefc 	bl	80045f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <_PrintUnsigned+0x11e>
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	429a      	cmp	r2, r3
 800480c:	d3f1      	bcc.n	80047f2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800480e:	bf00      	nop
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	08005d54 	.word	0x08005d54

0800481c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfb8      	it	lt
 8004830:	425b      	neglt	r3, r3
 8004832:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004838:	e007      	b.n	800484a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004842:	613b      	str	r3, [r7, #16]
    Width++;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	daf3      	bge.n	800483a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	429a      	cmp	r2, r3
 8004858:	d901      	bls.n	800485e <_PrintInt+0x42>
    Width = NumDigits;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <_PrintInt+0x5e>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db04      	blt.n	8004874 <_PrintInt+0x58>
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <_PrintInt+0x5e>
    FieldWidth--;
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	3b01      	subs	r3, #1
 8004878:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <_PrintInt+0x6e>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <_PrintInt+0x9c>
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d111      	bne.n	80048b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800489a:	e006      	b.n	80048aa <_PrintInt+0x8e>
        FieldWidth--;
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	3b01      	subs	r3, #1
 80048a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80048a2:	2120      	movs	r1, #32
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fea7 	bl	80045f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <_PrintInt+0x9c>
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3f1      	bcc.n	800489c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da07      	bge.n	80048ce <_PrintInt+0xb2>
    v = -v;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	425b      	negs	r3, r3
 80048c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80048c4:	212d      	movs	r1, #45	; 0x2d
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fe96 	bl	80045f8 <_StoreChar>
 80048cc:	e008      	b.n	80048e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80048d8:	212b      	movs	r1, #43	; 0x2b
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff fe8c 	bl	80045f8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d019      	beq.n	800491e <_PrintInt+0x102>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d114      	bne.n	800491e <_PrintInt+0x102>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d111      	bne.n	800491e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004900:	e006      	b.n	8004910 <_PrintInt+0xf4>
        FieldWidth--;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	3b01      	subs	r3, #1
 8004906:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004908:	2130      	movs	r1, #48	; 0x30
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fe74 	bl	80045f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <_PrintInt+0x102>
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	429a      	cmp	r2, r3
 800491c:	d3f1      	bcc.n	8004902 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	9301      	str	r3, [sp, #4]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff fedf 	bl	80046f0 <_PrintUnsigned>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b098      	sub	sp, #96	; 0x60
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004948:	f3ef 8311 	mrs	r3, BASEPRI
 800494c:	f04f 0120 	mov.w	r1, #32
 8004950:	f381 8811 	msr	BASEPRI, r1
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
 8004956:	48b7      	ldr	r0, [pc, #732]	; (8004c34 <_VPrintTarget+0x2f8>)
 8004958:	f7ff fc73 	bl	8004242 <_PreparePacket>
 800495c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800495e:	4bb5      	ldr	r3, [pc, #724]	; (8004c34 <_VPrintTarget+0x2f8>)
 8004960:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004962:	2300      	movs	r3, #0
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004982:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8183 	beq.w	8004c92 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800498c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004990:	2b25      	cmp	r3, #37	; 0x25
 8004992:	f040 8170 	bne.w	8004c76 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004996:	2300      	movs	r3, #0
 8004998:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80049a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049aa:	3b23      	subs	r3, #35	; 0x23
 80049ac:	2b0d      	cmp	r3, #13
 80049ae:	d83f      	bhi.n	8004a30 <_VPrintTarget+0xf4>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <_VPrintTarget+0x7c>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	08004a31 	.word	0x08004a31
 80049c0:	08004a31 	.word	0x08004a31
 80049c4:	08004a31 	.word	0x08004a31
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004a31 	.word	0x08004a31
 80049d4:	08004a31 	.word	0x08004a31
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	08004a31 	.word	0x08004a31
 80049e8:	08004a31 	.word	0x08004a31
 80049ec:	08004a01 	.word	0x08004a01
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80049f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e01a      	b.n	8004a36 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e012      	b.n	8004a36 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e00a      	b.n	8004a36 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a22:	f043 0308 	orr.w	r3, r3, #8
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e002      	b.n	8004a36 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004a30:	2300      	movs	r3, #0
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	bf00      	nop
        }
      } while (v);
 8004a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1b0      	bne.n	800499e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a4c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a4e:	d912      	bls.n	8004a76 <_VPrintTarget+0x13a>
 8004a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a54:	2b39      	cmp	r3, #57	; 0x39
 8004a56:	d80e      	bhi.n	8004a76 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b30      	subs	r3, #48	; 0x30
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004a74:	e7e4      	b.n	8004a40 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004a76:	2300      	movs	r3, #0
 8004a78:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004a82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a86:	2b2e      	cmp	r3, #46	; 0x2e
 8004a88:	d11d      	bne.n	8004ac6 <_VPrintTarget+0x18a>
        sFormat++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a9c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a9e:	d912      	bls.n	8004ac6 <_VPrintTarget+0x18a>
 8004aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa4:	2b39      	cmp	r3, #57	; 0x39
 8004aa6:	d80e      	bhi.n	8004ac6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b30      	subs	r3, #48	; 0x30
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004ac4:	e7e4      	b.n	8004a90 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004ace:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ad2:	2b6c      	cmp	r3, #108	; 0x6c
 8004ad4:	d003      	beq.n	8004ade <_VPrintTarget+0x1a2>
 8004ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ada:	2b68      	cmp	r3, #104	; 0x68
 8004adc:	d107      	bne.n	8004aee <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004aec:	e7ef      	b.n	8004ace <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004af2:	2b25      	cmp	r3, #37	; 0x25
 8004af4:	f000 80b3 	beq.w	8004c5e <_VPrintTarget+0x322>
 8004af8:	2b25      	cmp	r3, #37	; 0x25
 8004afa:	f2c0 80b7 	blt.w	8004c6c <_VPrintTarget+0x330>
 8004afe:	2b78      	cmp	r3, #120	; 0x78
 8004b00:	f300 80b4 	bgt.w	8004c6c <_VPrintTarget+0x330>
 8004b04:	2b58      	cmp	r3, #88	; 0x58
 8004b06:	f2c0 80b1 	blt.w	8004c6c <_VPrintTarget+0x330>
 8004b0a:	3b58      	subs	r3, #88	; 0x58
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	f200 80ad 	bhi.w	8004c6c <_VPrintTarget+0x330>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <_VPrintTarget+0x1dc>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004c0f 	.word	0x08004c0f
 8004b1c:	08004c6d 	.word	0x08004c6d
 8004b20:	08004c6d 	.word	0x08004c6d
 8004b24:	08004c6d 	.word	0x08004c6d
 8004b28:	08004c6d 	.word	0x08004c6d
 8004b2c:	08004c6d 	.word	0x08004c6d
 8004b30:	08004c6d 	.word	0x08004c6d
 8004b34:	08004c6d 	.word	0x08004c6d
 8004b38:	08004c6d 	.word	0x08004c6d
 8004b3c:	08004c6d 	.word	0x08004c6d
 8004b40:	08004c6d 	.word	0x08004c6d
 8004b44:	08004b9d 	.word	0x08004b9d
 8004b48:	08004bc3 	.word	0x08004bc3
 8004b4c:	08004c6d 	.word	0x08004c6d
 8004b50:	08004c6d 	.word	0x08004c6d
 8004b54:	08004c6d 	.word	0x08004c6d
 8004b58:	08004c6d 	.word	0x08004c6d
 8004b5c:	08004c6d 	.word	0x08004c6d
 8004b60:	08004c6d 	.word	0x08004c6d
 8004b64:	08004c6d 	.word	0x08004c6d
 8004b68:	08004c6d 	.word	0x08004c6d
 8004b6c:	08004c6d 	.word	0x08004c6d
 8004b70:	08004c6d 	.word	0x08004c6d
 8004b74:	08004c6d 	.word	0x08004c6d
 8004b78:	08004c39 	.word	0x08004c39
 8004b7c:	08004c6d 	.word	0x08004c6d
 8004b80:	08004c6d 	.word	0x08004c6d
 8004b84:	08004c6d 	.word	0x08004c6d
 8004b88:	08004c6d 	.word	0x08004c6d
 8004b8c:	08004be9 	.word	0x08004be9
 8004b90:	08004c6d 	.word	0x08004c6d
 8004b94:	08004c6d 	.word	0x08004c6d
 8004b98:	08004c0f 	.word	0x08004c0f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	1d19      	adds	r1, r3, #4
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6011      	str	r1, [r2, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004bb0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fd1c 	bl	80045f8 <_StoreChar>
        break;
 8004bc0:	e055      	b.n	8004c6e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1d19      	adds	r1, r3, #4
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6011      	str	r1, [r2, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004bd0:	f107 0014 	add.w	r0, r7, #20
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	220a      	movs	r2, #10
 8004be0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004be2:	f7ff fe1b 	bl	800481c <_PrintInt>
        break;
 8004be6:	e042      	b.n	8004c6e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004bf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004bf8:	f107 0014 	add.w	r0, r7, #20
 8004bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c06:	220a      	movs	r2, #10
 8004c08:	f7ff fd72 	bl	80046f0 <_PrintUnsigned>
        break;
 8004c0c:	e02f      	b.n	8004c6e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1d19      	adds	r1, r3, #4
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6011      	str	r1, [r2, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004c1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c1e:	f107 0014 	add.w	r0, r7, #20
 8004c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	f7ff fd5f 	bl	80046f0 <_PrintUnsigned>
        break;
 8004c32:	e01c      	b.n	8004c6e <_VPrintTarget+0x332>
 8004c34:	2001a658 	.word	0x2001a658
      case 'p':
        v = va_arg(*pParamList, int);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004c46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c48:	f107 0014 	add.w	r0, r7, #20
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	2308      	movs	r3, #8
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2308      	movs	r3, #8
 8004c56:	2210      	movs	r2, #16
 8004c58:	f7ff fd4a 	bl	80046f0 <_PrintUnsigned>
        break;
 8004c5c:	e007      	b.n	8004c6e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	2125      	movs	r1, #37	; 0x25
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fcc7 	bl	80045f8 <_StoreChar>
        break;
 8004c6a:	e000      	b.n	8004c6e <_VPrintTarget+0x332>
      default:
        break;
 8004c6c:	bf00      	nop
      }
      sFormat++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	e007      	b.n	8004c86 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004c76:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004c7a:	f107 0314 	add.w	r3, r7, #20
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fcb9 	bl	80045f8 <_StoreChar>
    }
  } while (*sFormat);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f47f ae72 	bne.w	8004974 <_VPrintTarget+0x38>
 8004c90:	e000      	b.n	8004c94 <_VPrintTarget+0x358>
      break;
 8004c92:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d041      	beq.n	8004d1e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004caa:	e00b      	b.n	8004cc4 <_VPrintTarget+0x388>
 8004cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	6439      	str	r1, [r7, #64]	; 0x40
 8004cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc0:	09db      	lsrs	r3, r3, #7
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc8:	d8f0      	bhi.n	8004cac <_VPrintTarget+0x370>
 8004cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	e00b      	b.n	8004cfc <_VPrintTarget+0x3c0>
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	09db      	lsrs	r3, r3, #7
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004d00:	d8f0      	bhi.n	8004ce4 <_VPrintTarget+0x3a8>
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	221a      	movs	r2, #26
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fb85 	bl	8004428 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004d24:	bf00      	nop
 8004d26:	3758      	adds	r7, #88	; 0x58
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d40:	4917      	ldr	r1, [pc, #92]	; (8004da0 <SEGGER_SYSVIEW_Init+0x74>)
 8004d42:	4818      	ldr	r0, [pc, #96]	; (8004da4 <SEGGER_SYSVIEW_Init+0x78>)
 8004d44:	f7ff f93c 	bl	8003fc0 <SEGGER_RTT_AllocUpBuffer>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d4e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004d50:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d52:	785a      	ldrb	r2, [r3, #1]
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d56:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004d58:	4b13      	ldr	r3, [pc, #76]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d5a:	7e1b      	ldrb	r3, [r3, #24]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	2308      	movs	r3, #8
 8004d64:	4a11      	ldr	r2, [pc, #68]	; (8004dac <SEGGER_SYSVIEW_Init+0x80>)
 8004d66:	490f      	ldr	r1, [pc, #60]	; (8004da4 <SEGGER_SYSVIEW_Init+0x78>)
 8004d68:	f7ff f9ae 	bl	80040c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <SEGGER_SYSVIEW_Init+0x84>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d78:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004d7a:	4a0b      	ldr	r2, [pc, #44]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004d80:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004d8c:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20019620 	.word	0x20019620
 8004da4:	08005d1c 	.word	0x08005d1c
 8004da8:	2001a628 	.word	0x2001a628
 8004dac:	2001a620 	.word	0x2001a620
 8004db0:	e0001004 	.word	0xe0001004

08004db4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6113      	str	r3, [r2, #16]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2001a628 	.word	0x2001a628

08004dd4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ddc:	f3ef 8311 	mrs	r3, BASEPRI
 8004de0:	f04f 0120 	mov.w	r1, #32
 8004de4:	f381 8811 	msr	BASEPRI, r1
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4808      	ldr	r0, [pc, #32]	; (8004e0c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004dec:	f7ff fa29 	bl	8004242 <_PreparePacket>
 8004df0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	68b8      	ldr	r0, [r7, #8]
 8004df8:	f7ff fb16 	bl	8004428 <_SendPacket>
  RECORD_END();
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f383 8811 	msr	BASEPRI, r3
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2001a658 	.word	0x2001a658

08004e10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1e:	f04f 0120 	mov.w	r1, #32
 8004e22:	f381 8811 	msr	BASEPRI, r1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	4816      	ldr	r0, [pc, #88]	; (8004e84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004e2a:	f7ff fa0a 	bl	8004242 <_PreparePacket>
 8004e2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e00b      	b.n	8004e56 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	61f9      	str	r1, [r7, #28]
 8004e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	09db      	lsrs	r3, r3, #7
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5a:	d8f0      	bhi.n	8004e3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	61fa      	str	r2, [r7, #28]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f7ff fad9 	bl	8004428 <_SendPacket>
  RECORD_END();
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f383 8811 	msr	BASEPRI, r3
}
 8004e7c:	bf00      	nop
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	2001a658 	.word	0x2001a658

08004e88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08c      	sub	sp, #48	; 0x30
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e94:	f3ef 8311 	mrs	r3, BASEPRI
 8004e98:	f04f 0120 	mov.w	r1, #32
 8004e9c:	f381 8811 	msr	BASEPRI, r1
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	4825      	ldr	r0, [pc, #148]	; (8004f38 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ea4:	f7ff f9cd 	bl	8004242 <_PreparePacket>
 8004ea8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb6:	e00b      	b.n	8004ed0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	1c59      	adds	r1, r3, #1
 8004ec0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ec2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	09db      	lsrs	r3, r3, #7
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed4:	d8f0      	bhi.n	8004eb8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	e00b      	b.n	8004f08 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1c59      	adds	r1, r3, #1
 8004ef8:	6279      	str	r1, [r7, #36]	; 0x24
 8004efa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	09db      	lsrs	r3, r3, #7
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f0c:	d8f0      	bhi.n	8004ef0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	627a      	str	r2, [r7, #36]	; 0x24
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	6979      	ldr	r1, [r7, #20]
 8004f22:	69b8      	ldr	r0, [r7, #24]
 8004f24:	f7ff fa80 	bl	8004428 <_SendPacket>
  RECORD_END();
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
 8004f30:	3730      	adds	r7, #48	; 0x30
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	2001a658 	.word	0x2001a658

08004f3c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f48:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4c:	f04f 0120 	mov.w	r1, #32
 8004f50:	f381 8811 	msr	BASEPRI, r1
 8004f54:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f56:	4b54      	ldr	r3, [pc, #336]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	4953      	ldr	r1, [pc, #332]	; (80050ac <SEGGER_SYSVIEW_Start+0x170>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fb f936 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f6a:	f7fe fcfd 	bl	8003968 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f6e:	200a      	movs	r0, #10
 8004f70:	f7ff ff30 	bl	8004dd4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f74:	f3ef 8311 	mrs	r3, BASEPRI
 8004f78:	f04f 0120 	mov.w	r1, #32
 8004f7c:	f381 8811 	msr	BASEPRI, r1
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	484b      	ldr	r0, [pc, #300]	; (80050b0 <SEGGER_SYSVIEW_Start+0x174>)
 8004f84:	f7ff f95d 	bl	8004242 <_PreparePacket>
 8004f88:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	4b45      	ldr	r3, [pc, #276]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f98:	e00b      	b.n	8004fb2 <SEGGER_SYSVIEW_Start+0x76>
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	1c59      	adds	r1, r3, #1
 8004fa2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	09db      	lsrs	r3, r3, #7
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb6:	d8f0      	bhi.n	8004f9a <SEGGER_SYSVIEW_Start+0x5e>
 8004fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
 8004fcc:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_Start+0xb0>
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	6279      	str	r1, [r7, #36]	; 0x24
 8004fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_Start+0x98>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e00b      	b.n	8005026 <SEGGER_SYSVIEW_Start+0xea>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	61f9      	str	r1, [r7, #28]
 8005018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	09db      	lsrs	r3, r3, #7
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d8f0      	bhi.n	800500e <SEGGER_SYSVIEW_Start+0xd2>
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	61fa      	str	r2, [r7, #28]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_Start+0x122>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	6179      	str	r1, [r7, #20]
 8005050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b7f      	cmp	r3, #127	; 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_Start+0x10a>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	617a      	str	r2, [r7, #20]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005074:	2218      	movs	r2, #24
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff f9d5 	bl	8004428 <_SendPacket>
      RECORD_END();
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SEGGER_SYSVIEW_Start+0x16c>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005092:	f000 f9eb 	bl	800546c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005096:	f000 f9b1 	bl	80053fc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800509a:	f000 fc73 	bl	8005984 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800509e:	bf00      	nop
 80050a0:	3730      	adds	r7, #48	; 0x30
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2001a628 	.word	0x2001a628
 80050ac:	08005d48 	.word	0x08005d48
 80050b0:	2001a658 	.word	0x2001a658

080050b4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050ba:	f3ef 8311 	mrs	r3, BASEPRI
 80050be:	f04f 0120 	mov.w	r1, #32
 80050c2:	f381 8811 	msr	BASEPRI, r1
 80050c6:	607b      	str	r3, [r7, #4]
 80050c8:	480b      	ldr	r0, [pc, #44]	; (80050f8 <SEGGER_SYSVIEW_Stop+0x44>)
 80050ca:	f7ff f8ba 	bl	8004242 <_PreparePacket>
 80050ce:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <SEGGER_SYSVIEW_Stop+0x48>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80050d8:	220b      	movs	r2, #11
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f7ff f9a3 	bl	8004428 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <SEGGER_SYSVIEW_Stop+0x48>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	2001a658 	.word	0x2001a658
 80050fc:	2001a628 	.word	0x2001a628

08005100 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08c      	sub	sp, #48	; 0x30
 8005104:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005106:	f3ef 8311 	mrs	r3, BASEPRI
 800510a:	f04f 0120 	mov.w	r1, #32
 800510e:	f381 8811 	msr	BASEPRI, r1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	4845      	ldr	r0, [pc, #276]	; (800522c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005116:	f7ff f894 	bl	8004242 <_PreparePacket>
 800511a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	62bb      	str	r3, [r7, #40]	; 0x28
 800512a:	e00b      	b.n	8005144 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005136:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	09db      	lsrs	r3, r3, #7
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b7f      	cmp	r3, #127	; 0x7f
 8005148:	d8f0      	bhi.n	800512c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
 800515e:	4b34      	ldr	r3, [pc, #208]	; (8005230 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	e00b      	b.n	800517e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	b2da      	uxtb	r2, r3
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	1c59      	adds	r1, r3, #1
 800516e:	6279      	str	r1, [r7, #36]	; 0x24
 8005170:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	09db      	lsrs	r3, r3, #7
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	2b7f      	cmp	r3, #127	; 0x7f
 8005182:	d8f0      	bhi.n	8005166 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	627a      	str	r2, [r7, #36]	; 0x24
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	4b25      	ldr	r3, [pc, #148]	; (8005230 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e00b      	b.n	80051b8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	61f9      	str	r1, [r7, #28]
 80051aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b7f      	cmp	r3, #127	; 0x7f
 80051bc:	d8f0      	bhi.n	80051a0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	61fa      	str	r2, [r7, #28]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	e00b      	b.n	80051f0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	6179      	str	r1, [r7, #20]
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	617a      	str	r2, [r7, #20]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005206:	2218      	movs	r2, #24
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	68b8      	ldr	r0, [r7, #8]
 800520c:	f7ff f90c 	bl	8004428 <_SendPacket>
  RECORD_END();
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	4798      	blx	r3
  }
}
 8005224:	bf00      	nop
 8005226:	3730      	adds	r7, #48	; 0x30
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	2001a658 	.word	0x2001a658
 8005230:	2001a628 	.word	0x2001a628

08005234 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b092      	sub	sp, #72	; 0x48
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800523c:	f3ef 8311 	mrs	r3, BASEPRI
 8005240:	f04f 0120 	mov.w	r1, #32
 8005244:	f381 8811 	msr	BASEPRI, r1
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	486a      	ldr	r0, [pc, #424]	; (80053f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800524c:	f7fe fff9 	bl	8004242 <_PreparePacket>
 8005250:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b66      	ldr	r3, [pc, #408]	; (80053f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	643b      	str	r3, [r7, #64]	; 0x40
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526a:	b2da      	uxtb	r2, r3
 800526c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	6479      	str	r1, [r7, #68]	; 0x44
 8005272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	643b      	str	r3, [r7, #64]	; 0x40
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	2b7f      	cmp	r3, #127	; 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	647a      	str	r2, [r7, #68]	; 0x44
 800528c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005294:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a0:	e00b      	b.n	80052ba <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	09db      	lsrs	r3, r3, #7
 80052b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b7f      	cmp	r3, #127	; 0x7f
 80052be:	d8f0      	bhi.n	80052a2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ce:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7fe ff65 	bl	80041a8 <_EncodeStr>
 80052de:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80052e0:	2209      	movs	r2, #9
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	6938      	ldr	r0, [r7, #16]
 80052e6:	f7ff f89f 	bl	8004428 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b40      	ldr	r3, [pc, #256]	; (80053f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	e00b      	b.n	8005318 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	1c59      	adds	r1, r3, #1
 8005308:	6379      	str	r1, [r7, #52]	; 0x34
 800530a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	09db      	lsrs	r3, r3, #7
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d8f0      	bhi.n	8005300 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	637a      	str	r2, [r7, #52]	; 0x34
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
 8005338:	e00b      	b.n	8005352 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	b2da      	uxtb	r2, r3
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	09db      	lsrs	r3, r3, #7
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2b7f      	cmp	r3, #127	; 0x7f
 8005356:	d8f0      	bhi.n	800533a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800535e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e00b      	b.n	800538c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6279      	str	r1, [r7, #36]	; 0x24
 800537e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b7f      	cmp	r3, #127	; 0x7f
 8005390:	d8f0      	bhi.n	8005374 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	627a      	str	r2, [r7, #36]	; 0x24
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e00b      	b.n	80053c4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	61f9      	str	r1, [r7, #28]
 80053b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	09db      	lsrs	r3, r3, #7
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b7f      	cmp	r3, #127	; 0x7f
 80053c8:	d8f0      	bhi.n	80053ac <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	61fa      	str	r2, [r7, #28]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80053da:	2215      	movs	r2, #21
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f7ff f822 	bl	8004428 <_SendPacket>
  RECORD_END();
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f383 8811 	msr	BASEPRI, r3
}
 80053ea:	bf00      	nop
 80053ec:	3748      	adds	r7, #72	; 0x48
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2001a658 	.word	0x2001a658
 80053f8:	2001a628 	.word	0x2001a628

080053fc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005412:	4b03      	ldr	r3, [pc, #12]	; (8005420 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4798      	blx	r3
  }
}
 800541a:	bf00      	nop
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	2001a628 	.word	0x2001a628

08005424 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800542c:	f3ef 8311 	mrs	r3, BASEPRI
 8005430:	f04f 0120 	mov.w	r1, #32
 8005434:	f381 8811 	msr	BASEPRI, r1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	480b      	ldr	r0, [pc, #44]	; (8005468 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800543c:	f7fe ff01 	bl	8004242 <_PreparePacket>
 8005440:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	6938      	ldr	r0, [r7, #16]
 8005448:	f7fe feae 	bl	80041a8 <_EncodeStr>
 800544c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800544e:	220e      	movs	r2, #14
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	6938      	ldr	r0, [r7, #16]
 8005454:	f7fe ffe8 	bl	8004428 <_SendPacket>
  RECORD_END();
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f383 8811 	msr	BASEPRI, r3
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	2001a658 	.word	0x2001a658

0800546c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01a      	beq.n	80054b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4798      	blx	r3
 800548c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005490:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005492:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	000a      	movs	r2, r1
 80054a0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054a2:	4613      	mov	r3, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4621      	mov	r1, r4
 80054a8:	200d      	movs	r0, #13
 80054aa:	f7ff fced 	bl	8004e88 <SEGGER_SYSVIEW_RecordU32x2>
 80054ae:	e006      	b.n	80054be <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4619      	mov	r1, r3
 80054b6:	200c      	movs	r0, #12
 80054b8:	f7ff fcaa 	bl	8004e10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2001a628 	.word	0x2001a628
 80054cc:	e0001004 	.word	0xe0001004

080054d0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054d6:	f3ef 8311 	mrs	r3, BASEPRI
 80054da:	f04f 0120 	mov.w	r1, #32
 80054de:	f381 8811 	msr	BASEPRI, r1
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	4819      	ldr	r0, [pc, #100]	; (800554c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80054e6:	f7fe feac 	bl	8004242 <_PreparePacket>
 80054ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80054f0:	4b17      	ldr	r3, [pc, #92]	; (8005550 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e00b      	b.n	800551c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	1c59      	adds	r1, r3, #1
 800550c:	6179      	str	r1, [r7, #20]
 800550e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	09db      	lsrs	r3, r3, #7
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b7f      	cmp	r3, #127	; 0x7f
 8005520:	d8f0      	bhi.n	8005504 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	617a      	str	r2, [r7, #20]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005532:	2202      	movs	r2, #2
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f7fe ff76 	bl	8004428 <_SendPacket>
  RECORD_END();
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f383 8811 	msr	BASEPRI, r3
}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	2001a658 	.word	0x2001a658
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800555a:	f3ef 8311 	mrs	r3, BASEPRI
 800555e:	f04f 0120 	mov.w	r1, #32
 8005562:	f381 8811 	msr	BASEPRI, r1
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	4807      	ldr	r0, [pc, #28]	; (8005588 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800556a:	f7fe fe6a 	bl	8004242 <_PreparePacket>
 800556e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005570:	2203      	movs	r2, #3
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6838      	ldr	r0, [r7, #0]
 8005576:	f7fe ff57 	bl	8004428 <_SendPacket>
  RECORD_END();
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f383 8811 	msr	BASEPRI, r3
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	2001a658 	.word	0x2001a658

0800558c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005592:	f3ef 8311 	mrs	r3, BASEPRI
 8005596:	f04f 0120 	mov.w	r1, #32
 800559a:	f381 8811 	msr	BASEPRI, r1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	4807      	ldr	r0, [pc, #28]	; (80055c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80055a2:	f7fe fe4e 	bl	8004242 <_PreparePacket>
 80055a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80055a8:	2212      	movs	r2, #18
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6838      	ldr	r0, [r7, #0]
 80055ae:	f7fe ff3b 	bl	8004428 <_SendPacket>
  RECORD_END();
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f383 8811 	msr	BASEPRI, r3
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	2001a658 	.word	0x2001a658

080055c4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
 80055ce:	f04f 0120 	mov.w	r1, #32
 80055d2:	f381 8811 	msr	BASEPRI, r1
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	4807      	ldr	r0, [pc, #28]	; (80055f8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80055da:	f7fe fe32 	bl	8004242 <_PreparePacket>
 80055de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80055e0:	2211      	movs	r2, #17
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f7fe ff1f 	bl	8004428 <_SendPacket>
  RECORD_END();
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2001a658 	.word	0x2001a658

080055fc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005604:	f3ef 8311 	mrs	r3, BASEPRI
 8005608:	f04f 0120 	mov.w	r1, #32
 800560c:	f381 8811 	msr	BASEPRI, r1
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	4819      	ldr	r0, [pc, #100]	; (8005678 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005614:	f7fe fe15 	bl	8004242 <_PreparePacket>
 8005618:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800561e:	4b17      	ldr	r3, [pc, #92]	; (800567c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e00b      	b.n	800564a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1c59      	adds	r1, r3, #1
 800563a:	61f9      	str	r1, [r7, #28]
 800563c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	09db      	lsrs	r3, r3, #7
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b7f      	cmp	r3, #127	; 0x7f
 800564e:	d8f0      	bhi.n	8005632 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	61fa      	str	r2, [r7, #28]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005660:	2208      	movs	r2, #8
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	6938      	ldr	r0, [r7, #16]
 8005666:	f7fe fedf 	bl	8004428 <_SendPacket>
  RECORD_END();
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f383 8811 	msr	BASEPRI, r3
}
 8005670:	bf00      	nop
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2001a658 	.word	0x2001a658
 800567c:	2001a628 	.word	0x2001a628

08005680 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005688:	f3ef 8311 	mrs	r3, BASEPRI
 800568c:	f04f 0120 	mov.w	r1, #32
 8005690:	f381 8811 	msr	BASEPRI, r1
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	4819      	ldr	r0, [pc, #100]	; (80056fc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005698:	f7fe fdd3 	bl	8004242 <_PreparePacket>
 800569c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056a2:	4b17      	ldr	r3, [pc, #92]	; (8005700 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	e00b      	b.n	80056ce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1c59      	adds	r1, r3, #1
 80056be:	61f9      	str	r1, [r7, #28]
 80056c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	2b7f      	cmp	r3, #127	; 0x7f
 80056d2:	d8f0      	bhi.n	80056b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	61fa      	str	r2, [r7, #28]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80056e4:	2204      	movs	r2, #4
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	6938      	ldr	r0, [r7, #16]
 80056ea:	f7fe fe9d 	bl	8004428 <_SendPacket>
  RECORD_END();
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f383 8811 	msr	BASEPRI, r3
}
 80056f4:	bf00      	nop
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	2001a658 	.word	0x2001a658
 8005700:	2001a628 	.word	0x2001a628

08005704 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800570c:	f3ef 8311 	mrs	r3, BASEPRI
 8005710:	f04f 0120 	mov.w	r1, #32
 8005714:	f381 8811 	msr	BASEPRI, r1
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	4819      	ldr	r0, [pc, #100]	; (8005780 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800571c:	f7fe fd91 	bl	8004242 <_PreparePacket>
 8005720:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005726:	4b17      	ldr	r3, [pc, #92]	; (8005784 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	e00b      	b.n	8005752 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c59      	adds	r1, r3, #1
 8005742:	61f9      	str	r1, [r7, #28]
 8005744:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	09db      	lsrs	r3, r3, #7
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b7f      	cmp	r3, #127	; 0x7f
 8005756:	d8f0      	bhi.n	800573a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005768:	2206      	movs	r2, #6
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	6938      	ldr	r0, [r7, #16]
 800576e:	f7fe fe5b 	bl	8004428 <_SendPacket>
  RECORD_END();
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f383 8811 	msr	BASEPRI, r3
}
 8005778:	bf00      	nop
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	2001a658 	.word	0x2001a658
 8005784:	2001a628 	.word	0x2001a628

08005788 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005792:	f3ef 8311 	mrs	r3, BASEPRI
 8005796:	f04f 0120 	mov.w	r1, #32
 800579a:	f381 8811 	msr	BASEPRI, r1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	4827      	ldr	r0, [pc, #156]	; (8005840 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80057a2:	f7fe fd4e 	bl	8004242 <_PreparePacket>
 80057a6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	e00b      	b.n	80057d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1c59      	adds	r1, r3, #1
 80057c8:	6279      	str	r1, [r7, #36]	; 0x24
 80057ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	09db      	lsrs	r3, r3, #7
 80057d6:	623b      	str	r3, [r7, #32]
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b7f      	cmp	r3, #127	; 0x7f
 80057dc:	d8f0      	bhi.n	80057c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	627a      	str	r2, [r7, #36]	; 0x24
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e00b      	b.n	8005810 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	61f9      	str	r1, [r7, #28]
 8005802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	09db      	lsrs	r3, r3, #7
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b7f      	cmp	r3, #127	; 0x7f
 8005814:	d8f0      	bhi.n	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	61fa      	str	r2, [r7, #28]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005826:	2207      	movs	r2, #7
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	6938      	ldr	r0, [r7, #16]
 800582c:	f7fe fdfc 	bl	8004428 <_SendPacket>
  RECORD_END();
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f383 8811 	msr	BASEPRI, r3
}
 8005836:	bf00      	nop
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2001a658 	.word	0x2001a658
 8005844:	2001a628 	.word	0x2001a628

08005848 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b08c      	sub	sp, #48	; 0x30
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005852:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d06d      	beq.n	8005936 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005860:	2300      	movs	r3, #0
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
 8005864:	e008      	b.n	8005878 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d007      	beq.n	8005882 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	3301      	adds	r3, #1
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587c:	429a      	cmp	r2, r3
 800587e:	d3f2      	bcc.n	8005866 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005880:	e000      	b.n	8005884 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005882:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d055      	beq.n	8005936 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800588a:	f3ef 8311 	mrs	r3, BASEPRI
 800588e:	f04f 0120 	mov.w	r1, #32
 8005892:	f381 8811 	msr	BASEPRI, r1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	482a      	ldr	r0, [pc, #168]	; (8005944 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800589a:	f7fe fcd2 	bl	8004242 <_PreparePacket>
 800589e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	e00b      	b.n	80058c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	6279      	str	r1, [r7, #36]	; 0x24
 80058b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	09db      	lsrs	r3, r3, #7
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d8f0      	bhi.n	80058ae <SEGGER_SYSVIEW_SendModule+0x66>
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	627a      	str	r2, [r7, #36]	; 0x24
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e00b      	b.n	8005900 <SEGGER_SYSVIEW_SendModule+0xb8>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	1c59      	adds	r1, r3, #1
 80058f0:	61f9      	str	r1, [r7, #28]
 80058f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	09db      	lsrs	r3, r3, #7
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	2b7f      	cmp	r3, #127	; 0x7f
 8005904:	d8f0      	bhi.n	80058e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	4619      	mov	r1, r3
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7fe fc42 	bl	80041a8 <_EncodeStr>
 8005924:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005926:	2216      	movs	r2, #22
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	6938      	ldr	r0, [r7, #16]
 800592c:	f7fe fd7c 	bl	8004428 <_SendPacket>
      RECORD_END();
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005936:	bf00      	nop
 8005938:	3730      	adds	r7, #48	; 0x30
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2001a650 	.word	0x2001a650
 8005944:	2001a658 	.word	0x2001a658

08005948 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00f      	beq.n	8005976 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f2      	bne.n	800595c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	2001a650 	.word	0x2001a650

08005984 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800598a:	f3ef 8311 	mrs	r3, BASEPRI
 800598e:	f04f 0120 	mov.w	r1, #32
 8005992:	f381 8811 	msr	BASEPRI, r1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	4817      	ldr	r0, [pc, #92]	; (80059f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800599a:	f7fe fc52 	bl	8004242 <_PreparePacket>
 800599e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e00b      	b.n	80059c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1c59      	adds	r1, r3, #1
 80059b8:	6179      	str	r1, [r7, #20]
 80059ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	09db      	lsrs	r3, r3, #7
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b7f      	cmp	r3, #127	; 0x7f
 80059cc:	d8f0      	bhi.n	80059b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	617a      	str	r2, [r7, #20]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059de:	221b      	movs	r2, #27
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	68b8      	ldr	r0, [r7, #8]
 80059e4:	f7fe fd20 	bl	8004428 <_SendPacket>
  RECORD_END();
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f383 8811 	msr	BASEPRI, r3
}
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	2001a658 	.word	0x2001a658
 80059fc:	2001a654 	.word	0x2001a654

08005a00 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a00:	b40f      	push	{r0, r1, r2, r3}
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	461a      	mov	r2, r3
 8005a12:	2100      	movs	r1, #0
 8005a14:	6938      	ldr	r0, [r7, #16]
 8005a16:	f7fe ff91 	bl	800493c <_VPrintTarget>
  va_end(ParamList);
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a24:	b004      	add	sp, #16
 8005a26:	4770      	bx	lr

08005a28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a30:	f3ef 8311 	mrs	r3, BASEPRI
 8005a34:	f04f 0120 	mov.w	r1, #32
 8005a38:	f381 8811 	msr	BASEPRI, r1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	4827      	ldr	r0, [pc, #156]	; (8005adc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a40:	f7fe fbff 	bl	8004242 <_PreparePacket>
 8005a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	6938      	ldr	r0, [r7, #16]
 8005a4c:	f7fe fbac 	bl	80041a8 <_EncodeStr>
 8005a50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
 8005a56:	2301      	movs	r3, #1
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	e00b      	b.n	8005a74 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	6279      	str	r1, [r7, #36]	; 0x24
 8005a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	09db      	lsrs	r3, r3, #7
 8005a72:	623b      	str	r3, [r7, #32]
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	2b7f      	cmp	r3, #127	; 0x7f
 8005a78:	d8f0      	bhi.n	8005a5c <SEGGER_SYSVIEW_Warn+0x34>
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e00b      	b.n	8005aac <SEGGER_SYSVIEW_Warn+0x84>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	61f9      	str	r1, [r7, #28]
 8005a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	09db      	lsrs	r3, r3, #7
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d8f0      	bhi.n	8005a94 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	61fa      	str	r2, [r7, #28]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ac2:	221a      	movs	r2, #26
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	6938      	ldr	r0, [r7, #16]
 8005ac8:	f7fe fcae 	bl	8004428 <_SendPacket>
  RECORD_END();
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f383 8811 	msr	BASEPRI, r3
}
 8005ad2:	bf00      	nop
 8005ad4:	3728      	adds	r7, #40	; 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2001a658 	.word	0x2001a658

08005ae0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ae4:	4b13      	ldr	r3, [pc, #76]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005aec:	460b      	mov	r3, r1
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	440b      	add	r3, r1
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	336c      	adds	r3, #108	; 0x6c
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005afc:	7e1b      	ldrb	r3, [r3, #24]
 8005afe:	4618      	mov	r0, r3
 8005b00:	490d      	ldr	r1, [pc, #52]	; (8005b38 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b02:	4603      	mov	r3, r0
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4403      	add	r3, r0
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3370      	adds	r3, #112	; 0x70
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00b      	beq.n	8005b2c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b16:	789b      	ldrb	r3, [r3, #2]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b22:	f7fe fb9b 	bl	800425c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b26:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b2c:	4b01      	ldr	r3, [pc, #4]	; (8005b34 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2001a628 	.word	0x2001a628
 8005b38:	2001a780 	.word	0x2001a780

08005b3c <__libc_init_array>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4d0d      	ldr	r5, [pc, #52]	; (8005b74 <__libc_init_array+0x38>)
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <__libc_init_array+0x3c>)
 8005b42:	1b64      	subs	r4, r4, r5
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	2600      	movs	r6, #0
 8005b48:	42a6      	cmp	r6, r4
 8005b4a:	d109      	bne.n	8005b60 <__libc_init_array+0x24>
 8005b4c:	4d0b      	ldr	r5, [pc, #44]	; (8005b7c <__libc_init_array+0x40>)
 8005b4e:	4c0c      	ldr	r4, [pc, #48]	; (8005b80 <__libc_init_array+0x44>)
 8005b50:	f000 f83c 	bl	8005bcc <_init>
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	2600      	movs	r6, #0
 8005b5a:	42a6      	cmp	r6, r4
 8005b5c:	d105      	bne.n	8005b6a <__libc_init_array+0x2e>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b64:	4798      	blx	r3
 8005b66:	3601      	adds	r6, #1
 8005b68:	e7ee      	b.n	8005b48 <__libc_init_array+0xc>
 8005b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6e:	4798      	blx	r3
 8005b70:	3601      	adds	r6, #1
 8005b72:	e7f2      	b.n	8005b5a <__libc_init_array+0x1e>
 8005b74:	08005d6c 	.word	0x08005d6c
 8005b78:	08005d6c 	.word	0x08005d6c
 8005b7c:	08005d6c 	.word	0x08005d6c
 8005b80:	08005d70 	.word	0x08005d70

08005b84 <memcmp>:
 8005b84:	b530      	push	{r4, r5, lr}
 8005b86:	3901      	subs	r1, #1
 8005b88:	2400      	movs	r4, #0
 8005b8a:	42a2      	cmp	r2, r4
 8005b8c:	d101      	bne.n	8005b92 <memcmp+0xe>
 8005b8e:	2000      	movs	r0, #0
 8005b90:	e005      	b.n	8005b9e <memcmp+0x1a>
 8005b92:	5d03      	ldrb	r3, [r0, r4]
 8005b94:	3401      	adds	r4, #1
 8005b96:	5d0d      	ldrb	r5, [r1, r4]
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	d0f6      	beq.n	8005b8a <memcmp+0x6>
 8005b9c:	1b58      	subs	r0, r3, r5
 8005b9e:	bd30      	pop	{r4, r5, pc}

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <_init>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr

08005bd8 <_fini>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr
