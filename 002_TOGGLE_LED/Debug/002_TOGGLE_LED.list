
002_TOGGLE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005804  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b14  08005b14  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b1c  08005b1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a80c  2000001c  08005b40  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a828  08005b40  0002a828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154ef  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d43  00000000  00000000  0003553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022990  00000000  00000000  0003a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011752  00000000  00000000  0005cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4578  00000000  00000000  0006e3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  001429a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800597c 	.word	0x0800597c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800597c 	.word	0x0800597c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a780 	.word	0x2001a780

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb7b 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d5 	bl	8000718 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800056e:	482d      	ldr	r0, [pc, #180]	; (8000624 <main+0xc8>)
 8000570:	f003 f8d6 	bl	8003720 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000574:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <main+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2b      	ldr	r2, [pc, #172]	; (8000628 <main+0xcc>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000580:	f002 ff00 	bl	8003384 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2302      	movs	r3, #2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4926      	ldr	r1, [pc, #152]	; (800062c <main+0xd0>)
 8000594:	4826      	ldr	r0, [pc, #152]	; (8000630 <main+0xd4>)
 8000596:	f001 fdbc 	bl	8002112 <xTaskCreate>
 800059a:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xd8>)
 80005c8:	481b      	ldr	r0, [pc, #108]	; (8000638 <main+0xdc>)
 80005ca:	f001 fda2 	bl	8002112 <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x90>
        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	617b      	str	r3, [r7, #20]
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	4910      	ldr	r1, [pc, #64]	; (800063c <main+0xe0>)
 80005fa:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xe4>)
 80005fc:	f001 fd89 	bl	8002112 <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	613b      	str	r3, [r7, #16]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800061e:	f001 fedb 	bl	80023d8 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0xc6>
 8000624:	0007a120 	.word	0x0007a120
 8000628:	e0001000 	.word	0xe0001000
 800062c:	08005994 	.word	0x08005994
 8000630:	080009d9 	.word	0x080009d9
 8000634:	080059a4 	.word	0x080059a4
 8000638:	08000a31 	.word	0x08000a31
 800063c:	080059b4 	.word	0x080059b4
 8000640:	08000a05 	.word	0x08000a05

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 f98a 	bl	800596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fddf 	bl	800128c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f9d4 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f838 	bl	800176c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f9bd 	bl	8000a80 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	; 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4ba1      	ldr	r3, [pc, #644]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4aa0      	ldr	r2, [pc, #640]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b9e      	ldr	r3, [pc, #632]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b9a      	ldr	r3, [pc, #616]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a99      	ldr	r2, [pc, #612]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b97      	ldr	r3, [pc, #604]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b93      	ldr	r3, [pc, #588]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a92      	ldr	r2, [pc, #584]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b90      	ldr	r3, [pc, #576]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8b      	ldr	r2, [pc, #556]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b85      	ldr	r3, [pc, #532]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a84      	ldr	r2, [pc, #528]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b7e      	ldr	r3, [pc, #504]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a7d      	ldr	r2, [pc, #500]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b7b      	ldr	r3, [pc, #492]	; (80009b8 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	4878      	ldr	r0, [pc, #480]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80007dc:	f000 fd22 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2101      	movs	r1, #1
 80007e4:	4876      	ldr	r0, [pc, #472]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 80007e6:	f000 fd1d 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80007ea:	2200      	movs	r2, #0
 80007ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f0:	4874      	ldr	r0, [pc, #464]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd17 	bl	8001224 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f6:	2308      	movs	r3, #8
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	486b      	ldr	r0, [pc, #428]	; (80009bc <MX_GPIO_Init+0x2a4>)
 800080e:	f000 fb6d 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4865      	ldr	r0, [pc, #404]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800082a:	f000 fb5f 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083e:	2305      	movs	r3, #5
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	485d      	ldr	r0, [pc, #372]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800084a:	f000 fb4f 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_GPIO_Init+0x2b0>)
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	485a      	ldr	r0, [pc, #360]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000862:	f000 fb43 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000866:	2310      	movs	r3, #16
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000876:	2306      	movs	r3, #6
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4852      	ldr	r0, [pc, #328]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000882:	f000 fb33 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000886:	23e0      	movs	r3, #224	; 0xe0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	484a      	ldr	r0, [pc, #296]	; (80009cc <MX_GPIO_Init+0x2b4>)
 80008a2:	f000 fb23 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a6:	2304      	movs	r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4845      	ldr	r0, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008ba:	f000 fb17 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d0:	2305      	movs	r3, #5
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	483d      	ldr	r0, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 80008dc:	f000 fb06 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008e0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4832      	ldr	r0, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 faf7 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000910:	2306      	movs	r3, #6
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x2a8>)
 800091c:	f000 fae6 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4825      	ldr	r0, [pc, #148]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000936:	f000 fad9 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800093a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800094c:	230a      	movs	r3, #10
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	481d      	ldr	r0, [pc, #116]	; (80009cc <MX_GPIO_Init+0x2b4>)
 8000958:	f000 fac8 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800095c:	2320      	movs	r3, #32
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_GPIO_Init+0x2ac>)
 8000970:	f000 fabc 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000974:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097a:	2312      	movs	r3, #18
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	2301      	movs	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000986:	2304      	movs	r3, #4
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_GPIO_Init+0x2b8>)
 8000992:	f000 faab 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_GPIO_Init+0x2bc>)
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x2a4>)
 80009aa:	f000 fa9f 	bl	8000eec <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	10110000 	.word	0x10110000
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400
 80009d4:	10120000 	.word	0x10120000

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <led_green_handler+0x24>)
 80009e2:	f004 fee5 	bl	80057b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <led_green_handler+0x28>)
 80009ec:	f000 fc33 	bl	8001256 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f4:	f000 f974 	bl	8000ce0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f8:	e7f2      	b.n	80009e0 <led_green_handler+0x8>
 80009fa:	bf00      	nop
 80009fc:	080059c4 	.word	0x080059c4
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <led_orange_handler+0x24>)
 8000a0e:	f004 fecf 	bl	80057b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <led_orange_handler+0x28>)
 8000a18:	f000 fc1d 	bl	8001256 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a1c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a20:	f000 f95e 	bl	8000ce0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a24:	e7f2      	b.n	8000a0c <led_orange_handler+0x8>
 8000a26:	bf00      	nop
 8000a28:	080059d8 	.word	0x080059d8
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <led_red_handler+0x24>)
 8000a3a:	f004 feb9 	bl	80057b0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <led_red_handler+0x28>)
 8000a44:	f000 fc07 	bl	8001256 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a48:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a4c:	f000 f948 	bl	8000ce0 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a50:	e7f2      	b.n	8000a38 <led_red_handler+0x8>
 8000a52:	bf00      	nop
 8000a54:	080059ec 	.word	0x080059ec
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a6e:	f000 f917 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40001000 	.word	0x40001000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ace:	f002 f8a3 	bl	8002c18 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2036      	movs	r0, #54	; 0x36
 8000af6:	f000 f9cf 	bl	8000e98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000afa:	2036      	movs	r0, #54	; 0x36
 8000afc:	f000 f9e8 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f808 	bl	8001b3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b2c:	f000 fff2 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8000b30:	4603      	mov	r3, r0
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_InitTick+0xac>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_InitTick+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_InitTick+0xac>)
 8000b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_InitTick+0xac>)
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_InitTick+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_InitTick+0xac>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_InitTick+0xac>)
 8000b66:	f001 f81b 	bl	8001ba0 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_InitTick+0xac>)
 8000b72:	f001 f84a 	bl	8001c0a <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	2001a73c 	.word	0x2001a73c
 8000b90:	40001000 	.word	0x40001000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM6_DAC_IRQHandler+0x10>)
 8000bce:	f001 f840 	bl	8001c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2001a73c 	.word	0x2001a73c

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x28>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c0e:	e003      	b.n	8000c18 <LoopCopyDataInit>

08000c10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c16:	3104      	adds	r1, #4

08000c18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c20:	d3f6      	bcc.n	8000c10 <CopyDataInit>
  ldr  r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c24:	e002      	b.n	8000c2c <LoopFillZerobss>

08000c26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c28:	f842 3b04 	str.w	r3, [r2], #4

08000c2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c30:	d3f9      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd3 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f004 fe59 	bl	80058ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fc8f 	bl	800055c <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c44:	08005b24 	.word	0x08005b24
  ldr  r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c4c:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000c50:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000c54:	2001a828 	.word	0x2001a828

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8fc 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ff28 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fefe 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	2001a77c 	.word	0x2001a77c

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2001a77c 	.word	0x2001a77c

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e16b      	b.n	80011e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 815a 	bne.w	80011da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d00b      	beq.n	8000f46 <HAL_GPIO_Init+0x5a>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3a:	2b11      	cmp	r3, #17
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0xfc>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b12      	cmp	r3, #18
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80b4 	beq.w	80011da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b60      	ldr	r3, [pc, #384]	; (80011f8 <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a5f      	ldr	r2, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x30c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a5b      	ldr	r2, [pc, #364]	; (80011fc <HAL_GPIO_Init+0x310>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d02b      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	; (8001204 <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	; (8001208 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_GPIO_Init+0x324>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <HAL_GPIO_Init+0x328>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x32c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	; (800121c <HAL_GPIO_Init+0x330>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x20a>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00e      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x310>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_GPIO_Init+0x334>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001156:	4a32      	ldr	r2, [pc, #200]	; (8001220 <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_GPIO_Init+0x334>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x334>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_GPIO_Init+0x334>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae90 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	401a      	ands	r2, r3
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	429a      	cmp	r2, r3
 800126e:	d104      	bne.n	800127a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	041a      	lsls	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001278:	e002      	b.n	8001280 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e25b      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e236      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4b91      	ldr	r3, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a90      	ldr	r2, [pc, #576]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a8a      	ldr	r2, [pc, #552]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a83      	ldr	r2, [pc, #524]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a80      	ldr	r2, [pc, #512]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcc0 	bl	8000cc8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fcbc 	bl	8000cc8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1fb      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcac 	bl	8000cc8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fca8 	bl	8000cc8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1e7      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1bb      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4952      	ldr	r1, [pc, #328]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fc61 	bl	8000cc8 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fc5d 	bl	8000cc8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e19c      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4940      	ldr	r1, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc40 	bl	8000cc8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc3c 	bl	8000cc8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e17b      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fc20 	bl	8000cc8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc1c 	bl	8000cc8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e15b      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc09 	bl	8000cc8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc05 	bl	8000cc8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e144      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a0 	beq.w	8001626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d121      	bne.n	8001566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff fbcb 	bl	8000cc8 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e011      	b.n	800155a <HAL_RCC_OscConfig+0x2ce>
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
 8001544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fbbe 	bl	8000cc8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e0fd      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x4d4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x2f0>
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e01c      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x312>
 8001584:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a76      	ldr	r2, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800159e:	4b71      	ldr	r3, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a70      	ldr	r2, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fb83 	bl	8000cc8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fb7f 	bl	8000cc8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0bc      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ee      	beq.n	80015c6 <HAL_RCC_OscConfig+0x33a>
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb6d 	bl	8000cc8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb69 	bl	8000cc8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0a6      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ee      	bne.n	80015f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4b52      	ldr	r3, [pc, #328]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8092 	beq.w	8001754 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001630:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d05c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d141      	bne.n	80016c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b48      	ldr	r3, [pc, #288]	; (8001768 <HAL_RCC_OscConfig+0x4dc>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb3d 	bl	8000cc8 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb39 	bl	8000cc8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e078      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	3b01      	subs	r3, #1
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4933      	ldr	r1, [pc, #204]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x4dc>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb12 	bl	8000cc8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb0e 	bl	8000cc8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e04d      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 80016c6:	e045      	b.n	8001754 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x4dc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fafb 	bl	8000cc8 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff faf7 	bl	8000cc8 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e036      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x44a>
 80016f4:	e02e      	b.n	8001754 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e029      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_RCC_OscConfig+0x4d8>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	429a      	cmp	r2, r3
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d115      	bne.n	8001750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800172a:	4013      	ands	r3, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001730:	4293      	cmp	r3, r2
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000
 8001764:	40023800 	.word	0x40023800
 8001768:	42470060 	.word	0x42470060

0800176c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0cc      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d90c      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d044      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d119      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	2b03      	cmp	r3, #3
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e067      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff fa34 	bl	8000cc8 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fa30 	bl	8000cc8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e04f      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d20c      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f8e4 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00
 8001928:	40023800 	.word	0x40023800
 800192c:	08005ad4 	.word	0x08005ad4
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	2300      	movs	r3, #0
 800194a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001950:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b08      	cmp	r3, #8
 800195a:	d00d      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x40>
 800195c:	2b08      	cmp	r3, #8
 800195e:	f200 80bd 	bhi.w	8001adc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001966:	2b04      	cmp	r3, #4
 8001968:	d003      	beq.n	8001972 <HAL_RCC_GetSysClockFreq+0x3a>
 800196a:	e0b7      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800196e:	60bb      	str	r3, [r7, #8]
       break;
 8001970:	e0b7      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001974:	60bb      	str	r3, [r7, #8]
      break;
 8001976:	e0b4      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001978:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001980:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d04d      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198e:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	099b      	lsrs	r3, r3, #6
 8001994:	461a      	mov	r2, r3
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	ea02 0800 	and.w	r8, r2, r0
 80019a6:	ea03 0901 	and.w	r9, r3, r1
 80019aa:	4640      	mov	r0, r8
 80019ac:	4649      	mov	r1, r9
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	014b      	lsls	r3, r1, #5
 80019b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019bc:	0142      	lsls	r2, r0, #5
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	ebb0 0008 	subs.w	r0, r0, r8
 80019c6:	eb61 0109 	sbc.w	r1, r1, r9
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	018b      	lsls	r3, r1, #6
 80019d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d8:	0182      	lsls	r2, r0, #6
 80019da:	1a12      	subs	r2, r2, r0
 80019dc:	eb63 0301 	sbc.w	r3, r3, r1
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	00d9      	lsls	r1, r3, #3
 80019ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ee:	00d0      	lsls	r0, r2, #3
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	eb12 0208 	adds.w	r2, r2, r8
 80019f8:	eb43 0309 	adc.w	r3, r3, r9
 80019fc:	f04f 0000 	mov.w	r0, #0
 8001a00:	f04f 0100 	mov.w	r1, #0
 8001a04:	0259      	lsls	r1, r3, #9
 8001a06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a0a:	0250      	lsls	r0, r2, #9
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f7fe fc22 	bl	8000264 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e04a      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	461a      	mov	r2, r3
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	ea02 0400 	and.w	r4, r2, r0
 8001a42:	ea03 0501 	and.w	r5, r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	014b      	lsls	r3, r1, #5
 8001a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a58:	0142      	lsls	r2, r0, #5
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	1b00      	subs	r0, r0, r4
 8001a60:	eb61 0105 	sbc.w	r1, r1, r5
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	018b      	lsls	r3, r1, #6
 8001a6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a72:	0182      	lsls	r2, r0, #6
 8001a74:	1a12      	subs	r2, r2, r0
 8001a76:	eb63 0301 	sbc.w	r3, r3, r1
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	00d9      	lsls	r1, r3, #3
 8001a84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a88:	00d0      	lsls	r0, r2, #3
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	1912      	adds	r2, r2, r4
 8001a90:	eb45 0303 	adc.w	r3, r5, r3
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	0299      	lsls	r1, r3, #10
 8001a9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aa2:	0290      	lsls	r0, r2, #10
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	f7fe fbd6 	bl	8000264 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	60bb      	str	r3, [r7, #8]
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ade:	60bb      	str	r3, [r7, #8]
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff0 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08005ae4 	.word	0x08005ae4

08001b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	220f      	movs	r2, #15
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_RCC_GetClockConfig+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e01d      	b.n	8001bee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f815 	bl	8001bf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f000 f968 	bl	8001eb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d007      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d122      	bne.n	8001cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d11b      	bne.n	8001cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0202 	mvn.w	r2, #2
 8001c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8ee 	bl	8001e76 <HAL_TIM_IC_CaptureCallback>
 8001c9a:	e005      	b.n	8001ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8e0 	bl	8001e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8f1 	bl	8001e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d122      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d11b      	bne.n	8001d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0204 	mvn.w	r2, #4
 8001cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8c4 	bl	8001e76 <HAL_TIM_IC_CaptureCallback>
 8001cee:	e005      	b.n	8001cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8b6 	bl	8001e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8c7 	bl	8001e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d122      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11b      	bne.n	8001d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0208 	mvn.w	r2, #8
 8001d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f89a 	bl	8001e76 <HAL_TIM_IC_CaptureCallback>
 8001d42:	e005      	b.n	8001d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f88c 	bl	8001e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f89d 	bl	8001e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d122      	bne.n	8001daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d11b      	bne.n	8001daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0210 	mvn.w	r2, #16
 8001d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2208      	movs	r2, #8
 8001d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f870 	bl	8001e76 <HAL_TIM_IC_CaptureCallback>
 8001d96:	e005      	b.n	8001da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f862 	bl	8001e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f873 	bl	8001e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10e      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f06f 0201 	mvn.w	r2, #1
 8001dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe fe43 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d10e      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b80      	cmp	r3, #128	; 0x80
 8001df0:	d107      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f903 	bl	8002008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f838 	bl	8001e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0220 	mvn.w	r2, #32
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8cd 	bl	8001ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a40      	ldr	r2, [pc, #256]	; (8001fc8 <TIM_Base_SetConfig+0x114>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed2:	d00f      	beq.n	8001ef4 <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <TIM_Base_SetConfig+0x118>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00b      	beq.n	8001ef4 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <TIM_Base_SetConfig+0x11c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	; (8001fd4 <TIM_Base_SetConfig+0x120>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d003      	beq.n	8001ef4 <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <TIM_Base_SetConfig+0x124>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d108      	bne.n	8001f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <TIM_Base_SetConfig+0x114>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02b      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f14:	d027      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <TIM_Base_SetConfig+0x118>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d023      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <TIM_Base_SetConfig+0x11c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01f      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <TIM_Base_SetConfig+0x120>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01b      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <TIM_Base_SetConfig+0x124>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d017      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <TIM_Base_SetConfig+0x128>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <TIM_Base_SetConfig+0x12c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00f      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <TIM_Base_SetConfig+0x130>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00b      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <TIM_Base_SetConfig+0x134>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <TIM_Base_SetConfig+0x138>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <TIM_Base_SetConfig+0x13c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <TIM_Base_SetConfig+0x114>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0xf8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <TIM_Base_SetConfig+0x124>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d103      	bne.n	8001fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	615a      	str	r2, [r3, #20]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40000c00 	.word	0x40000c00
 8001fd8:	40010400 	.word	0x40010400
 8001fdc:	40014000 	.word	0x40014000
 8001fe0:	40014400 	.word	0x40014400
 8001fe4:	40014800 	.word	0x40014800
 8001fe8:	40001800 	.word	0x40001800
 8001fec:	40001c00 	.word	0x40001c00
 8001ff0:	40002000 	.word	0x40002000

08001ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0208 	add.w	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6892      	ldr	r2, [r2, #8]
 80020d4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6852      	ldr	r2, [r2, #4]
 80020de:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d103      	bne.n	80020f2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002112:	b580      	push	{r7, lr}
 8002114:	b08c      	sub	sp, #48	; 0x30
 8002116:	af04      	add	r7, sp, #16
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 ff20 	bl	8002f6c <pvPortMalloc>
 800212c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002134:	2058      	movs	r0, #88	; 0x58
 8002136:	f000 ff19 	bl	8002f6c <pvPortMalloc>
 800213a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
 8002148:	e005      	b.n	8002156 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f000 ffee 	bl	800312c <vPortFree>
 8002150:	e001      	b.n	8002156 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	2300      	movs	r3, #0
 8002160:	9303      	str	r3, [sp, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f80e 	bl	8002194 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002178:	69f8      	ldr	r0, [r7, #28]
 800217a:	f000 f8a1 	bl	80022c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	e002      	b.n	800218a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
 8002188:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800218a:	69bb      	ldr	r3, [r7, #24]
    }
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	461a      	mov	r2, r3
 80021ac:	21a5      	movs	r1, #165	; 0xa5
 80021ae:	f003 fbdd 	bl	800596c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021bc:	3b01      	subs	r3, #1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f023 0307 	bic.w	r3, r3, #7
 80021ca:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <prvInitialiseNewTask+0x58>
        __asm volatile
 80021d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	617b      	str	r3, [r7, #20]
    }
 80021e8:	bf00      	nop
 80021ea:	e7fe      	b.n	80021ea <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01f      	beq.n	8002232 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e012      	b.n	800221e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	7819      	ldrb	r1, [r3, #0]
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	3334      	adds	r3, #52	; 0x34
 8002208:	460a      	mov	r2, r1
 800220a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d9e9      	bls.n	80021f8 <prvInitialiseNewTask+0x64>
 8002224:	e000      	b.n	8002228 <prvInitialiseNewTask+0x94>
            {
                break;
 8002226:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002230:	e003      	b.n	800223a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	2b04      	cmp	r3, #4
 800223e:	d901      	bls.n	8002244 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002240:	2304      	movs	r3, #4
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	2200      	movs	r2, #0
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	3304      	adds	r3, #4
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fefe 	bl	800205c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	3318      	adds	r3, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fef9 	bl	800205c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	f1c3 0205 	rsb	r2, r3, #5
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	3350      	adds	r3, #80	; 0x50
 8002284:	2204      	movs	r2, #4
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fb6f 	bl	800596c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	3354      	adds	r3, #84	; 0x54
 8002292:	2201      	movs	r2, #1
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f003 fb68 	bl	800596c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	69b8      	ldr	r0, [r7, #24]
 80022a2:	f000 fb8d 	bl	80029c0 <pxPortInitialiseStack>
 80022a6:	4602      	mov	r2, r0
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022b8:	bf00      	nop
 80022ba:	3720      	adds	r7, #32
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022c8:	f000 fd24 	bl	8002d14 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <prvAddNewTaskToReadyList+0xfc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <prvAddNewTaskToReadyList+0xfc>)
 80022d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022d6:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <prvAddNewTaskToReadyList+0x100>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <prvAddNewTaskToReadyList+0x100>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <prvAddNewTaskToReadyList+0xfc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d110      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022ec:	f000 face 	bl	800288c <prvInitialiseTaskLists>
 80022f0:	e00d      	b.n	800230e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <prvAddNewTaskToReadyList+0x104>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <prvAddNewTaskToReadyList+0x100>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	429a      	cmp	r2, r3
 8002306:	d802      	bhi.n	800230e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <prvAddNewTaskToReadyList+0x100>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <prvAddNewTaskToReadyList+0x108>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <prvAddNewTaskToReadyList+0x108>)
 8002316:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <prvAddNewTaskToReadyList+0x108>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <prvAddNewTaskToReadyList+0x94>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 f89f 	bl	800546c <SEGGER_SYSVIEW_OnTaskCreate>
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	461d      	mov	r5, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461c      	mov	r4, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1ae3      	subs	r3, r4, r3
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	462b      	mov	r3, r5
 8002350:	f001 f8b2 	bl	80034b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 f90c 	bl	8005574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <prvAddNewTaskToReadyList+0x10c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <prvAddNewTaskToReadyList+0x10c>)
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <prvAddNewTaskToReadyList+0x110>)
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f7ff fe76 	bl	8002076 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800238a:	f000 fcf3 	bl	8002d74 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <prvAddNewTaskToReadyList+0x104>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <prvAddNewTaskToReadyList+0x100>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d207      	bcs.n	80023b4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <prvAddNewTaskToReadyList+0x114>)
 80023a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdb0      	pop	{r4, r5, r7, pc}
 80023bc:	20000110 	.word	0x20000110
 80023c0:	20000038 	.word	0x20000038
 80023c4:	2000011c 	.word	0x2000011c
 80023c8:	2000012c 	.word	0x2000012c
 80023cc:	20000118 	.word	0x20000118
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <vTaskStartScheduler+0x98>)
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	2282      	movs	r2, #130	; 0x82
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <vTaskStartScheduler+0x9c>)
 80023ec:	4822      	ldr	r0, [pc, #136]	; (8002478 <vTaskStartScheduler+0xa0>)
 80023ee:	f7ff fe90 	bl	8002112 <xTaskCreate>
 80023f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d124      	bne.n	8002444 <vTaskStartScheduler+0x6c>
        __asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	60bb      	str	r3, [r7, #8]
    }
 800240c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <vTaskStartScheduler+0xa4>)
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <vTaskStartScheduler+0xa8>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <vTaskStartScheduler+0xac>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <vTaskStartScheduler+0xb0>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <vTaskStartScheduler+0x98>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d102      	bne.n	8002434 <vTaskStartScheduler+0x5c>
 800242e:	f003 f801 	bl	8005434 <SEGGER_SYSVIEW_OnIdle>
 8002432:	e004      	b.n	800243e <vTaskStartScheduler+0x66>
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <vTaskStartScheduler+0xb0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f003 f859 	bl	80054f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800243e:	f000 fb49 	bl	8002ad4 <xPortStartScheduler>
 8002442:	e00e      	b.n	8002462 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d10a      	bne.n	8002462 <vTaskStartScheduler+0x8a>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	607b      	str	r3, [r7, #4]
    }
 800245e:	bf00      	nop
 8002460:	e7fe      	b.n	8002460 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <vTaskStartScheduler+0xb4>)
 8002464:	681b      	ldr	r3, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000134 	.word	0x20000134
 8002474:	08005a00 	.word	0x08005a00
 8002478:	0800285d 	.word	0x0800285d
 800247c:	20000130 	.word	0x20000130
 8002480:	2000011c 	.word	0x2000011c
 8002484:	20000114 	.word	0x20000114
 8002488:	20000038 	.word	0x20000038
 800248c:	2000000c 	.word	0x2000000c

08002490 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <vTaskSuspendAll+0x18>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <vTaskSuspendAll+0x18>)
 800249c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	20000138 	.word	0x20000138

080024ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <xTaskResumeAll+0x11c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <xTaskResumeAll+0x2c>
        __asm volatile
 80024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	603b      	str	r3, [r7, #0]
    }
 80024d4:	bf00      	nop
 80024d6:	e7fe      	b.n	80024d6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024d8:	f000 fc1c 	bl	8002d14 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <xTaskResumeAll+0x11c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4a39      	ldr	r2, [pc, #228]	; (80025c8 <xTaskResumeAll+0x11c>)
 80024e4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <xTaskResumeAll+0x11c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d165      	bne.n	80025ba <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <xTaskResumeAll+0x120>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d061      	beq.n	80025ba <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024f6:	e032      	b.n	800255e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <xTaskResumeAll+0x124>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3318      	adds	r3, #24
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fdda 	bl	80020be <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdd5 	bl	80020be <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 f82c 	bl	8005574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <xTaskResumeAll+0x128>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <xTaskResumeAll+0x128>)
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <xTaskResumeAll+0x12c>)
 800253c:	441a      	add	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f7ff fd96 	bl	8002076 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <xTaskResumeAll+0x130>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	429a      	cmp	r2, r3
 8002556:	d302      	bcc.n	800255e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <xTaskResumeAll+0x134>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <xTaskResumeAll+0x124>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1c8      	bne.n	80024f8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800256c:	f000 fa0c 	bl	8002988 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <xTaskResumeAll+0x138>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800257c:	f000 f848 	bl	8002610 <xTaskIncrementTick>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <xTaskResumeAll+0x134>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f1      	bne.n	800257c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <xTaskResumeAll+0x138>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <xTaskResumeAll+0x134>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <xTaskResumeAll+0x13c>)
 80025ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025ba:	f000 fbdb 	bl	8002d74 <vPortExitCritical>

    return xAlreadyYielded;
 80025be:	68bb      	ldr	r3, [r7, #8]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000138 	.word	0x20000138
 80025cc:	20000110 	.word	0x20000110
 80025d0:	200000d0 	.word	0x200000d0
 80025d4:	20000118 	.word	0x20000118
 80025d8:	2000003c 	.word	0x2000003c
 80025dc:	20000038 	.word	0x20000038
 80025e0:	20000124 	.word	0x20000124
 80025e4:	20000120 	.word	0x20000120
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025f2:	f000 fc7b 	bl	8002eec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <xTaskGetTickCountFromISR+0x20>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002600:	683b      	ldr	r3, [r7, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000114 	.word	0x20000114

08002610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <xTaskIncrementTick+0x14c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8092 	bne.w	8002748 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <xTaskIncrementTick+0x150>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <xTaskIncrementTick+0x150>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d120      	bne.n	800267a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002638:	4b4a      	ldr	r3, [pc, #296]	; (8002764 <xTaskIncrementTick+0x154>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <xTaskIncrementTick+0x48>
        __asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	603b      	str	r3, [r7, #0]
    }
 8002654:	bf00      	nop
 8002656:	e7fe      	b.n	8002656 <xTaskIncrementTick+0x46>
 8002658:	4b42      	ldr	r3, [pc, #264]	; (8002764 <xTaskIncrementTick+0x154>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <xTaskIncrementTick+0x158>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <xTaskIncrementTick+0x154>)
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4a40      	ldr	r2, [pc, #256]	; (8002768 <xTaskIncrementTick+0x158>)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b3f      	ldr	r3, [pc, #252]	; (800276c <xTaskIncrementTick+0x15c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a3e      	ldr	r2, [pc, #248]	; (800276c <xTaskIncrementTick+0x15c>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	f000 f987 	bl	8002988 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <xTaskIncrementTick+0x160>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d34c      	bcc.n	800271e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002684:	4b37      	ldr	r3, [pc, #220]	; (8002764 <xTaskIncrementTick+0x154>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <xTaskIncrementTick+0x160>)
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	601a      	str	r2, [r3, #0]
                    break;
 8002696:	e042      	b.n	800271e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <xTaskIncrementTick+0x154>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d203      	bcs.n	80026b8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026b0:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <xTaskIncrementTick+0x160>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026b6:	e032      	b.n	800271e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fcfe 	bl	80020be <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3318      	adds	r3, #24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fcf5 	bl	80020be <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 ff4c 	bl	8005574 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	2201      	movs	r2, #1
 80026e2:	409a      	lsls	r2, r3
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <xTaskIncrementTick+0x164>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <xTaskIncrementTick+0x164>)
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <xTaskIncrementTick+0x168>)
 80026fc:	441a      	add	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	3304      	adds	r3, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4610      	mov	r0, r2
 8002706:	f7ff fcb6 	bl	8002076 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <xTaskIncrementTick+0x16c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d3b5      	bcc.n	8002684 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800271c:	e7b2      	b.n	8002684 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <xTaskIncrementTick+0x16c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002724:	4914      	ldr	r1, [pc, #80]	; (8002778 <xTaskIncrementTick+0x168>)
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d901      	bls.n	800273a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <xTaskIncrementTick+0x170>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e004      	b.n	8002752 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <xTaskIncrementTick+0x174>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <xTaskIncrementTick+0x174>)
 8002750:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002752:	697b      	ldr	r3, [r7, #20]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000138 	.word	0x20000138
 8002760:	20000114 	.word	0x20000114
 8002764:	200000c8 	.word	0x200000c8
 8002768:	200000cc 	.word	0x200000cc
 800276c:	20000128 	.word	0x20000128
 8002770:	20000130 	.word	0x20000130
 8002774:	20000118 	.word	0x20000118
 8002778:	2000003c 	.word	0x2000003c
 800277c:	20000038 	.word	0x20000038
 8002780:	20000124 	.word	0x20000124
 8002784:	20000120 	.word	0x20000120

08002788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <vTaskSwitchContext+0xbc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <vTaskSwitchContext+0xc0>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800279c:	e04d      	b.n	800283a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <vTaskSwitchContext+0xc0>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027a4:	4b29      	ldr	r3, [pc, #164]	; (800284c <vTaskSwitchContext+0xc4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	f1c3 031f 	rsb	r3, r3, #31
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4925      	ldr	r1, [pc, #148]	; (8002850 <vTaskSwitchContext+0xc8>)
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	607b      	str	r3, [r7, #4]
    }
 80027e0:	bf00      	nop
 80027e2:	e7fe      	b.n	80027e2 <vTaskSwitchContext+0x5a>
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a18      	ldr	r2, [pc, #96]	; (8002850 <vTaskSwitchContext+0xc8>)
 80027f0:	4413      	add	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	3308      	adds	r3, #8
 8002806:	429a      	cmp	r2, r3
 8002808:	d104      	bne.n	8002814 <vTaskSwitchContext+0x8c>
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <vTaskSwitchContext+0xcc>)
 800281c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <vTaskSwitchContext+0xcc>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <vTaskSwitchContext+0xd0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d102      	bne.n	8002830 <vTaskSwitchContext+0xa8>
 800282a:	f002 fe03 	bl	8005434 <SEGGER_SYSVIEW_OnIdle>
}
 800282e:	e004      	b.n	800283a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <vTaskSwitchContext+0xcc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f002 fe5b 	bl	80054f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000138 	.word	0x20000138
 8002848:	20000124 	.word	0x20000124
 800284c:	20000118 	.word	0x20000118
 8002850:	2000003c 	.word	0x2000003c
 8002854:	20000038 	.word	0x20000038
 8002858:	20000134 	.word	0x20000134

0800285c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002864:	f000 f852 	bl	800290c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <prvIdleTask+0x28>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d9f9      	bls.n	8002864 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <prvIdleTask+0x2c>)
 8002872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002880:	e7f0      	b.n	8002864 <prvIdleTask+0x8>
 8002882:	bf00      	nop
 8002884:	2000003c 	.word	0x2000003c
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	e00c      	b.n	80028b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <prvInitialiseTaskLists+0x60>)
 80028a4:	4413      	add	r3, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fbb8 	bl	800201c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d9ef      	bls.n	8002898 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <prvInitialiseTaskLists+0x64>)
 80028ba:	f7ff fbaf 	bl	800201c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028be:	480d      	ldr	r0, [pc, #52]	; (80028f4 <prvInitialiseTaskLists+0x68>)
 80028c0:	f7ff fbac 	bl	800201c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <prvInitialiseTaskLists+0x6c>)
 80028c6:	f7ff fba9 	bl	800201c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028ca:	480c      	ldr	r0, [pc, #48]	; (80028fc <prvInitialiseTaskLists+0x70>)
 80028cc:	f7ff fba6 	bl	800201c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028d0:	480b      	ldr	r0, [pc, #44]	; (8002900 <prvInitialiseTaskLists+0x74>)
 80028d2:	f7ff fba3 	bl	800201c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <prvInitialiseTaskLists+0x78>)
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <prvInitialiseTaskLists+0x64>)
 80028da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <prvInitialiseTaskLists+0x7c>)
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <prvInitialiseTaskLists+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000003c 	.word	0x2000003c
 80028f0:	200000a0 	.word	0x200000a0
 80028f4:	200000b4 	.word	0x200000b4
 80028f8:	200000d0 	.word	0x200000d0
 80028fc:	200000e4 	.word	0x200000e4
 8002900:	200000fc 	.word	0x200000fc
 8002904:	200000c8 	.word	0x200000c8
 8002908:	200000cc 	.word	0x200000cc

0800290c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002912:	e019      	b.n	8002948 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002914:	f000 f9fe 	bl	8002d14 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <prvCheckTasksWaitingTermination+0x50>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fbca 	bl	80020be <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <prvCheckTasksWaitingTermination+0x54>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <prvCheckTasksWaitingTermination+0x54>)
 8002932:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <prvCheckTasksWaitingTermination+0x58>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <prvCheckTasksWaitingTermination+0x58>)
 800293c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800293e:	f000 fa19 	bl	8002d74 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f810 	bl	8002968 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <prvCheckTasksWaitingTermination+0x58>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e1      	bne.n	8002914 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200000e4 	.word	0x200000e4
 8002960:	20000110 	.word	0x20000110
 8002964:	200000f8 	.word	0x200000f8

08002968 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fbd9 	bl	800312c <vPortFree>
                vPortFree( pxTCB );
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fbd6 	bl	800312c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <prvResetNextTaskUnblockTime+0x30>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <prvResetNextTaskUnblockTime+0x34>)
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800299e:	e005      	b.n	80029ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <prvResetNextTaskUnblockTime+0x30>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <prvResetNextTaskUnblockTime+0x34>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200000c8 	.word	0x200000c8
 80029bc:	20000130 	.word	0x20000130

080029c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3b04      	subs	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b04      	subs	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f023 0201 	bic.w	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3b04      	subs	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <pxPortInitialiseStack+0x64>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b14      	subs	r3, #20
 80029fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f06f 0202 	mvn.w	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3b20      	subs	r3, #32
 8002a14:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	08002a29 	.word	0x08002a29

08002a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <prvTaskExitError+0x54>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d00a      	beq.n	8002a52 <prvTaskExitError+0x2a>
        __asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	60fb      	str	r3, [r7, #12]
    }
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <prvTaskExitError+0x28>
        __asm volatile
 8002a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a56:	f383 8811 	msr	BASEPRI, r3
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	60bb      	str	r3, [r7, #8]
    }
 8002a64:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a66:	bf00      	nop
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0fc      	beq.n	8002a68 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	20000010 	.word	0x20000010

08002a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <pxCurrentTCBConst2>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	f380 8809 	msr	PSP, r0
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	4770      	bx	lr
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst2>:
 8002aa0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002aa8:	4808      	ldr	r0, [pc, #32]	; (8002acc <prvPortStartFirstTask+0x24>)
 8002aaa:	6800      	ldr	r0, [r0, #0]
 8002aac:	6800      	ldr	r0, [r0, #0]
 8002aae:	f380 8808 	msr	MSP, r0
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8814 	msr	CONTROL, r0
 8002aba:	b662      	cpsie	i
 8002abc:	b661      	cpsie	f
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	df00      	svc	0
 8002ac8:	bf00      	nop
 8002aca:	0000      	.short	0x0000
 8002acc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop

08002ad4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <xPortStartScheduler+0x120>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a46      	ldr	r2, [pc, #280]	; (8002bf8 <xPortStartScheduler+0x124>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d10a      	bne.n	8002afa <xPortStartScheduler+0x26>
        __asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	613b      	str	r3, [r7, #16]
    }
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002afa:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <xPortStartScheduler+0x120>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <xPortStartScheduler+0x128>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10a      	bne.n	8002b1a <xPortStartScheduler+0x46>
        __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60fb      	str	r3, [r7, #12]
    }
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <xPortStartScheduler+0x12c>)
 8002b1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <xPortStartScheduler+0x130>)
 8002b40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b48:	e009      	b.n	8002b5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d0ef      	beq.n	8002b4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b6a:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1c3 0307 	rsb	r3, r3, #7
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00a      	beq.n	8002b8c <xPortStartScheduler+0xb8>
        __asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	60bb      	str	r3, [r7, #8]
    }
 8002b88:	bf00      	nop
 8002b8a:	e7fe      	b.n	8002b8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <xPortStartScheduler+0x134>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <xPortStartScheduler+0x134>)
 8002ba0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <xPortStartScheduler+0x138>)
 8002bbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002bc2:	f000 f963 	bl	8002e8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <xPortStartScheduler+0x13c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002bcc:	f000 f982 	bl	8002ed4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <xPortStartScheduler+0x140>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <xPortStartScheduler+0x140>)
 8002bd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002bdc:	f7ff ff64 	bl	8002aa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002be0:	f7ff fdd2 	bl	8002788 <vTaskSwitchContext>
    prvTaskExitError();
 8002be4:	f7ff ff20 	bl	8002a28 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00
 8002bf8:	410fc271 	.word	0x410fc271
 8002bfc:	410fc270 	.word	0x410fc270
 8002c00:	e000e400 	.word	0xe000e400
 8002c04:	2000013c 	.word	0x2000013c
 8002c08:	20000140 	.word	0x20000140
 8002c0c:	e000ed20 	.word	0xe000ed20
 8002c10:	20000010 	.word	0x20000010
 8002c14:	e000ef34 	.word	0xe000ef34

08002c18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <vInitPrioGroupValue+0xe4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <vInitPrioGroupValue+0xe8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10a      	bne.n	8002c3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	613b      	str	r3, [r7, #16]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <vInitPrioGroupValue+0xe4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <vInitPrioGroupValue+0xec>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10a      	bne.n	8002c5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60fb      	str	r3, [r7, #12]
    }
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <vInitPrioGroupValue+0xf0>)
 8002c60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	22ff      	movs	r2, #255	; 0xff
 8002c6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <vInitPrioGroupValue+0xf4>)
 8002c84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002c88:	2207      	movs	r2, #7
 8002c8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c8c:	e009      	b.n	8002ca2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002c96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d0ef      	beq.n	8002c8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1c3 0307 	rsb	r3, r3, #7
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d00a      	beq.n	8002cd0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	60bb      	str	r3, [r7, #8]
    }
 8002ccc:	bf00      	nop
 8002cce:	e7fe      	b.n	8002cce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002cd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <vInitPrioGroupValue+0xf8>)
 8002ce4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	410fc271 	.word	0x410fc271
 8002d04:	410fc270 	.word	0x410fc270
 8002d08:	e000e400 	.word	0xe000e400
 8002d0c:	2000013c 	.word	0x2000013c
 8002d10:	20000140 	.word	0x20000140

08002d14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
        __asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	607b      	str	r3, [r7, #4]
    }
 8002d2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <vPortEnterCritical+0x58>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <vPortEnterCritical+0x58>)
 8002d36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <vPortEnterCritical+0x58>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10f      	bne.n	8002d60 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <vPortEnterCritical+0x5c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	603b      	str	r3, [r7, #0]
    }
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <vPortEnterCritical+0x4a>
    }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	20000010 	.word	0x20000010
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <vPortExitCritical+0x50>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <vPortExitCritical+0x24>
        __asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	607b      	str	r3, [r7, #4]
    }
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <vPortExitCritical+0x50>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <vPortExitCritical+0x50>)
 8002da0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <vPortExitCritical+0x50>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <vPortExitCritical+0x42>
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002db4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000010 	.word	0x20000010
	...

08002dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002dd0:	f3ef 8009 	mrs	r0, PSP
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <pxCurrentTCBConst>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	f01e 0f10 	tst.w	lr, #16
 8002de0:	bf08      	it	eq
 8002de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dea:	6010      	str	r0, [r2, #0]
 8002dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002df4:	f380 8811 	msr	BASEPRI, r0
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f7ff fcc2 	bl	8002788 <vTaskSwitchContext>
 8002e04:	f04f 0000 	mov.w	r0, #0
 8002e08:	f380 8811 	msr	BASEPRI, r0
 8002e0c:	bc09      	pop	{r0, r3}
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	6808      	ldr	r0, [r1, #0]
 8002e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e16:	f01e 0f10 	tst.w	lr, #16
 8002e1a:	bf08      	it	eq
 8002e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e20:	f380 8809 	msr	PSP, r0
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	f3af 8000 	nop.w

08002e30 <pxCurrentTCBConst>:
 8002e30:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop

08002e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	607b      	str	r3, [r7, #4]
    }
 8002e50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e52:	f002 fa75 	bl	8005340 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e56:	f7ff fbdb 	bl	8002610 <xTaskIncrementTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e60:	f002 facc 	bl	80053fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <SysTick_Handler+0x50>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e001      	b.n	8002e72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002e6e:	f002 faa9 	bl	80053c4 <SEGGER_SYSVIEW_RecordExitISR>
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f383 8811 	msr	BASEPRI, r3
    }
 8002e7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <vPortSetupTimerInterrupt+0x38>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <vPortSetupTimerInterrupt+0x3c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <vPortSetupTimerInterrupt+0x40>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	099b      	lsrs	r3, r3, #6
 8002ea8:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <vPortSetupTimerInterrupt+0x44>)
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <vPortSetupTimerInterrupt+0x34>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010
 8002ec4:	e000e018 	.word	0xe000e018
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	10624dd3 	.word	0x10624dd3
 8002ed0:	e000e014 	.word	0xe000e014

08002ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ee4 <vPortEnableVFP+0x10>
 8002ed8:	6801      	ldr	r1, [r0, #0]
 8002eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ede:	6001      	str	r1, [r0, #0]
 8002ee0:	4770      	bx	lr
 8002ee2:	0000      	.short	0x0000
 8002ee4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop

08002eec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002ef2:	f3ef 8305 	mrs	r3, IPSR
 8002ef6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d914      	bls.n	8002f28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002efe:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <vPortValidateInterruptPriority+0x70>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <vPortValidateInterruptPriority+0x74>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	7afa      	ldrb	r2, [r7, #11]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d20a      	bcs.n	8002f28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	607b      	str	r3, [r7, #4]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <vPortValidateInterruptPriority+0x78>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f30:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <vPortValidateInterruptPriority+0x7c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d90a      	bls.n	8002f4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	603b      	str	r3, [r7, #0]
    }
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <vPortValidateInterruptPriority+0x60>
    }
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e3f0 	.word	0xe000e3f0
 8002f60:	2000013c 	.word	0x2000013c
 8002f64:	e000ed0c 	.word	0xe000ed0c
 8002f68:	20000140 	.word	0x20000140

08002f6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f78:	f7ff fa8a 	bl	8002490 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f7c:	4b65      	ldr	r3, [pc, #404]	; (8003114 <pvPortMalloc+0x1a8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f84:	f000 f934 	bl	80031f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f88:	4b63      	ldr	r3, [pc, #396]	; (8003118 <pvPortMalloc+0x1ac>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 80a7 	bne.w	80030e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02d      	beq.n	8002ff8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d227      	bcs.n	8002ff8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fa8:	2208      	movs	r2, #8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d214      	bcs.n	8002ff2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	3308      	adds	r3, #8
 8002fd0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <pvPortMalloc+0x92>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	617b      	str	r3, [r7, #20]
    }
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff6:	e002      	b.n	8002ffe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	e000      	b.n	8003000 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ffe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d06e      	beq.n	80030e4 <pvPortMalloc+0x178>
 8003006:	4b45      	ldr	r3, [pc, #276]	; (800311c <pvPortMalloc+0x1b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d869      	bhi.n	80030e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <pvPortMalloc+0x1b4>)
 8003012:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003014:	4b42      	ldr	r3, [pc, #264]	; (8003120 <pvPortMalloc+0x1b4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800301a:	e004      	b.n	8003026 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d903      	bls.n	8003038 <pvPortMalloc+0xcc>
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f1      	bne.n	800301c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <pvPortMalloc+0x1a8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	429a      	cmp	r2, r3
 8003040:	d050      	beq.n	80030e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	4413      	add	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad2      	subs	r2, r2, r3
 800305c:	2308      	movs	r3, #8
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	429a      	cmp	r2, r3
 8003062:	d91f      	bls.n	80030a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <pvPortMalloc+0x120>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	613b      	str	r3, [r7, #16]
    }
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800309e:	69b8      	ldr	r0, [r7, #24]
 80030a0:	f000 f908 	bl	80032b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <pvPortMalloc+0x1b0>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <pvPortMalloc+0x1b0>)
 80030b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <pvPortMalloc+0x1b0>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <pvPortMalloc+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d203      	bcs.n	80030c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <pvPortMalloc+0x1b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <pvPortMalloc+0x1b8>)
 80030c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <pvPortMalloc+0x1ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <pvPortMalloc+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <pvPortMalloc+0x1bc>)
 80030e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030e4:	f7ff f9e2 	bl	80024ac <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <pvPortMalloc+0x19c>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <pvPortMalloc+0x19a>
    return pvReturn;
 8003108:	69fb      	ldr	r3, [r7, #28]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2001914c 	.word	0x2001914c
 8003118:	20019160 	.word	0x20019160
 800311c:	20019150 	.word	0x20019150
 8003120:	20019144 	.word	0x20019144
 8003124:	20019154 	.word	0x20019154
 8003128:	20019158 	.word	0x20019158

0800312c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04d      	beq.n	80031da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800313e:	2308      	movs	r3, #8
 8003140:	425b      	negs	r3, r3
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <vPortFree+0xb8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <vPortFree+0x44>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60fb      	str	r3, [r7, #12]
    }
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <vPortFree+0x62>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60bb      	str	r3, [r7, #8]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <vPortFree+0xb8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01e      	beq.n	80031da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11a      	bne.n	80031da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <vPortFree+0xb8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031b4:	f7ff f96c 	bl	8002490 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <vPortFree+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <vPortFree+0xbc>)
 80031c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031c6:	6938      	ldr	r0, [r7, #16]
 80031c8:	f000 f874 	bl	80032b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <vPortFree+0xc0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <vPortFree+0xc0>)
 80031d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031d6:	f7ff f969 	bl	80024ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20019160 	.word	0x20019160
 80031e8:	20019150 	.word	0x20019150
 80031ec:	2001915c 	.word	0x2001915c

080031f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031f6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <prvHeapInit+0xac>)
 80031fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3307      	adds	r3, #7
 800320e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <prvHeapInit+0xac>)
 8003220:	4413      	add	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <prvHeapInit+0xb0>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <prvHeapInit+0xb0>)
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800323c:	2208      	movs	r2, #8
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <prvHeapInit+0xb4>)
 8003250:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <prvHeapInit+0xb4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <prvHeapInit+0xb4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <prvHeapInit+0xb4>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <prvHeapInit+0xb8>)
 800327e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <prvHeapInit+0xbc>)
 8003286:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <prvHeapInit+0xc0>)
 800328a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	20000144 	.word	0x20000144
 80032a0:	20019144 	.word	0x20019144
 80032a4:	2001914c 	.word	0x2001914c
 80032a8:	20019154 	.word	0x20019154
 80032ac:	20019150 	.word	0x20019150
 80032b0:	20019160 	.word	0x20019160

080032b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <prvInsertBlockIntoFreeList+0xac>)
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e002      	b.n	80032c8 <prvInsertBlockIntoFreeList+0x14>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d8f7      	bhi.n	80032c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d108      	bne.n	80032f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	441a      	add	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	441a      	add	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d118      	bne.n	800333c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <prvInsertBlockIntoFreeList+0xb0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d00d      	beq.n	8003332 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e008      	b.n	8003344 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <prvInsertBlockIntoFreeList+0xb0>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e003      	b.n	8003344 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d002      	beq.n	8003352 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20019144 	.word	0x20019144
 8003364:	2001914c 	.word	0x2001914c

08003368 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800336c:	4803      	ldr	r0, [pc, #12]	; (800337c <_cbSendSystemDesc+0x14>)
 800336e:	f001 ff91 	bl	8005294 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003372:	4803      	ldr	r0, [pc, #12]	; (8003380 <_cbSendSystemDesc+0x18>)
 8003374:	f001 ff8e 	bl	8005294 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08005a08 	.word	0x08005a08
 8003380:	08005a4c 	.word	0x08005a4c

08003384 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SEGGER_SYSVIEW_Conf+0x20>)
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SEGGER_SYSVIEW_Conf+0x24>)
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <SEGGER_SYSVIEW_Conf+0x28>)
 8003394:	f001 fc02 	bl	8004b9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003398:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800339c:	f001 fc42 	bl	8004c24 <SEGGER_SYSVIEW_SetRAMBase>
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000000 	.word	0x20000000
 80033a8:	08003369 	.word	0x08003369
 80033ac:	08005aec 	.word	0x08005aec

080033b0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80033b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	e033      	b.n	8003424 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80033bc:	491e      	ldr	r1, [pc, #120]	; (8003438 <_cbSendTaskList+0x88>)
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	491a      	ldr	r1, [pc, #104]	; (8003438 <_cbSendTaskList+0x88>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3304      	adds	r3, #4
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	4c16      	ldr	r4, [pc, #88]	; (8003438 <_cbSendTaskList+0x88>)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4423      	add	r3, r4
 80033ec:	3308      	adds	r3, #8
 80033ee:	681c      	ldr	r4, [r3, #0]
 80033f0:	4d11      	ldr	r5, [pc, #68]	; (8003438 <_cbSendTaskList+0x88>)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	442b      	add	r3, r5
 80033fe:	330c      	adds	r3, #12
 8003400:	681d      	ldr	r5, [r3, #0]
 8003402:	4e0d      	ldr	r6, [pc, #52]	; (8003438 <_cbSendTaskList+0x88>)
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4433      	add	r3, r6
 8003410:	3310      	adds	r3, #16
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462b      	mov	r3, r5
 8003418:	4622      	mov	r2, r4
 800341a:	f000 f8b5 	bl	8003588 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3301      	adds	r3, #1
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <_cbSendTaskList+0x8c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	429a      	cmp	r2, r3
 800342c:	d3c6      	bcc.n	80033bc <_cbSendTaskList+0xc>
  }
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	20019164 	.word	0x20019164
 800343c:	20019204 	.word	0x20019204

08003440 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003446:	f7ff f8d1 	bl	80025ec <xTaskGetTickCountFromISR>
 800344a:	4603      	mov	r3, r0
 800344c:	461a      	mov	r2, r3
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003456:	e9d7 0100 	ldrd	r0, r1, [r7]
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	f04f 0400 	mov.w	r4, #0
 8003462:	f04f 0500 	mov.w	r5, #0
 8003466:	015d      	lsls	r5, r3, #5
 8003468:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800346c:	0154      	lsls	r4, r2, #5
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	1a12      	subs	r2, r2, r0
 8003474:	eb63 0301 	sbc.w	r3, r3, r1
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	f04f 0500 	mov.w	r5, #0
 8003480:	009d      	lsls	r5, r3, #2
 8003482:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003486:	0094      	lsls	r4, r2, #2
 8003488:	4622      	mov	r2, r4
 800348a:	462b      	mov	r3, r5
 800348c:	1812      	adds	r2, r2, r0
 800348e:	eb41 0303 	adc.w	r3, r1, r3
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	00d9      	lsls	r1, r3, #3
 800349c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a0:	00d0      	lsls	r0, r2, #3
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80034aa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bdb0      	pop	{r4, r5, r7, pc}

080034b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80034c6:	2205      	movs	r2, #5
 80034c8:	492b      	ldr	r1, [pc, #172]	; (8003578 <SYSVIEW_AddTask+0xc0>)
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f002 fa32 	bl	8005934 <memcmp>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04b      	beq.n	800356e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80034d6:	4b29      	ldr	r3, [pc, #164]	; (800357c <SYSVIEW_AddTask+0xc4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b07      	cmp	r3, #7
 80034dc:	d903      	bls.n	80034e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80034de:	4828      	ldr	r0, [pc, #160]	; (8003580 <SYSVIEW_AddTask+0xc8>)
 80034e0:	f002 f97a 	bl	80057d8 <SEGGER_SYSVIEW_Warn>
    return;
 80034e4:	e044      	b.n	8003570 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <SYSVIEW_AddTask+0xc4>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4926      	ldr	r1, [pc, #152]	; (8003584 <SYSVIEW_AddTask+0xcc>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80034fa:	4b20      	ldr	r3, [pc, #128]	; (800357c <SYSVIEW_AddTask+0xc4>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4921      	ldr	r1, [pc, #132]	; (8003584 <SYSVIEW_AddTask+0xcc>)
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3304      	adds	r3, #4
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <SYSVIEW_AddTask+0xc4>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	491b      	ldr	r1, [pc, #108]	; (8003584 <SYSVIEW_AddTask+0xcc>)
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3308      	adds	r3, #8
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <SYSVIEW_AddTask+0xc4>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4916      	ldr	r1, [pc, #88]	; (8003584 <SYSVIEW_AddTask+0xcc>)
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	330c      	adds	r3, #12
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <SYSVIEW_AddTask+0xc4>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4910      	ldr	r1, [pc, #64]	; (8003584 <SYSVIEW_AddTask+0xcc>)
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3310      	adds	r3, #16
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <SYSVIEW_AddTask+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <SYSVIEW_AddTask+0xc4>)
 800355a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f80e 	bl	8003588 <SYSVIEW_SendTaskInfo>
 800356c:	e000      	b.n	8003570 <SYSVIEW_AddTask+0xb8>
    return;
 800356e:	bf00      	nop

}
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	08005a5c 	.word	0x08005a5c
 800357c:	20019204 	.word	0x20019204
 8003580:	08005a64 	.word	0x08005a64
 8003584:	20019164 	.word	0x20019164

08003588 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003596:	f107 0314 	add.w	r3, r7, #20
 800359a:	2214      	movs	r2, #20
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 f9e4 	bl	800596c <memset>
  TaskInfo.TaskID     = TaskID;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fd71 	bl	80050a4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <__NVIC_EnableIRQ>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	; (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003662:	f002 f915 	bl	8005890 <SEGGER_SYSVIEW_IsStarted>
 8003666:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800366e:	f001 fb9d 	bl	8004dac <SEGGER_SYSVIEW_Start>
  }
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <_cbOnUARTRx+0x3c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d806      	bhi.n	800369c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <_cbOnUARTRx+0x3c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <_cbOnUARTRx+0x3c>)
 8003698:	701a      	strb	r2, [r3, #0]
    goto Done;
 800369a:	e009      	b.n	80036b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800369c:	f7ff ffde 	bl	800365c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <_cbOnUARTRx+0x3c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	2201      	movs	r2, #1
 80036aa:	4619      	mov	r1, r3
 80036ac:	f000 fb9a 	bl	8003de4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80036b0:	bf00      	nop
}
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000014 	.word	0x20000014

080036bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <_cbOnUARTTx+0x5c>)
 80036c6:	785b      	ldrb	r3, [r3, #1]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d80f      	bhi.n	80036ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <_cbOnUARTTx+0x5c>)
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <_cbOnUARTTx+0x60>)
 80036d4:	5c9a      	ldrb	r2, [r3, r2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <_cbOnUARTTx+0x5c>)
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	3301      	adds	r3, #1
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <_cbOnUARTTx+0x5c>)
 80036e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80036ea:	e00f      	b.n	800370c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <_cbOnUARTTx+0x5c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fa19 	bl	8003b2c <SEGGER_RTT_ReadUpBufferNoLock>
 80036fa:	4603      	mov	r3, r0
 80036fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	da02      	bge.n	800370a <_cbOnUARTTx+0x4e>
    r = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e000      	b.n	800370c <_cbOnUARTTx+0x50>
  }
Done:
 800370a:	bf00      	nop
  return r;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000014 	.word	0x20000014
 800371c:	08005af4 	.word	0x08005af4

08003720 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <SEGGER_UART_init+0x1c>)
 800372a:	4905      	ldr	r1, [pc, #20]	; (8003740 <SEGGER_UART_init+0x20>)
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f863 	bl	80037f8 <HIF_UART_Init>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	0800367d 	.word	0x0800367d
 8003740:	080036bd 	.word	0x080036bd

08003744 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800374a:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <USART2_IRQHandler+0x80>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d011      	beq.n	800377e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <USART2_IRQHandler+0x84>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 030b 	and.w	r3, r3, #11
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <USART2_IRQHandler+0x88>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003774:	4b15      	ldr	r3, [pc, #84]	; (80037cc <USART2_IRQHandler+0x88>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	79fa      	ldrb	r2, [r7, #7]
 800377a:	4610      	mov	r0, r2
 800377c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01a      	beq.n	80037be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <USART2_IRQHandler+0x8c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d015      	beq.n	80037bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <USART2_IRQHandler+0x8c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1dfa      	adds	r2, r7, #7
 8003796:	4610      	mov	r0, r2
 8003798:	4798      	blx	r3
 800379a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <USART2_IRQHandler+0x90>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <USART2_IRQHandler+0x90>)
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e006      	b.n	80037be <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <USART2_IRQHandler+0x80>)
 80037b2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <USART2_IRQHandler+0x84>)
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e000      	b.n	80037be <USART2_IRQHandler+0x7a>
      return;
 80037bc:	bf00      	nop
    }
  }
}
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40004400 	.word	0x40004400
 80037c8:	40004404 	.word	0x40004404
 80037cc:	20019208 	.word	0x20019208
 80037d0:	2001920c 	.word	0x2001920c
 80037d4:	4000440c 	.word	0x4000440c

080037d8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80037e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	4000440c 	.word	0x4000440c

080037f8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HIF_UART_Init+0xc8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	; (80038c0 <HIF_UART_Init+0xc8>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HIF_UART_Init+0xcc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2b      	ldr	r2, [pc, #172]	; (80038c4 <HIF_UART_Init+0xcc>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HIF_UART_Init+0xd0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003828:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003830:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003832:	4a25      	ldr	r2, [pc, #148]	; (80038c8 <HIF_UART_Init+0xd0>)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003838:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HIF_UART_Init+0xd4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003844:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800384c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HIF_UART_Init+0xd4>)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HIF_UART_Init+0xd8>)
 8003856:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800385a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HIF_UART_Init+0xdc>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003862:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <HIF_UART_Init+0xe0>)
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800386e:	4a1b      	ldr	r2, [pc, #108]	; (80038dc <HIF_UART_Init+0xe4>)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	3301      	adds	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	d302      	bcc.n	800388e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003888:	f640 73ff 	movw	r3, #4095	; 0xfff
 800388c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <HIF_UART_Init+0xe8>)
 800389a:	b29b      	uxth	r3, r3
 800389c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800389e:	4a11      	ldr	r2, [pc, #68]	; (80038e4 <HIF_UART_Init+0xec>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <HIF_UART_Init+0xf0>)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80038aa:	2106      	movs	r1, #6
 80038ac:	2026      	movs	r0, #38	; 0x26
 80038ae:	f7ff feab 	bl	8003608 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80038b2:	2026      	movs	r0, #38	; 0x26
 80038b4:	f7ff fe8a 	bl	80035cc <__NVIC_EnableIRQ>
}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023840 	.word	0x40023840
 80038c4:	40023830 	.word	0x40023830
 80038c8:	40020020 	.word	0x40020020
 80038cc:	40020000 	.word	0x40020000
 80038d0:	4000440c 	.word	0x4000440c
 80038d4:	40004410 	.word	0x40004410
 80038d8:	40004414 	.word	0x40004414
 80038dc:	0501bd00 	.word	0x0501bd00
 80038e0:	40004408 	.word	0x40004408
 80038e4:	20019208 	.word	0x20019208
 80038e8:	2001920c 	.word	0x2001920c

080038ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <_DoInit+0x98>)
 80038f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <_DoInit+0x9c>)
 8003906:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a20      	ldr	r2, [pc, #128]	; (800398c <_DoInit+0xa0>)
 800390c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003914:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a17      	ldr	r2, [pc, #92]	; (8003988 <_DoInit+0x9c>)
 800392c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <_DoInit+0xa4>)
 8003932:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2210      	movs	r2, #16
 8003938:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3307      	adds	r3, #7
 8003950:	4a10      	ldr	r2, [pc, #64]	; (8003994 <_DoInit+0xa8>)
 8003952:	6810      	ldr	r0, [r2, #0]
 8003954:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003956:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <_DoInit+0xac>)
 800395e:	6810      	ldr	r0, [r2, #0]
 8003960:	6018      	str	r0, [r3, #0]
 8003962:	8891      	ldrh	r1, [r2, #4]
 8003964:	7992      	ldrb	r2, [r2, #6]
 8003966:	8099      	strh	r1, [r3, #4]
 8003968:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800396a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003974:	f3bf 8f5f 	dmb	sy
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	2001a780 	.word	0x2001a780
 8003988:	08005ab4 	.word	0x08005ab4
 800398c:	20019210 	.word	0x20019210
 8003990:	20019610 	.word	0x20019610
 8003994:	08005ac0 	.word	0x08005ac0
 8003998:	08005ac4 	.word	0x08005ac4

0800399c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d905      	bls.n	80039cc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	e007      	b.n	80039dc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	1acb      	subs	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3b01      	subs	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	4293      	cmp	r3, r2
 80039e8:	bf28      	it	cs
 80039ea:	4613      	movcs	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	bf28      	it	cs
 80039f6:	4613      	movcs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	6978      	ldr	r0, [r7, #20]
 8003a0a:	f001 ffa1 	bl	8005950 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003a0e:	6a3a      	ldr	r2, [r7, #32]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	4413      	add	r3, r2
 8003a14:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	4413      	add	r3, r2
 8003a2c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d101      	bne.n	8003a3c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a3c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1b2      	bne.n	80039b2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3728      	adds	r7, #40	; 0x28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d911      	bls.n	8003a9e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	6938      	ldr	r0, [r7, #16]
 8003a8a:	f001 ff61 	bl	8005950 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a8e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	441a      	add	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a9c:	e01f      	b.n	8003ade <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6938      	ldr	r0, [r7, #16]
 8003ab2:	f001 ff4d 	bl	8005950 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4413      	add	r3, r2
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4619      	mov	r1, r3
 8003ace:	6938      	ldr	r0, [r7, #16]
 8003ad0:	f001 ff3e 	bl	8005950 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ad4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	60da      	str	r2, [r3, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003ae6:	b480      	push	{r7}
 8003ae8:	b087      	sub	sp, #28
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d808      	bhi.n	8003b14 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad2      	subs	r2, r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e004      	b.n	8003b1e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003b1e:	697b      	ldr	r3, [r7, #20]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08c      	sub	sp, #48	; 0x30
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003b38:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003b46:	f7ff fed1 	bl	80038ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4a37      	ldr	r2, [pc, #220]	; (8003c34 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003b58:	4413      	add	r3, r2
 8003b5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d92b      	bls.n	8003bd0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bf28      	it	cs
 8003b8a:	4613      	movcs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	4413      	add	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	6939      	ldr	r1, [r7, #16]
 8003b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9e:	f001 fed7 	bl	8005950 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4413      	add	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d101      	bne.n	8003bd0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bf28      	it	cs
 8003be0:	4613      	movcs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d019      	beq.n	8003c1e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	4413      	add	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	6939      	ldr	r1, [r7, #16]
 8003bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bfa:	f001 fea9 	bl	8005950 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3730      	adds	r7, #48	; 0x30
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	2001a780 	.word	0x2001a780

08003c38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003c44:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <SEGGER_RTT_ReadNoLock+0x1e>
 8003c52:	f7ff fe4b 	bl	80038ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	3360      	adds	r3, #96	; 0x60
 8003c62:	4a37      	ldr	r2, [pc, #220]	; (8003d40 <SEGGER_RTT_ReadNoLock+0x108>)
 8003c64:	4413      	add	r3, r2
 8003c66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d92b      	bls.n	8003cdc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bf28      	it	cs
 8003c96:	4613      	movcs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003caa:	f001 fe51 	bl	8005950 <memcpy>
    NumBytesRead += NumBytesRem;
 8003cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d101      	bne.n	8003cdc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf28      	it	cs
 8003cec:	4613      	movcs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d019      	beq.n	8003d2a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	4413      	add	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d06:	f001 fe23 	bl	8005950 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4413      	add	r3, r2
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4413      	add	r3, r2
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d34:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3730      	adds	r7, #48	; 0x30
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	2001a780 	.word	0x2001a780

08003d44 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	3360      	adds	r3, #96	; 0x60
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003d62:	4413      	add	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d029      	beq.n	8003dc2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d82e      	bhi.n	8003dd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d013      	beq.n	8003da2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003d7a:	e029      	b.n	8003dd0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d7c:	6978      	ldr	r0, [r7, #20]
 8003d7e:	f7ff feb2 	bl	8003ae6 <_GetAvailWriteSpace>
 8003d82:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d202      	bcs.n	8003d92 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d90:	e021      	b.n	8003dd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	69b9      	ldr	r1, [r7, #24]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff fe5b 	bl	8003a56 <_WriteNoCheck>
    break;
 8003da0:	e019      	b.n	8003dd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003da2:	6978      	ldr	r0, [r7, #20]
 8003da4:	f7ff fe9f 	bl	8003ae6 <_GetAvailWriteSpace>
 8003da8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4293      	cmp	r3, r2
 8003db0:	bf28      	it	cs
 8003db2:	4613      	movcs	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	69b9      	ldr	r1, [r7, #24]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff fe4b 	bl	8003a56 <_WriteNoCheck>
    break;
 8003dc0:	e009      	b.n	8003dd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	69b9      	ldr	r1, [r7, #24]
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7ff fde8 	bl	800399c <_WriteBlocking>
 8003dcc:	61f8      	str	r0, [r7, #28]
    break;
 8003dce:	e002      	b.n	8003dd6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
    break;
 8003dd4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	2001a780 	.word	0x2001a780

08003de4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003dfe:	f7ff fd75 	bl	80038ec <_DoInit>
  SEGGER_RTT_LOCK();
 8003e02:	f3ef 8311 	mrs	r3, BASEPRI
 8003e06:	f04f 0120 	mov.w	r1, #32
 8003e0a:	f381 8811 	msr	BASEPRI, r1
 8003e0e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff ff95 	bl	8003d44 <SEGGER_RTT_WriteDownBufferNoLock>
 8003e1a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003e22:	697b      	ldr	r3, [r7, #20]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2001a780 	.word	0x2001a780

08003e30 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e4c:	f7ff fd4e 	bl	80038ec <_DoInit>
  SEGGER_RTT_LOCK();
 8003e50:	f3ef 8311 	mrs	r3, BASEPRI
 8003e54:	f04f 0120 	mov.w	r1, #32
 8003e58:	f381 8811 	msr	BASEPRI, r1
 8003e5c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e5e:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e60:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e66:	6939      	ldr	r1, [r7, #16]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	3304      	adds	r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	dbeb      	blt.n	8003e66 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e8e:	e000      	b.n	8003e92 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e90:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	da3f      	bge.n	8003f1c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e9c:	6939      	ldr	r1, [r7, #16]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003ec6:	6939      	ldr	r1, [r7, #16]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3320      	adds	r3, #32
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003eda:	6939      	ldr	r1, [r7, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3328      	adds	r3, #40	; 0x28
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003eee:	6939      	ldr	r1, [r7, #16]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f02:	6939      	ldr	r1, [r7, #16]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	332c      	adds	r3, #44	; 0x2c
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f16:	f3bf 8f5f 	dmb	sy
 8003f1a:	e002      	b.n	8003f22 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f28:	69fb      	ldr	r3, [r7, #28]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2001a780 	.word	0x2001a780

08003f38 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003f46:	4b33      	ldr	r3, [pc, #204]	; (8004014 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f54:	f7ff fcca 	bl	80038ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f58:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003f5a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d24d      	bcs.n	8004004 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003f68:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6c:	f04f 0120 	mov.w	r1, #32
 8003f70:	f381 8811 	msr	BASEPRI, r1
 8003f74:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d031      	beq.n	8003fe0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	440b      	add	r3, r1
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f90:	6979      	ldr	r1, [r7, #20]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3364      	adds	r3, #100	; 0x64
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3368      	adds	r3, #104	; 0x68
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3370      	adds	r3, #112	; 0x70
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003fcc:	6979      	ldr	r1, [r7, #20]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	336c      	adds	r3, #108	; 0x6c
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	3374      	adds	r3, #116	; 0x74
 8003ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ff4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e002      	b.n	800400a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004004:	f04f 33ff 	mov.w	r3, #4294967295
 8004008:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800400a:	69fb      	ldr	r3, [r7, #28]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2001a780 	.word	0x2001a780

08004018 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004028:	e002      	b.n	8004030 <_EncodeStr+0x18>
    Len++;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3301      	adds	r3, #1
 800402e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f6      	bne.n	800402a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d901      	bls.n	8004048 <_EncodeStr+0x30>
    Len = Limit;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2bfe      	cmp	r3, #254	; 0xfe
 800404c:	d806      	bhi.n	800405c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	60fa      	str	r2, [r7, #12]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e011      	b.n	8004080 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	60fa      	str	r2, [r7, #12]
 8004062:	22ff      	movs	r2, #255	; 0xff
 8004064:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	0a19      	lsrs	r1, r3, #8
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	b2ca      	uxtb	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004084:	e00a      	b.n	800409c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	1c53      	adds	r3, r2, #1
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	60f9      	str	r1, [r7, #12]
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	701a      	strb	r2, [r3, #0]
    n++;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	3301      	adds	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3f0      	bcc.n	8004086 <_EncodeStr+0x6e>
  }
  return pPayload;
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <_HandleIncomingPacket+0xe0>)
 80040d4:	7e1b      	ldrb	r3, [r3, #24]
 80040d6:	4618      	mov	r0, r3
 80040d8:	1cfb      	adds	r3, r7, #3
 80040da:	2201      	movs	r2, #1
 80040dc:	4619      	mov	r1, r3
 80040de:	f7ff fdab 	bl	8003c38 <SEGGER_RTT_ReadNoLock>
 80040e2:	4603      	mov	r3, r0
 80040e4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dd54      	ble.n	8004196 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b80      	cmp	r3, #128	; 0x80
 80040f0:	d032      	beq.n	8004158 <_HandleIncomingPacket+0x8c>
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	dc42      	bgt.n	800417c <_HandleIncomingPacket+0xb0>
 80040f6:	2b07      	cmp	r3, #7
 80040f8:	dc16      	bgt.n	8004128 <_HandleIncomingPacket+0x5c>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dd3e      	ble.n	800417c <_HandleIncomingPacket+0xb0>
 80040fe:	3b01      	subs	r3, #1
 8004100:	2b06      	cmp	r3, #6
 8004102:	d83b      	bhi.n	800417c <_HandleIncomingPacket+0xb0>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <_HandleIncomingPacket+0x40>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800412f 	.word	0x0800412f
 8004110:	08004135 	.word	0x08004135
 8004114:	0800413b 	.word	0x0800413b
 8004118:	08004141 	.word	0x08004141
 800411c:	08004147 	.word	0x08004147
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004153 	.word	0x08004153
 8004128:	2b7f      	cmp	r3, #127	; 0x7f
 800412a:	d036      	beq.n	800419a <_HandleIncomingPacket+0xce>
 800412c:	e026      	b.n	800417c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800412e:	f000 fe3d 	bl	8004dac <SEGGER_SYSVIEW_Start>
      break;
 8004132:	e037      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004134:	f000 fef6 	bl	8004f24 <SEGGER_SYSVIEW_Stop>
      break;
 8004138:	e034      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800413a:	f001 f8cf 	bl	80052dc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800413e:	e031      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004140:	f001 f894 	bl	800526c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004144:	e02e      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004146:	f000 ff13 	bl	8004f70 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800414a:	e02b      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800414c:	f001 faf2 	bl	8005734 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004150:	e028      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004152:	f001 fad1 	bl	80056f8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004156:	e025      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <_HandleIncomingPacket+0xe0>)
 800415a:	7e1b      	ldrb	r3, [r3, #24]
 800415c:	4618      	mov	r0, r3
 800415e:	1cfb      	adds	r3, r7, #3
 8004160:	2201      	movs	r2, #1
 8004162:	4619      	mov	r1, r3
 8004164:	f7ff fd68 	bl	8003c38 <SEGGER_RTT_ReadNoLock>
 8004168:	4603      	mov	r3, r0
 800416a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	dd15      	ble.n	800419e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fa3f 	bl	80055f8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800417a:	e010      	b.n	800419e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	b25b      	sxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	da0e      	bge.n	80041a2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <_HandleIncomingPacket+0xe0>)
 8004186:	7e1b      	ldrb	r3, [r3, #24]
 8004188:	4618      	mov	r0, r3
 800418a:	1cfb      	adds	r3, r7, #3
 800418c:	2201      	movs	r2, #1
 800418e:	4619      	mov	r1, r3
 8004190:	f7ff fd52 	bl	8003c38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004194:	e005      	b.n	80041a2 <_HandleIncomingPacket+0xd6>
    }
  }
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <_HandleIncomingPacket+0xd8>
      break;
 80041a2:	bf00      	nop
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2001a628 	.word	0x2001a628

080041b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80041b6:	2301      	movs	r3, #1
 80041b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c4:	4b32      	ldr	r3, [pc, #200]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ca:	e00b      	b.n	80041e4 <_TrySendOverflowPacket+0x34>
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	2b7f      	cmp	r3, #127	; 0x7f
 80041e8:	d8f0      	bhi.n	80041cc <_TrySendOverflowPacket+0x1c>
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041fa:	4b26      	ldr	r3, [pc, #152]	; (8004294 <_TrySendOverflowPacket+0xe4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004200:	4b23      	ldr	r3, [pc, #140]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	e00b      	b.n	800422c <_TrySendOverflowPacket+0x7c>
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1c59      	adds	r1, r3, #1
 800421c:	6279      	str	r1, [r7, #36]	; 0x24
 800421e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	09db      	lsrs	r3, r3, #7
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2b7f      	cmp	r3, #127	; 0x7f
 8004230:	d8f0      	bhi.n	8004214 <_TrySendOverflowPacket+0x64>
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	627a      	str	r2, [r7, #36]	; 0x24
 8004238:	6a3a      	ldr	r2, [r7, #32]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004242:	4b13      	ldr	r3, [pc, #76]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	4618      	mov	r0, r3
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	461a      	mov	r2, r3
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	4619      	mov	r1, r3
 8004254:	f7fb ffbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004258:	4603      	mov	r3, r0
 800425a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800425c:	f7ff fabc 	bl	80037d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	3b01      	subs	r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e004      	b.n	8004284 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <_TrySendOverflowPacket+0xe0>)
 8004282:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004284:	693b      	ldr	r3, [r7, #16]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	2001a628 	.word	0x2001a628
 8004294:	e0001004 	.word	0xe0001004

08004298 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042a4:	4b6d      	ldr	r3, [pc, #436]	; (800445c <_SendPacket+0x1c4>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d010      	beq.n	80042ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042ac:	4b6b      	ldr	r3, [pc, #428]	; (800445c <_SendPacket+0x1c4>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a5 	beq.w	8004400 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80042b6:	4b69      	ldr	r3, [pc, #420]	; (800445c <_SendPacket+0x1c4>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d109      	bne.n	80042d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80042be:	f7ff ff77 	bl	80041b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80042c2:	4b66      	ldr	r3, [pc, #408]	; (800445c <_SendPacket+0x1c4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	f040 809c 	bne.w	8004404 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80042cc:	e001      	b.n	80042d2 <_SendPacket+0x3a>
    goto Send;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <_SendPacket+0x3c>
Send:
 80042d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b1f      	cmp	r3, #31
 80042d8:	d809      	bhi.n	80042ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042da:	4b60      	ldr	r3, [pc, #384]	; (800445c <_SendPacket+0x1c4>)
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 808d 	bne.w	8004408 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b17      	cmp	r3, #23
 80042f2:	d807      	bhi.n	8004304 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e03d      	b.n	8004380 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b7f      	cmp	r3, #127	; 0x7f
 8004310:	d912      	bls.n	8004338 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	09da      	lsrs	r2, r3, #7
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	3a01      	subs	r2, #1
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e006      	b.n	8004346 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3b01      	subs	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b7f      	cmp	r3, #127	; 0x7f
 800434a:	d912      	bls.n	8004372 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	09da      	lsrs	r2, r3, #7
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	3a01      	subs	r2, #1
 8004364:	60fa      	str	r2, [r7, #12]
 8004366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e006      	b.n	8004380 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b01      	subs	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004380:	4b37      	ldr	r3, [pc, #220]	; (8004460 <_SendPacket+0x1c8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004386:	4b35      	ldr	r3, [pc, #212]	; (800445c <_SendPacket+0x1c4>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	e00b      	b.n	80043b2 <_SendPacket+0x11a>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	6279      	str	r1, [r7, #36]	; 0x24
 80043a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	2b7f      	cmp	r3, #127	; 0x7f
 80043b6:	d8f0      	bhi.n	800439a <_SendPacket+0x102>
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	627a      	str	r2, [r7, #36]	; 0x24
 80043be:	6a3a      	ldr	r2, [r7, #32]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <_SendPacket+0x1c4>)
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	4618      	mov	r0, r3
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	f7fb fefa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043dc:	4603      	mov	r3, r0
 80043de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80043e0:	f7ff f9fa 	bl	80037d8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043ea:	4a1c      	ldr	r2, [pc, #112]	; (800445c <_SendPacket+0x1c4>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e00b      	b.n	800440a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <_SendPacket+0x1c4>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <_SendPacket+0x1c4>)
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e004      	b.n	800440a <_SendPacket+0x172>
    goto SendDone;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <_SendPacket+0x172>
      goto SendDone;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <_SendPacket+0x172>
      goto SendDone;
 8004408:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800440a:	4b14      	ldr	r3, [pc, #80]	; (800445c <_SendPacket+0x1c4>)
 800440c:	7e1b      	ldrb	r3, [r3, #24]
 800440e:	4619      	mov	r1, r3
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <_SendPacket+0x1cc>)
 8004412:	460b      	mov	r3, r1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	440b      	add	r3, r1
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	336c      	adds	r3, #108	; 0x6c
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <_SendPacket+0x1c4>)
 8004422:	7e1b      	ldrb	r3, [r3, #24]
 8004424:	4618      	mov	r0, r3
 8004426:	490f      	ldr	r1, [pc, #60]	; (8004464 <_SendPacket+0x1cc>)
 8004428:	4603      	mov	r3, r0
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4403      	add	r3, r0
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	3370      	adds	r3, #112	; 0x70
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d00b      	beq.n	8004452 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <_SendPacket+0x1c4>)
 800443c:	789b      	ldrb	r3, [r3, #2]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d107      	bne.n	8004452 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <_SendPacket+0x1c4>)
 8004444:	2201      	movs	r2, #1
 8004446:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004448:	f7ff fe40 	bl	80040cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <_SendPacket+0x1c4>)
 800444e:	2200      	movs	r2, #0
 8004450:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004452:	bf00      	nop
 8004454:	3728      	adds	r7, #40	; 0x28
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2001a628 	.word	0x2001a628
 8004460:	e0001004 	.word	0xe0001004
 8004464:	2001a780 	.word	0x2001a780

08004468 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3301      	adds	r3, #1
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d80a      	bhi.n	8004498 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6051      	str	r1, [r2, #4]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d15a      	bne.n	8004556 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	e00b      	b.n	80044da <_StoreChar+0x72>
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	6279      	str	r1, [r7, #36]	; 0x24
 80044cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	09db      	lsrs	r3, r3, #7
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	2b7f      	cmp	r3, #127	; 0x7f
 80044de:	d8f0      	bhi.n	80044c2 <_StoreChar+0x5a>
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	627a      	str	r2, [r7, #36]	; 0x24
 80044e6:	6a3a      	ldr	r2, [r7, #32]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e00b      	b.n	8004512 <_StoreChar+0xaa>
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1c59      	adds	r1, r3, #1
 8004502:	61f9      	str	r1, [r7, #28]
 8004504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	09db      	lsrs	r3, r3, #7
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b7f      	cmp	r3, #127	; 0x7f
 8004516:	d8f0      	bhi.n	80044fa <_StoreChar+0x92>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	221a      	movs	r2, #26
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff feb1 	bl	8004298 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fdb9 	bl	80040b2 <_PreparePacket>
 8004540:	4602      	mov	r2, r0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
  }
}
 8004556:	bf00      	nop
 8004558:	3728      	adds	r7, #40	; 0x28
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004572:	2301      	movs	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004576:	2301      	movs	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800457a:	e007      	b.n	800458c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	623b      	str	r3, [r7, #32]
    Width++;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3301      	adds	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800458c:	6a3a      	ldr	r2, [r7, #32]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d2f3      	bcs.n	800457c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d901      	bls.n	80045a0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11f      	bne.n	80045ea <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01c      	beq.n	80045ea <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <_PrintUnsigned+0x66>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <_PrintUnsigned+0x66>
        c = '0';
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	76fb      	strb	r3, [r7, #27]
 80045c4:	e001      	b.n	80045ca <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80045c6:	2320      	movs	r3, #32
 80045c8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045ca:	e007      	b.n	80045dc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	3b01      	subs	r3, #1
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80045d2:	7efb      	ldrb	r3, [r7, #27]
 80045d4:	4619      	mov	r1, r3
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f7ff ff46 	bl	8004468 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <_PrintUnsigned+0x8a>
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d3f0      	bcc.n	80045cc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d903      	bls.n	80045f8 <_PrintUnsigned+0x98>
      NumDigits--;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	e009      	b.n	800460c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d200      	bcs.n	800460c <_PrintUnsigned+0xac>
        break;
 800460a:	e005      	b.n	8004618 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	fb02 f303 	mul.w	r3, r2, r3
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004616:	e7e8      	b.n	80045ea <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <_PrintUnsigned+0x128>)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff14 	bl	8004468 <_StoreChar>
    Digit /= Base;
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e3      	bne.n	8004618 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d011      	beq.n	800467e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004660:	e006      	b.n	8004670 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	3b01      	subs	r3, #1
 8004666:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004668:	2120      	movs	r1, #32
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fefc 	bl	8004468 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <_PrintUnsigned+0x11e>
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	429a      	cmp	r2, r3
 800467c:	d3f1      	bcc.n	8004662 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800467e:	bf00      	nop
 8004680:	3728      	adds	r7, #40	; 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	08005b04 	.word	0x08005b04

0800468c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	bfb8      	it	lt
 80046a0:	425b      	neglt	r3, r3
 80046a2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046a8:	e007      	b.n	80046ba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
    Width++;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3301      	adds	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	daf3      	bge.n	80046aa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d901      	bls.n	80046ce <_PrintInt+0x42>
    Width = NumDigits;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <_PrintInt+0x5e>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db04      	blt.n	80046e4 <_PrintInt+0x58>
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <_PrintInt+0x5e>
    FieldWidth--;
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <_PrintInt+0x6e>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <_PrintInt+0x9c>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d111      	bne.n	8004728 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800470a:	e006      	b.n	800471a <_PrintInt+0x8e>
        FieldWidth--;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	3b01      	subs	r3, #1
 8004710:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004712:	2120      	movs	r1, #32
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fea7 	bl	8004468 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <_PrintInt+0x9c>
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3f1      	bcc.n	800470c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da07      	bge.n	800473e <_PrintInt+0xb2>
    v = -v;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	425b      	negs	r3, r3
 8004732:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004734:	212d      	movs	r1, #45	; 0x2d
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff fe96 	bl	8004468 <_StoreChar>
 800473c:	e008      	b.n	8004750 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004748:	212b      	movs	r1, #43	; 0x2b
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fe8c 	bl	8004468 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <_PrintInt+0x102>
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d114      	bne.n	800478e <_PrintInt+0x102>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d111      	bne.n	800478e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00e      	beq.n	800478e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004770:	e006      	b.n	8004780 <_PrintInt+0xf4>
        FieldWidth--;
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	3b01      	subs	r3, #1
 8004776:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004778:	2130      	movs	r1, #48	; 0x30
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f7ff fe74 	bl	8004468 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <_PrintInt+0x102>
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3f1      	bcc.n	8004772 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fedf 	bl	8004560 <_PrintUnsigned>
}
 80047a2:	bf00      	nop
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b098      	sub	sp, #96	; 0x60
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	f04f 0120 	mov.w	r1, #32
 80047c0:	f381 8811 	msr	BASEPRI, r1
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
 80047c6:	48b7      	ldr	r0, [pc, #732]	; (8004aa4 <_VPrintTarget+0x2f8>)
 80047c8:	f7ff fc73 	bl	80040b2 <_PreparePacket>
 80047cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80047ce:	4bb5      	ldr	r3, [pc, #724]	; (8004aa4 <_VPrintTarget+0x2f8>)
 80047d0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80047f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8183 	beq.w	8004b02 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80047fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004800:	2b25      	cmp	r3, #37	; 0x25
 8004802:	f040 8170 	bne.w	8004ae6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004806:	2300      	movs	r3, #0
 8004808:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800480a:	2301      	movs	r3, #1
 800480c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800481a:	3b23      	subs	r3, #35	; 0x23
 800481c:	2b0d      	cmp	r3, #13
 800481e:	d83f      	bhi.n	80048a0 <_VPrintTarget+0xf4>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <_VPrintTarget+0x7c>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004891 	.word	0x08004891
 800482c:	080048a1 	.word	0x080048a1
 8004830:	080048a1 	.word	0x080048a1
 8004834:	080048a1 	.word	0x080048a1
 8004838:	080048a1 	.word	0x080048a1
 800483c:	080048a1 	.word	0x080048a1
 8004840:	080048a1 	.word	0x080048a1
 8004844:	080048a1 	.word	0x080048a1
 8004848:	08004881 	.word	0x08004881
 800484c:	080048a1 	.word	0x080048a1
 8004850:	08004861 	.word	0x08004861
 8004854:	080048a1 	.word	0x080048a1
 8004858:	080048a1 	.word	0x080048a1
 800485c:	08004871 	.word	0x08004871
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3301      	adds	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e01a      	b.n	80048a6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	f043 0302 	orr.w	r3, r3, #2
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e012      	b.n	80048a6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004882:	f043 0304 	orr.w	r3, r3, #4
 8004886:	64bb      	str	r3, [r7, #72]	; 0x48
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e00a      	b.n	80048a6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004892:	f043 0308 	orr.w	r3, r3, #8
 8004896:	64bb      	str	r3, [r7, #72]	; 0x48
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e002      	b.n	80048a6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80048a0:	2300      	movs	r3, #0
 80048a2:	653b      	str	r3, [r7, #80]	; 0x50
 80048a4:	bf00      	nop
        }
      } while (v);
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1b0      	bne.n	800480e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80048ac:	2300      	movs	r3, #0
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80048b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048bc:	2b2f      	cmp	r3, #47	; 0x2f
 80048be:	d912      	bls.n	80048e6 <_VPrintTarget+0x13a>
 80048c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048c4:	2b39      	cmp	r3, #57	; 0x39
 80048c6:	d80e      	bhi.n	80048e6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80048ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	461a      	mov	r2, r3
 80048da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048de:	4413      	add	r3, r2
 80048e0:	3b30      	subs	r3, #48	; 0x30
 80048e2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80048e4:	e7e4      	b.n	80048b0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80048e6:	2300      	movs	r3, #0
 80048e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80048f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048f6:	2b2e      	cmp	r3, #46	; 0x2e
 80048f8:	d11d      	bne.n	8004936 <_VPrintTarget+0x18a>
        sFormat++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800490c:	2b2f      	cmp	r3, #47	; 0x2f
 800490e:	d912      	bls.n	8004936 <_VPrintTarget+0x18a>
 8004910:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004914:	2b39      	cmp	r3, #57	; 0x39
 8004916:	d80e      	bhi.n	8004936 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800491e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	461a      	mov	r2, r3
 800492a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800492e:	4413      	add	r3, r2
 8004930:	3b30      	subs	r3, #48	; 0x30
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004934:	e7e4      	b.n	8004900 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800493e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004942:	2b6c      	cmp	r3, #108	; 0x6c
 8004944:	d003      	beq.n	800494e <_VPrintTarget+0x1a2>
 8004946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800494a:	2b68      	cmp	r3, #104	; 0x68
 800494c:	d107      	bne.n	800495e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800495c:	e7ef      	b.n	800493e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800495e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004962:	2b25      	cmp	r3, #37	; 0x25
 8004964:	f000 80b3 	beq.w	8004ace <_VPrintTarget+0x322>
 8004968:	2b25      	cmp	r3, #37	; 0x25
 800496a:	f2c0 80b7 	blt.w	8004adc <_VPrintTarget+0x330>
 800496e:	2b78      	cmp	r3, #120	; 0x78
 8004970:	f300 80b4 	bgt.w	8004adc <_VPrintTarget+0x330>
 8004974:	2b58      	cmp	r3, #88	; 0x58
 8004976:	f2c0 80b1 	blt.w	8004adc <_VPrintTarget+0x330>
 800497a:	3b58      	subs	r3, #88	; 0x58
 800497c:	2b20      	cmp	r3, #32
 800497e:	f200 80ad 	bhi.w	8004adc <_VPrintTarget+0x330>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <_VPrintTarget+0x1dc>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	08004a7f 	.word	0x08004a7f
 800498c:	08004add 	.word	0x08004add
 8004990:	08004add 	.word	0x08004add
 8004994:	08004add 	.word	0x08004add
 8004998:	08004add 	.word	0x08004add
 800499c:	08004add 	.word	0x08004add
 80049a0:	08004add 	.word	0x08004add
 80049a4:	08004add 	.word	0x08004add
 80049a8:	08004add 	.word	0x08004add
 80049ac:	08004add 	.word	0x08004add
 80049b0:	08004add 	.word	0x08004add
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004add 	.word	0x08004add
 80049c0:	08004add 	.word	0x08004add
 80049c4:	08004add 	.word	0x08004add
 80049c8:	08004add 	.word	0x08004add
 80049cc:	08004add 	.word	0x08004add
 80049d0:	08004add 	.word	0x08004add
 80049d4:	08004add 	.word	0x08004add
 80049d8:	08004add 	.word	0x08004add
 80049dc:	08004add 	.word	0x08004add
 80049e0:	08004add 	.word	0x08004add
 80049e4:	08004add 	.word	0x08004add
 80049e8:	08004aa9 	.word	0x08004aa9
 80049ec:	08004add 	.word	0x08004add
 80049f0:	08004add 	.word	0x08004add
 80049f4:	08004add 	.word	0x08004add
 80049f8:	08004add 	.word	0x08004add
 80049fc:	08004a59 	.word	0x08004a59
 8004a00:	08004add 	.word	0x08004add
 8004a04:	08004add 	.word	0x08004add
 8004a08:	08004a7f 	.word	0x08004a7f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	1d19      	adds	r1, r3, #4
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004a20:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fd1c 	bl	8004468 <_StoreChar>
        break;
 8004a30:	e055      	b.n	8004ade <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6011      	str	r1, [r2, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a40:	f107 0014 	add.w	r0, r7, #20
 8004a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a4e:	220a      	movs	r2, #10
 8004a50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a52:	f7ff fe1b 	bl	800468c <_PrintInt>
        break;
 8004a56:	e042      	b.n	8004ade <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1d19      	adds	r1, r3, #4
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6011      	str	r1, [r2, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a68:	f107 0014 	add.w	r0, r7, #20
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a76:	220a      	movs	r2, #10
 8004a78:	f7ff fd72 	bl	8004560 <_PrintUnsigned>
        break;
 8004a7c:	e02f      	b.n	8004ade <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	1d19      	adds	r1, r3, #4
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6011      	str	r1, [r2, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a8e:	f107 0014 	add.w	r0, r7, #20
 8004a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a94:	9301      	str	r3, [sp, #4]
 8004a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2210      	movs	r2, #16
 8004a9e:	f7ff fd5f 	bl	8004560 <_PrintUnsigned>
        break;
 8004aa2:	e01c      	b.n	8004ade <_VPrintTarget+0x332>
 8004aa4:	2001a658 	.word	0x2001a658
      case 'p':
        v = va_arg(*pParamList, int);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6011      	str	r1, [r2, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004ab6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ab8:	f107 0014 	add.w	r0, r7, #20
 8004abc:	2300      	movs	r3, #0
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	f7ff fd4a 	bl	8004560 <_PrintUnsigned>
        break;
 8004acc:	e007      	b.n	8004ade <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	2125      	movs	r1, #37	; 0x25
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fcc7 	bl	8004468 <_StoreChar>
        break;
 8004ada:	e000      	b.n	8004ade <_VPrintTarget+0x332>
      default:
        break;
 8004adc:	bf00      	nop
      }
      sFormat++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	e007      	b.n	8004af6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004ae6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004aea:	f107 0314 	add.w	r3, r7, #20
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fcb9 	bl	8004468 <_StoreChar>
    }
  } while (*sFormat);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f47f ae72 	bne.w	80047e4 <_VPrintTarget+0x38>
 8004b00:	e000      	b.n	8004b04 <_VPrintTarget+0x358>
      break;
 8004b02:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d041      	beq.n	8004b8e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1a:	e00b      	b.n	8004b34 <_VPrintTarget+0x388>
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	6439      	str	r1, [r7, #64]	; 0x40
 8004b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	09db      	lsrs	r3, r3, #7
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	2b7f      	cmp	r3, #127	; 0x7f
 8004b38:	d8f0      	bhi.n	8004b1c <_VPrintTarget+0x370>
 8004b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b48:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	e00b      	b.n	8004b6c <_VPrintTarget+0x3c0>
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	09db      	lsrs	r3, r3, #7
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b70:	d8f0      	bhi.n	8004b54 <_VPrintTarget+0x3a8>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	69b9      	ldr	r1, [r7, #24]
 8004b86:	221a      	movs	r2, #26
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fb85 	bl	8004298 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004b94:	bf00      	nop
 8004b96:	3758      	adds	r7, #88	; 0x58
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004baa:	2300      	movs	r3, #0
 8004bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bb0:	4917      	ldr	r1, [pc, #92]	; (8004c10 <SEGGER_SYSVIEW_Init+0x74>)
 8004bb2:	4818      	ldr	r0, [pc, #96]	; (8004c14 <SEGGER_SYSVIEW_Init+0x78>)
 8004bb4:	f7ff f93c 	bl	8003e30 <SEGGER_RTT_AllocUpBuffer>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bbe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004bc0:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc2:	785a      	ldrb	r2, [r3, #1]
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bc6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bca:	7e1b      	ldrb	r3, [r3, #24]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	4a11      	ldr	r2, [pc, #68]	; (8004c1c <SEGGER_SYSVIEW_Init+0x80>)
 8004bd6:	490f      	ldr	r1, [pc, #60]	; (8004c14 <SEGGER_SYSVIEW_Init+0x78>)
 8004bd8:	f7ff f9ae 	bl	8003f38 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <SEGGER_SYSVIEW_Init+0x84>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004be8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004bf6:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <SEGGER_SYSVIEW_Init+0x7c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20019620 	.word	0x20019620
 8004c14:	08005acc 	.word	0x08005acc
 8004c18:	2001a628 	.word	0x2001a628
 8004c1c:	2001a620 	.word	0x2001a620
 8004c20:	e0001004 	.word	0xe0001004

08004c24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6113      	str	r3, [r2, #16]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	2001a628 	.word	0x2001a628

08004c44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c50:	f04f 0120 	mov.w	r1, #32
 8004c54:	f381 8811 	msr	BASEPRI, r1
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	4808      	ldr	r0, [pc, #32]	; (8004c7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c5c:	f7ff fa29 	bl	80040b2 <_PreparePacket>
 8004c60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68b8      	ldr	r0, [r7, #8]
 8004c68:	f7ff fb16 	bl	8004298 <_SendPacket>
  RECORD_END();
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f383 8811 	msr	BASEPRI, r3
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2001a658 	.word	0x2001a658

08004c80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8e:	f04f 0120 	mov.w	r1, #32
 8004c92:	f381 8811 	msr	BASEPRI, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	4816      	ldr	r0, [pc, #88]	; (8004cf4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c9a:	f7ff fa0a 	bl	80040b2 <_PreparePacket>
 8004c9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	61bb      	str	r3, [r7, #24]
 8004cac:	e00b      	b.n	8004cc6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1c59      	adds	r1, r3, #1
 8004cb6:	61f9      	str	r1, [r7, #28]
 8004cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	09db      	lsrs	r3, r3, #7
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cca:	d8f0      	bhi.n	8004cae <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	6938      	ldr	r0, [r7, #16]
 8004ce2:	f7ff fad9 	bl	8004298 <_SendPacket>
  RECORD_END();
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f383 8811 	msr	BASEPRI, r3
}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	2001a658 	.word	0x2001a658

08004cf8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	; 0x30
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d04:	f3ef 8311 	mrs	r3, BASEPRI
 8004d08:	f04f 0120 	mov.w	r1, #32
 8004d0c:	f381 8811 	msr	BASEPRI, r1
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	4825      	ldr	r0, [pc, #148]	; (8004da8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d14:	f7ff f9cd 	bl	80040b2 <_PreparePacket>
 8004d18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d26:	e00b      	b.n	8004d40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	09db      	lsrs	r3, r3, #7
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b7f      	cmp	r3, #127	; 0x7f
 8004d44:	d8f0      	bhi.n	8004d28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	623b      	str	r3, [r7, #32]
 8004d5e:	e00b      	b.n	8004d78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	6279      	str	r1, [r7, #36]	; 0x24
 8004d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	09db      	lsrs	r3, r3, #7
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7c:	d8f0      	bhi.n	8004d60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	627a      	str	r2, [r7, #36]	; 0x24
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f7ff fa80 	bl	8004298 <_SendPacket>
  RECORD_END();
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
}
 8004d9e:	bf00      	nop
 8004da0:	3730      	adds	r7, #48	; 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2001a658 	.word	0x2001a658

08004dac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004db2:	4b59      	ldr	r3, [pc, #356]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004db8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dbc:	f04f 0120 	mov.w	r1, #32
 8004dc0:	f381 8811 	msr	BASEPRI, r1
 8004dc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004dc6:	4b54      	ldr	r3, [pc, #336]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	220a      	movs	r2, #10
 8004dcc:	4953      	ldr	r1, [pc, #332]	; (8004f1c <SEGGER_SYSVIEW_Start+0x170>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb f9fe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004dda:	f7fe fcfd 	bl	80037d8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004dde:	200a      	movs	r0, #10
 8004de0:	f7ff ff30 	bl	8004c44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004de4:	f3ef 8311 	mrs	r3, BASEPRI
 8004de8:	f04f 0120 	mov.w	r1, #32
 8004dec:	f381 8811 	msr	BASEPRI, r1
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	484b      	ldr	r0, [pc, #300]	; (8004f20 <SEGGER_SYSVIEW_Start+0x174>)
 8004df4:	f7ff f95d 	bl	80040b2 <_PreparePacket>
 8004df8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e02:	4b45      	ldr	r3, [pc, #276]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_Start+0x76>
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	2b7f      	cmp	r3, #127	; 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_Start+0x5e>
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e36:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	e00b      	b.n	8004e5c <SEGGER_SYSVIEW_Start+0xb0>
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d8f0      	bhi.n	8004e44 <SEGGER_SYSVIEW_Start+0x98>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	627a      	str	r2, [r7, #36]	; 0x24
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	e00b      	b.n	8004e96 <SEGGER_SYSVIEW_Start+0xea>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	1c59      	adds	r1, r3, #1
 8004e86:	61f9      	str	r1, [r7, #28]
 8004e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	09db      	lsrs	r3, r3, #7
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9a:	d8f0      	bhi.n	8004e7e <SEGGER_SYSVIEW_Start+0xd2>
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	e00b      	b.n	8004ece <SEGGER_SYSVIEW_Start+0x122>
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	1c59      	adds	r1, r3, #1
 8004ebe:	6179      	str	r1, [r7, #20]
 8004ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	09db      	lsrs	r3, r3, #7
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed2:	d8f0      	bhi.n	8004eb6 <SEGGER_SYSVIEW_Start+0x10a>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	617a      	str	r2, [r7, #20]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ee4:	2218      	movs	r2, #24
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff f9d5 	bl	8004298 <_SendPacket>
      RECORD_END();
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <SEGGER_SYSVIEW_Start+0x16c>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004f02:	f000 f9eb 	bl	80052dc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004f06:	f000 f9b1 	bl	800526c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004f0a:	f000 fc13 	bl	8005734 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004f0e:	bf00      	nop
 8004f10:	3730      	adds	r7, #48	; 0x30
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2001a628 	.word	0x2001a628
 8004f1c:	08005af8 	.word	0x08005af8
 8004f20:	2001a658 	.word	0x2001a658

08004f24 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2e:	f04f 0120 	mov.w	r1, #32
 8004f32:	f381 8811 	msr	BASEPRI, r1
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	480b      	ldr	r0, [pc, #44]	; (8004f68 <SEGGER_SYSVIEW_Stop+0x44>)
 8004f3a:	f7ff f8ba 	bl	80040b2 <_PreparePacket>
 8004f3e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <SEGGER_SYSVIEW_Stop+0x48>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004f48:	220b      	movs	r2, #11
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6838      	ldr	r0, [r7, #0]
 8004f4e:	f7ff f9a3 	bl	8004298 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <SEGGER_SYSVIEW_Stop+0x48>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2001a658 	.word	0x2001a658
 8004f6c:	2001a628 	.word	0x2001a628

08004f70 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f76:	f3ef 8311 	mrs	r3, BASEPRI
 8004f7a:	f04f 0120 	mov.w	r1, #32
 8004f7e:	f381 8811 	msr	BASEPRI, r1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	4845      	ldr	r0, [pc, #276]	; (800509c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f86:	f7ff f894 	bl	80040b2 <_PreparePacket>
 8004f8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f94:	4b42      	ldr	r3, [pc, #264]	; (80050a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9a:	e00b      	b.n	8004fb4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	e00b      	b.n	8004fee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	1c59      	adds	r1, r3, #1
 8004fde:	6279      	str	r1, [r7, #36]	; 0x24
 8004fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	09db      	lsrs	r3, r3, #7
 8004fec:	623b      	str	r3, [r7, #32]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff2:	d8f0      	bhi.n	8004fd6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	627a      	str	r2, [r7, #36]	; 0x24
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	4b25      	ldr	r3, [pc, #148]	; (80050a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	e00b      	b.n	8005028 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	61f9      	str	r1, [r7, #28]
 800501a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	09db      	lsrs	r3, r3, #7
 8005026:	61bb      	str	r3, [r7, #24]
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b7f      	cmp	r3, #127	; 0x7f
 800502c:	d8f0      	bhi.n	8005010 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	61fa      	str	r2, [r7, #28]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	e00b      	b.n	8005060 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	6179      	str	r1, [r7, #20]
 8005052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	09db      	lsrs	r3, r3, #7
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b7f      	cmp	r3, #127	; 0x7f
 8005064:	d8f0      	bhi.n	8005048 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	617a      	str	r2, [r7, #20]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005076:	2218      	movs	r2, #24
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	68b8      	ldr	r0, [r7, #8]
 800507c:	f7ff f90c 	bl	8004298 <_SendPacket>
  RECORD_END();
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800508e:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	4798      	blx	r3
  }
}
 8005094:	bf00      	nop
 8005096:	3730      	adds	r7, #48	; 0x30
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	2001a658 	.word	0x2001a658
 80050a0:	2001a628 	.word	0x2001a628

080050a4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b092      	sub	sp, #72	; 0x48
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80050ac:	f3ef 8311 	mrs	r3, BASEPRI
 80050b0:	f04f 0120 	mov.w	r1, #32
 80050b4:	f381 8811 	msr	BASEPRI, r1
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	486a      	ldr	r0, [pc, #424]	; (8005264 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80050bc:	f7fe fff9 	bl	80040b2 <_PreparePacket>
 80050c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b66      	ldr	r3, [pc, #408]	; (8005268 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	643b      	str	r3, [r7, #64]	; 0x40
 80050d6:	e00b      	b.n	80050f0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050de:	1c59      	adds	r1, r3, #1
 80050e0:	6479      	str	r1, [r7, #68]	; 0x44
 80050e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ec:	09db      	lsrs	r3, r3, #7
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2b7f      	cmp	r3, #127	; 0x7f
 80050f4:	d8f0      	bhi.n	80050d8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	647a      	str	r2, [r7, #68]	; 0x44
 80050fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005110:	e00b      	b.n	800512a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800511c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d8f0      	bhi.n	8005112 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800513e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	4619      	mov	r1, r3
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7fe ff65 	bl	8004018 <_EncodeStr>
 800514e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005150:	2209      	movs	r2, #9
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	6938      	ldr	r0, [r7, #16]
 8005156:	f7ff f89f 	bl	8004298 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	633b      	str	r3, [r7, #48]	; 0x30
 800516e:	e00b      	b.n	8005188 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	b2da      	uxtb	r2, r3
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	6379      	str	r1, [r7, #52]	; 0x34
 800517a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	09db      	lsrs	r3, r3, #7
 8005186:	633b      	str	r3, [r7, #48]	; 0x30
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	2b7f      	cmp	r3, #127	; 0x7f
 800518c:	d8f0      	bhi.n	8005170 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	637a      	str	r2, [r7, #52]	; 0x34
 8005194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a8:	e00b      	b.n	80051c2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	09db      	lsrs	r3, r3, #7
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b7f      	cmp	r3, #127	; 0x7f
 80051c6:	d8f0      	bhi.n	80051aa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	e00b      	b.n	80051fc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	6279      	str	r1, [r7, #36]	; 0x24
 80051ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005200:	d8f0      	bhi.n	80051e4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	627a      	str	r2, [r7, #36]	; 0x24
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e00b      	b.n	8005234 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	61f9      	str	r1, [r7, #28]
 8005226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	09db      	lsrs	r3, r3, #7
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b7f      	cmp	r3, #127	; 0x7f
 8005238:	d8f0      	bhi.n	800521c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	61fa      	str	r2, [r7, #28]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800524a:	2215      	movs	r2, #21
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	6938      	ldr	r0, [r7, #16]
 8005250:	f7ff f822 	bl	8004298 <_SendPacket>
  RECORD_END();
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f383 8811 	msr	BASEPRI, r3
}
 800525a:	bf00      	nop
 800525c:	3748      	adds	r7, #72	; 0x48
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	2001a658 	.word	0x2001a658
 8005268:	2001a628 	.word	0x2001a628

0800526c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4798      	blx	r3
  }
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	2001a628 	.word	0x2001a628

08005294 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800529c:	f3ef 8311 	mrs	r3, BASEPRI
 80052a0:	f04f 0120 	mov.w	r1, #32
 80052a4:	f381 8811 	msr	BASEPRI, r1
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	480b      	ldr	r0, [pc, #44]	; (80052d8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80052ac:	f7fe ff01 	bl	80040b2 <_PreparePacket>
 80052b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	6938      	ldr	r0, [r7, #16]
 80052b8:	f7fe feae 	bl	8004018 <_EncodeStr>
 80052bc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80052be:	220e      	movs	r2, #14
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	6938      	ldr	r0, [r7, #16]
 80052c4:	f7fe ffe8 	bl	8004298 <_SendPacket>
  RECORD_END();
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	2001a658 	.word	0x2001a658

080052dc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80052e2:	4b15      	ldr	r3, [pc, #84]	; (8005338 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01a      	beq.n	8005320 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4798      	blx	r3
 80052fc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005300:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	000a      	movs	r2, r1
 8005310:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005312:	4613      	mov	r3, r2
 8005314:	461a      	mov	r2, r3
 8005316:	4621      	mov	r1, r4
 8005318:	200d      	movs	r0, #13
 800531a:	f7ff fced 	bl	8004cf8 <SEGGER_SYSVIEW_RecordU32x2>
 800531e:	e006      	b.n	800532e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4619      	mov	r1, r3
 8005326:	200c      	movs	r0, #12
 8005328:	f7ff fcaa 	bl	8004c80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bd90      	pop	{r4, r7, pc}
 8005336:	bf00      	nop
 8005338:	2001a628 	.word	0x2001a628
 800533c:	e0001004 	.word	0xe0001004

08005340 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005346:	f3ef 8311 	mrs	r3, BASEPRI
 800534a:	f04f 0120 	mov.w	r1, #32
 800534e:	f381 8811 	msr	BASEPRI, r1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	4819      	ldr	r0, [pc, #100]	; (80053bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005356:	f7fe feac 	bl	80040b2 <_PreparePacket>
 800535a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005360:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005368:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	e00b      	b.n	800538c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1c59      	adds	r1, r3, #1
 800537c:	6179      	str	r1, [r7, #20]
 800537e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b7f      	cmp	r3, #127	; 0x7f
 8005390:	d8f0      	bhi.n	8005374 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	617a      	str	r2, [r7, #20]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80053a2:	2202      	movs	r2, #2
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	68b8      	ldr	r0, [r7, #8]
 80053a8:	f7fe ff76 	bl	8004298 <_SendPacket>
  RECORD_END();
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f383 8811 	msr	BASEPRI, r3
}
 80053b2:	bf00      	nop
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	2001a658 	.word	0x2001a658
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053ca:	f3ef 8311 	mrs	r3, BASEPRI
 80053ce:	f04f 0120 	mov.w	r1, #32
 80053d2:	f381 8811 	msr	BASEPRI, r1
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	4807      	ldr	r0, [pc, #28]	; (80053f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80053da:	f7fe fe6a 	bl	80040b2 <_PreparePacket>
 80053de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80053e0:	2203      	movs	r2, #3
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6838      	ldr	r0, [r7, #0]
 80053e6:	f7fe ff57 	bl	8004298 <_SendPacket>
  RECORD_END();
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f383 8811 	msr	BASEPRI, r3
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	2001a658 	.word	0x2001a658

080053fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005402:	f3ef 8311 	mrs	r3, BASEPRI
 8005406:	f04f 0120 	mov.w	r1, #32
 800540a:	f381 8811 	msr	BASEPRI, r1
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	4807      	ldr	r0, [pc, #28]	; (8005430 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005412:	f7fe fe4e 	bl	80040b2 <_PreparePacket>
 8005416:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005418:	2212      	movs	r2, #18
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6838      	ldr	r0, [r7, #0]
 800541e:	f7fe ff3b 	bl	8004298 <_SendPacket>
  RECORD_END();
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f383 8811 	msr	BASEPRI, r3
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	2001a658 	.word	0x2001a658

08005434 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800543a:	f3ef 8311 	mrs	r3, BASEPRI
 800543e:	f04f 0120 	mov.w	r1, #32
 8005442:	f381 8811 	msr	BASEPRI, r1
 8005446:	607b      	str	r3, [r7, #4]
 8005448:	4807      	ldr	r0, [pc, #28]	; (8005468 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800544a:	f7fe fe32 	bl	80040b2 <_PreparePacket>
 800544e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005450:	2211      	movs	r2, #17
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6838      	ldr	r0, [r7, #0]
 8005456:	f7fe ff1f 	bl	8004298 <_SendPacket>
  RECORD_END();
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f383 8811 	msr	BASEPRI, r3
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	2001a658 	.word	0x2001a658

0800546c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005474:	f3ef 8311 	mrs	r3, BASEPRI
 8005478:	f04f 0120 	mov.w	r1, #32
 800547c:	f381 8811 	msr	BASEPRI, r1
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	4819      	ldr	r0, [pc, #100]	; (80054e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005484:	f7fe fe15 	bl	80040b2 <_PreparePacket>
 8005488:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	e00b      	b.n	80054ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	61f9      	str	r1, [r7, #28]
 80054ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	09db      	lsrs	r3, r3, #7
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b7f      	cmp	r3, #127	; 0x7f
 80054be:	d8f0      	bhi.n	80054a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	61fa      	str	r2, [r7, #28]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80054d0:	2208      	movs	r2, #8
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	6938      	ldr	r0, [r7, #16]
 80054d6:	f7fe fedf 	bl	8004298 <_SendPacket>
  RECORD_END();
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f383 8811 	msr	BASEPRI, r3
}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	2001a658 	.word	0x2001a658
 80054ec:	2001a628 	.word	0x2001a628

080054f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054f8:	f3ef 8311 	mrs	r3, BASEPRI
 80054fc:	f04f 0120 	mov.w	r1, #32
 8005500:	f381 8811 	msr	BASEPRI, r1
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	4819      	ldr	r0, [pc, #100]	; (800556c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005508:	f7fe fdd3 	bl	80040b2 <_PreparePacket>
 800550c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005512:	4b17      	ldr	r3, [pc, #92]	; (8005570 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e00b      	b.n	800553e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	61f9      	str	r1, [r7, #28]
 8005530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	09db      	lsrs	r3, r3, #7
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b7f      	cmp	r3, #127	; 0x7f
 8005542:	d8f0      	bhi.n	8005526 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	61fa      	str	r2, [r7, #28]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005554:	2204      	movs	r2, #4
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6938      	ldr	r0, [r7, #16]
 800555a:	f7fe fe9d 	bl	8004298 <_SendPacket>
  RECORD_END();
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f383 8811 	msr	BASEPRI, r3
}
 8005564:	bf00      	nop
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2001a658 	.word	0x2001a658
 8005570:	2001a628 	.word	0x2001a628

08005574 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800557c:	f3ef 8311 	mrs	r3, BASEPRI
 8005580:	f04f 0120 	mov.w	r1, #32
 8005584:	f381 8811 	msr	BASEPRI, r1
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	4819      	ldr	r0, [pc, #100]	; (80055f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800558c:	f7fe fd91 	bl	80040b2 <_PreparePacket>
 8005590:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	e00b      	b.n	80055c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	1c59      	adds	r1, r3, #1
 80055b2:	61f9      	str	r1, [r7, #28]
 80055b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	09db      	lsrs	r3, r3, #7
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b7f      	cmp	r3, #127	; 0x7f
 80055c6:	d8f0      	bhi.n	80055aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	61fa      	str	r2, [r7, #28]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80055d8:	2206      	movs	r2, #6
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	6938      	ldr	r0, [r7, #16]
 80055de:	f7fe fe5b 	bl	8004298 <_SendPacket>
  RECORD_END();
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f383 8811 	msr	BASEPRI, r3
}
 80055e8:	bf00      	nop
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2001a658 	.word	0x2001a658
 80055f4:	2001a628 	.word	0x2001a628

080055f8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	; 0x30
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d06d      	beq.n	80056e6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800560a:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005610:	2300      	movs	r3, #0
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	e008      	b.n	8005628 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	3301      	adds	r3, #1
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562c:	429a      	cmp	r2, r3
 800562e:	d3f2      	bcc.n	8005616 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005630:	e000      	b.n	8005634 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005632:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d055      	beq.n	80056e6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800563a:	f3ef 8311 	mrs	r3, BASEPRI
 800563e:	f04f 0120 	mov.w	r1, #32
 8005642:	f381 8811 	msr	BASEPRI, r1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	482a      	ldr	r0, [pc, #168]	; (80056f4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800564a:	f7fe fd32 	bl	80040b2 <_PreparePacket>
 800564e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	e00b      	b.n	8005676 <SEGGER_SYSVIEW_SendModule+0x7e>
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	6279      	str	r1, [r7, #36]	; 0x24
 8005668:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	09db      	lsrs	r3, r3, #7
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	2b7f      	cmp	r3, #127	; 0x7f
 800567a:	d8f0      	bhi.n	800565e <SEGGER_SYSVIEW_SendModule+0x66>
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	627a      	str	r2, [r7, #36]	; 0x24
 8005682:	6a3a      	ldr	r2, [r7, #32]
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e00b      	b.n	80056b0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	b2da      	uxtb	r2, r3
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	61f9      	str	r1, [r7, #28]
 80056a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b7f      	cmp	r3, #127	; 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <SEGGER_SYSVIEW_SendModule+0xa0>
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	61fa      	str	r2, [r7, #28]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2280      	movs	r2, #128	; 0x80
 80056cc:	4619      	mov	r1, r3
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7fe fca2 	bl	8004018 <_EncodeStr>
 80056d4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80056d6:	2216      	movs	r2, #22
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	6938      	ldr	r0, [r7, #16]
 80056dc:	f7fe fddc 	bl	8004298 <_SendPacket>
      RECORD_END();
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3730      	adds	r7, #48	; 0x30
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2001a650 	.word	0x2001a650
 80056f4:	2001a658 	.word	0x2001a658

080056f8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80056fe:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00f      	beq.n	8005726 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f2      	bne.n	800570c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	2001a650 	.word	0x2001a650

08005734 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800573a:	f3ef 8311 	mrs	r3, BASEPRI
 800573e:	f04f 0120 	mov.w	r1, #32
 8005742:	f381 8811 	msr	BASEPRI, r1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	4817      	ldr	r0, [pc, #92]	; (80057a8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800574a:	f7fe fcb2 	bl	80040b2 <_PreparePacket>
 800574e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e00b      	b.n	8005778 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	6179      	str	r1, [r7, #20]
 800576a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d8f0      	bhi.n	8005760 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	617a      	str	r2, [r7, #20]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800578e:	221b      	movs	r2, #27
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	f7fe fd80 	bl	8004298 <_SendPacket>
  RECORD_END();
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f383 8811 	msr	BASEPRI, r3
}
 800579e:	bf00      	nop
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2001a658 	.word	0x2001a658
 80057ac:	2001a654 	.word	0x2001a654

080057b0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80057b0:	b40f      	push	{r0, r1, r2, r3}
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80057b8:	f107 0314 	add.w	r3, r7, #20
 80057bc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	461a      	mov	r2, r3
 80057c2:	2100      	movs	r1, #0
 80057c4:	6938      	ldr	r0, [r7, #16]
 80057c6:	f7fe fff1 	bl	80047ac <_VPrintTarget>
  va_end(ParamList);
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057d4:	b004      	add	sp, #16
 80057d6:	4770      	bx	lr

080057d8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057e0:	f3ef 8311 	mrs	r3, BASEPRI
 80057e4:	f04f 0120 	mov.w	r1, #32
 80057e8:	f381 8811 	msr	BASEPRI, r1
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	4827      	ldr	r0, [pc, #156]	; (800588c <SEGGER_SYSVIEW_Warn+0xb4>)
 80057f0:	f7fe fc5f 	bl	80040b2 <_PreparePacket>
 80057f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057f6:	2280      	movs	r2, #128	; 0x80
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	6938      	ldr	r0, [r7, #16]
 80057fc:	f7fe fc0c 	bl	8004018 <_EncodeStr>
 8005800:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	2301      	movs	r3, #1
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	e00b      	b.n	8005824 <SEGGER_SYSVIEW_Warn+0x4c>
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1c59      	adds	r1, r3, #1
 8005814:	6279      	str	r1, [r7, #36]	; 0x24
 8005816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	623b      	str	r3, [r7, #32]
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d8f0      	bhi.n	800580c <SEGGER_SYSVIEW_Warn+0x34>
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	627a      	str	r2, [r7, #36]	; 0x24
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e00b      	b.n	800585c <SEGGER_SYSVIEW_Warn+0x84>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	61f9      	str	r1, [r7, #28]
 800584e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005852:	b2d2      	uxtb	r2, r2
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	09db      	lsrs	r3, r3, #7
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b7f      	cmp	r3, #127	; 0x7f
 8005860:	d8f0      	bhi.n	8005844 <SEGGER_SYSVIEW_Warn+0x6c>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005872:	221a      	movs	r2, #26
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6938      	ldr	r0, [r7, #16]
 8005878:	f7fe fd0e 	bl	8004298 <_SendPacket>
  RECORD_END();
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f383 8811 	msr	BASEPRI, r3
}
 8005882:	bf00      	nop
 8005884:	3728      	adds	r7, #40	; 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2001a658 	.word	0x2001a658

08005890 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005896:	7e1b      	ldrb	r3, [r3, #24]
 8005898:	4619      	mov	r1, r3
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800589c:	460b      	mov	r3, r1
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	336c      	adds	r3, #108	; 0x6c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058ac:	7e1b      	ldrb	r3, [r3, #24]
 80058ae:	4618      	mov	r0, r3
 80058b0:	490d      	ldr	r1, [pc, #52]	; (80058e8 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80058b2:	4603      	mov	r3, r0
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	4403      	add	r3, r0
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	440b      	add	r3, r1
 80058bc:	3370      	adds	r3, #112	; 0x70
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d00b      	beq.n	80058dc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058c6:	789b      	ldrb	r3, [r3, #2]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80058d2:	f7fe fbfb 	bl	80040cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80058d6:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058d8:	2200      	movs	r2, #0
 80058da:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80058dc:	4b01      	ldr	r3, [pc, #4]	; (80058e4 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80058de:	781b      	ldrb	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2001a628 	.word	0x2001a628
 80058e8:	2001a780 	.word	0x2001a780

080058ec <__libc_init_array>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	4d0d      	ldr	r5, [pc, #52]	; (8005924 <__libc_init_array+0x38>)
 80058f0:	4c0d      	ldr	r4, [pc, #52]	; (8005928 <__libc_init_array+0x3c>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	2600      	movs	r6, #0
 80058f8:	42a6      	cmp	r6, r4
 80058fa:	d109      	bne.n	8005910 <__libc_init_array+0x24>
 80058fc:	4d0b      	ldr	r5, [pc, #44]	; (800592c <__libc_init_array+0x40>)
 80058fe:	4c0c      	ldr	r4, [pc, #48]	; (8005930 <__libc_init_array+0x44>)
 8005900:	f000 f83c 	bl	800597c <_init>
 8005904:	1b64      	subs	r4, r4, r5
 8005906:	10a4      	asrs	r4, r4, #2
 8005908:	2600      	movs	r6, #0
 800590a:	42a6      	cmp	r6, r4
 800590c:	d105      	bne.n	800591a <__libc_init_array+0x2e>
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	f855 3b04 	ldr.w	r3, [r5], #4
 8005914:	4798      	blx	r3
 8005916:	3601      	adds	r6, #1
 8005918:	e7ee      	b.n	80058f8 <__libc_init_array+0xc>
 800591a:	f855 3b04 	ldr.w	r3, [r5], #4
 800591e:	4798      	blx	r3
 8005920:	3601      	adds	r6, #1
 8005922:	e7f2      	b.n	800590a <__libc_init_array+0x1e>
 8005924:	08005b1c 	.word	0x08005b1c
 8005928:	08005b1c 	.word	0x08005b1c
 800592c:	08005b1c 	.word	0x08005b1c
 8005930:	08005b20 	.word	0x08005b20

08005934 <memcmp>:
 8005934:	b530      	push	{r4, r5, lr}
 8005936:	3901      	subs	r1, #1
 8005938:	2400      	movs	r4, #0
 800593a:	42a2      	cmp	r2, r4
 800593c:	d101      	bne.n	8005942 <memcmp+0xe>
 800593e:	2000      	movs	r0, #0
 8005940:	e005      	b.n	800594e <memcmp+0x1a>
 8005942:	5d03      	ldrb	r3, [r0, r4]
 8005944:	3401      	adds	r4, #1
 8005946:	5d0d      	ldrb	r5, [r1, r4]
 8005948:	42ab      	cmp	r3, r5
 800594a:	d0f6      	beq.n	800593a <memcmp+0x6>
 800594c:	1b58      	subs	r0, r3, r5
 800594e:	bd30      	pop	{r4, r5, pc}

08005950 <memcpy>:
 8005950:	440a      	add	r2, r1
 8005952:	4291      	cmp	r1, r2
 8005954:	f100 33ff 	add.w	r3, r0, #4294967295
 8005958:	d100      	bne.n	800595c <memcpy+0xc>
 800595a:	4770      	bx	lr
 800595c:	b510      	push	{r4, lr}
 800595e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005966:	4291      	cmp	r1, r2
 8005968:	d1f9      	bne.n	800595e <memcpy+0xe>
 800596a:	bd10      	pop	{r4, pc}

0800596c <memset>:
 800596c:	4402      	add	r2, r0
 800596e:	4603      	mov	r3, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	d100      	bne.n	8005976 <memset+0xa>
 8005974:	4770      	bx	lr
 8005976:	f803 1b01 	strb.w	r1, [r3], #1
 800597a:	e7f9      	b.n	8005970 <memset+0x4>

0800597c <_init>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr

08005988 <_fini>:
 8005988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598a:	bf00      	nop
 800598c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598e:	bc08      	pop	{r3}
 8005990:	469e      	mov	lr, r3
 8005992:	4770      	bx	lr
