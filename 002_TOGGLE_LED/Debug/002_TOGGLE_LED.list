
002_TOGGLE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006668  08006668  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006670  08006670  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a820  2000001c  08006694  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a83c  08006694  0002a83c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001562b  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d67  00000000  00000000  00035677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000383e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022990  00000000  00000000  0003a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117af  00000000  00000000  0005cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d45c1  00000000  00000000  0006e5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  00142bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006478 	.word	0x08006478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006478 	.word	0x08006478

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a794 	.word	0x2001a794

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc37 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f891 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8f9 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800056e:	483c      	ldr	r0, [pc, #240]	; (8000660 <main+0x104>)
 8000570:	f003 fd52 	bl	8004018 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <main+0x108>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a3a      	ldr	r2, [pc, #232]	; (8000664 <main+0x108>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000580:	f003 fac0 	bl	8003b04 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2303      	movs	r3, #3
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	22c8      	movs	r2, #200	; 0xc8
 8000592:	4935      	ldr	r1, [pc, #212]	; (8000668 <main+0x10c>)
 8000594:	4835      	ldr	r0, [pc, #212]	; (800066c <main+0x110>)
 8000596:	f001 fea5 	bl	80022e4 <xTaskCreate>
 800059a:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b4:	bf00      	nop
 80005b6:	e7fe      	b.n	80005b6 <main+0x5a>

  next_task_handle = ledg_task_handle;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <main+0x114>)
 80005bc:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &ledr_task_handle);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	4929      	ldr	r1, [pc, #164]	; (8000674 <main+0x118>)
 80005ce:	482a      	ldr	r0, [pc, #168]	; (8000678 <main+0x11c>)
 80005d0:	f001 fe88 	bl	80022e4 <xTaskCreate>
 80005d4:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00a      	beq.n	80005f2 <main+0x96>
        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	61fb      	str	r3, [r7, #28]
    }
 80005ee:	bf00      	nop
 80005f0:	e7fe      	b.n	80005f0 <main+0x94>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 1, &ledo_task_handle);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	491e      	ldr	r1, [pc, #120]	; (800067c <main+0x120>)
 8000602:	481f      	ldr	r0, [pc, #124]	; (8000680 <main+0x124>)
 8000604:	f001 fe6e 	bl	80022e4 <xTaskCreate>
 8000608:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0xca>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	61bb      	str	r3, [r7, #24]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0xc8>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2304      	movs	r3, #4
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4914      	ldr	r1, [pc, #80]	; (8000684 <main+0x128>)
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0x12c>)
 8000636:	f001 fe55 	bl	80022e4 <xTaskCreate>
 800063a:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00a      	beq.n	8000658 <main+0xfc>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	617b      	str	r3, [r7, #20]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0xfa>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000658:	f002 f88a 	bl	8002770 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x100>
 800065e:	bf00      	nop
 8000660:	0007a120 	.word	0x0007a120
 8000664:	e0001000 	.word	0xe0001000
 8000668:	08006490 	.word	0x08006490
 800066c:	08000a21 	.word	0x08000a21
 8000670:	20000038 	.word	0x20000038
 8000674:	080064a0 	.word	0x080064a0
 8000678:	08000b01 	.word	0x08000b01
 800067c:	080064b0 	.word	0x080064b0
 8000680:	08000a91 	.word	0x08000a91
 8000684:	080064c0 	.word	0x080064c0
 8000688:	08000b85 	.word	0x08000b85

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fee4 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2310      	movs	r3, #16
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fe6b 	bl	80013ec <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 fa6c 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f8c4 	bl	80018cc <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 fa55 	bl	8000bf8 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4ba1      	ldr	r3, [pc, #644]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4aa0      	ldr	r2, [pc, #640]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b9e      	ldr	r3, [pc, #632]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b9a      	ldr	r3, [pc, #616]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a99      	ldr	r2, [pc, #612]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b97      	ldr	r3, [pc, #604]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b93      	ldr	r3, [pc, #588]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a92      	ldr	r2, [pc, #584]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b85      	ldr	r3, [pc, #532]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a84      	ldr	r2, [pc, #528]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b82      	ldr	r3, [pc, #520]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a7d      	ldr	r2, [pc, #500]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b7b      	ldr	r3, [pc, #492]	; (8000a00 <MX_GPIO_Init+0x2a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	4878      	ldr	r0, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000824:	f000 fdae 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2101      	movs	r1, #1
 800082c:	4876      	ldr	r0, [pc, #472]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 800082e:	f000 fda9 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000832:	2200      	movs	r2, #0
 8000834:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000838:	4874      	ldr	r0, [pc, #464]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fda3 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	486b      	ldr	r0, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 8000856:	f000 fbe1 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4865      	ldr	r0, [pc, #404]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000872:	f000 fbd3 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000886:	2305      	movs	r3, #5
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	485d      	ldr	r0, [pc, #372]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fbc3 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x2b0>)
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	485a      	ldr	r0, [pc, #360]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80008aa:	f000 fbb7 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ae:	2310      	movs	r3, #16
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008be:	2306      	movs	r3, #6
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4852      	ldr	r0, [pc, #328]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80008ca:	f000 fba7 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008ce:	23e0      	movs	r3, #224	; 0xe0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	484a      	ldr	r0, [pc, #296]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80008ea:	f000 fb97 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <MX_GPIO_Init+0x2b8>)
 8000902:	f000 fb8b 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	483d      	ldr	r0, [pc, #244]	; (8000a18 <MX_GPIO_Init+0x2b8>)
 8000924:	f000 fb7a 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000928:	f24f 0310 	movw	r3, #61456	; 0xf010
 800092c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4832      	ldr	r0, [pc, #200]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 8000942:	f000 fb6b 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000946:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000958:	2306      	movs	r3, #6
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4829      	ldr	r0, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x2a8>)
 8000964:	f000 fb5a 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 800097e:	f000 fb4d 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000982:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000994:	230a      	movs	r3, #10
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	481d      	ldr	r0, [pc, #116]	; (8000a14 <MX_GPIO_Init+0x2b4>)
 80009a0:	f000 fb3c 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x2ac>)
 80009b8:	f000 fb30 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009bc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x2b8>)
 80009da:	f000 fb1f 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_GPIO_Init+0x2bc>)
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_GPIO_Init+0x2a4>)
 80009f2:	f000 fb13 	bl	800101c <HAL_GPIO_Init>

}
 80009f6:	bf00      	nop
 80009f8:	3730      	adds	r7, #48	; 0x30
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	10110000 	.word	0x10110000
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	10120000 	.word	0x10120000

08000a20 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a28:	4814      	ldr	r0, [pc, #80]	; (8000a7c <led_green_handler+0x5c>)
 8000a2a:	f005 fc3f 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <led_green_handler+0x60>)
 8000a34:	f000 fcbf 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f002 f987 	bl	8002d58 <xTaskGenericNotifyWait>
 8000a4a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d1ea      	bne.n	8000a28 <led_green_handler+0x8>

			/* Suspend the Scheduler */
			vTaskSuspendAll();
 8000a52:	f001 fee9 	bl	8002828 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <led_green_handler+0x64>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <led_green_handler+0x68>)
 8000a5c:	6013      	str	r3, [r2, #0]

			/* Resume Scheduler */
			xTaskResumeAll();
 8000a5e:	f001 fef1 	bl	8002844 <xTaskResumeAll>

			/* Open */
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <led_green_handler+0x60>)
 8000a6a:	f000 fc8b 	bl	8001384 <HAL_GPIO_WritePin>

			/* Delete Task */
			SEGGER_SYSVIEW_PrintfTarget("Delete GREEN Task");
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <led_green_handler+0x6c>)
 8000a70:	f005 fc1c 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f001 fd99 	bl	80025ac <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a7a:	e7d5      	b.n	8000a28 <led_green_handler+0x8>
 8000a7c:	080064cc 	.word	0x080064cc
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	2001a748 	.word	0x2001a748
 8000a88:	20000038 	.word	0x20000038
 8000a8c:	080064e0 	.word	0x080064e0

08000a90 <led_orange_handler>:
	}
}


static void led_orange_handler(void* parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a98:	4814      	ldr	r0, [pc, #80]	; (8000aec <led_orange_handler+0x5c>)
 8000a9a:	f005 fc07 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <led_orange_handler+0x60>)
 8000aa4:	f000 fc87 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000aa8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 f94f 	bl	8002d58 <xTaskGenericNotifyWait>
 8000aba:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d1ea      	bne.n	8000a98 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000ac2:	f001 feb1 	bl	8002828 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <led_orange_handler+0x64>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <led_orange_handler+0x68>)
 8000acc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ace:	f001 feb9 	bl	8002844 <xTaskResumeAll>

			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <led_orange_handler+0x60>)
 8000ada:	f000 fc53 	bl	8001384 <HAL_GPIO_WritePin>

			/* Delete Task*/
			SEGGER_SYSVIEW_PrintfTarget("Delete Orange Task");
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <led_orange_handler+0x6c>)
 8000ae0:	f005 fbe4 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f001 fd61 	bl	80025ac <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aea:	e7d5      	b.n	8000a98 <led_orange_handler+0x8>
 8000aec:	080064f4 	.word	0x080064f4
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	2001a74c 	.word	0x2001a74c
 8000af8:	20000038 	.word	0x20000038
 8000afc:	08006508 	.word	0x08006508

08000b00 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <led_red_handler+0x6c>)
 8000b0a:	f005 fbcf 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	4817      	ldr	r0, [pc, #92]	; (8000b70 <led_red_handler+0x70>)
 8000b14:	f000 fc4f 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2000      	movs	r0, #0
 8000b26:	f002 f917 	bl	8002d58 <xTaskGenericNotifyWait>
 8000b2a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d1ea      	bne.n	8000b08 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b32:	f001 fe79 	bl	8002828 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <led_red_handler+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b3c:	f001 fe82 	bl	8002844 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <led_red_handler+0x70>)
 8000b48:	f000 fc1c 	bl	8001384 <HAL_GPIO_WritePin>

			/* Delete Task */
			SEGGER_SYSVIEW_PrintfTarget("Delete Button Task");
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <led_red_handler+0x78>)
 8000b4e:	f005 fbad 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <led_red_handler+0x7c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fd28 	bl	80025ac <vTaskDelete>
			SEGGER_SYSVIEW_PrintfTarget("Delete RED Task");
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <led_red_handler+0x80>)
 8000b5e:	f005 fba5 	bl	80062ac <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f001 fd22 	bl	80025ac <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b68:	e7ce      	b.n	8000b08 <led_red_handler+0x8>
 8000b6a:	bf00      	nop
 8000b6c:	0800651c 	.word	0x0800651c
 8000b70:	40020c00 	.word	0x40020c00
 8000b74:	20000038 	.word	0x20000038
 8000b78:	08006530 	.word	0x08006530
 8000b7c:	2001a744 	.word	0x2001a744
 8000b80:	08006544 	.word	0x08006544

08000b84 <button_handler>:
		}
	}

}
static void button_handler(void* parameters){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

	while(1){

		/* Read the Button status */
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b94:	2101      	movs	r1, #1
 8000b96:	480d      	ldr	r0, [pc, #52]	; (8000bcc <button_handler+0x48>)
 8000b98:	f000 fbdc 	bl	8001354 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00b      	beq.n	8000bbe <button_handler+0x3a>
			if(!prev_read)
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d108      	bne.n	8000bbe <button_handler+0x3a>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <button_handler+0x4c>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f002 f955 	bl	8002e68 <xTaskGenericNotify>

		prev_read = btn_read;
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f001 fd9c 	bl	8002700 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bc8:	e7e4      	b.n	8000b94 <button_handler+0x10>
 8000bca:	bf00      	nop
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	20000038 	.word	0x20000038

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 f917 	bl	8000e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000c46:	f002 fba7 	bl	8003398 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2036      	movs	r0, #54	; 0x36
 8000c6e:	f000 f9ab 	bl	8000fc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c72:	2036      	movs	r0, #54	; 0x36
 8000c74:	f000 f9c4 	bl	8001000 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_InitTick+0xa4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <HAL_InitTick+0xa4>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_InitTick+0xa4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c94:	f107 0210 	add.w	r2, r7, #16
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fffc 	bl	8001c9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ca4:	f000 ffe6 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_InitTick+0xa8>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_InitTick+0xac>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_InitTick+0xb0>)
 8000cc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_InitTick+0xac>)
 8000cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_InitTick+0xac>)
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_InitTick+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_InitTick+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_InitTick+0xac>)
 8000cde:	f001 f80f 	bl	8001d00 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <HAL_InitTick+0xac>)
 8000cea:	f001 f83e 	bl	8001d6a <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	2001a750 	.word	0x2001a750
 8000d08:	40001000 	.word	0x40001000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <TIM6_DAC_IRQHandler+0x10>)
 8000d46:	f001 f834 	bl	8001db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2001a750 	.word	0x2001a750

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <SystemInit+0x28>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <SystemInit+0x28>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SystemInit+0x28>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr  r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000da0:	f842 3b04 	str.w	r3, [r2], #4

08000da4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd3 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f005 fb1b 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fbd3 	bl	800055c <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dbc:	08006678 	.word	0x08006678
  ldr  r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000dc8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000dcc:	2001a83c 	.word	0x2001a83c

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f8d8 	bl	8000fb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ff28 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fefe 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2001a790 	.word	0x2001a790

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2001a790 	.word	0x2001a790

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff4c 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fda:	f7ff ff61 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	6978      	ldr	r0, [r7, #20]
 8000fe6:	f7ff ffb1 	bl	8000f4c <NVIC_EncodePriority>
 8000fea:	4602      	mov	r2, r0
 8000fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff80 	bl	8000ef8 <__NVIC_SetPriority>
}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff54 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e16b      	b.n	8001310 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 815a 	bne.w	800130a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d00b      	beq.n	8001076 <HAL_GPIO_Init+0x5a>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106a:	2b11      	cmp	r3, #17
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b12      	cmp	r3, #18
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0xfc>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b12      	cmp	r3, #18
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80b4 	beq.w	800130a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a5f      	ldr	r2, [pc, #380]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_GPIO_Init+0x30c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a5b      	ldr	r2, [pc, #364]	; (800132c <HAL_GPIO_Init+0x310>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d02b      	beq.n	8001242 <HAL_GPIO_Init+0x226>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x222>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a50      	ldr	r2, [pc, #320]	; (8001338 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x21e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x21a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x324>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x216>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x212>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x20e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x330>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x20a>
 8001222:	2307      	movs	r3, #7
 8001224:	e00e      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001226:	2308      	movs	r3, #8
 8001228:	e00c      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800122a:	2306      	movs	r3, #6
 800122c:	e00a      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800122e:	2305      	movs	r3, #5
 8001230:	e008      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001232:	2304      	movs	r3, #4
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001236:	2303      	movs	r3, #3
 8001238:	e004      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800123a:	2302      	movs	r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x228>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x228>
 8001242:	2300      	movs	r3, #0
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	f002 0203 	and.w	r2, r2, #3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4093      	lsls	r3, r2
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001254:	4935      	ldr	r1, [pc, #212]	; (800132c <HAL_GPIO_Init+0x310>)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001286:	4a32      	ldr	r2, [pc, #200]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_GPIO_Init+0x334>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x334>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_GPIO_Init+0x334>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	f67f ae90 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40013800 	.word	0x40013800
 8001330:	40020000 	.word	0x40020000
 8001334:	40020400 	.word	0x40020400
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40021400 	.word	0x40021400
 8001348:	40021800 	.word	0x40021800
 800134c:	40021c00 	.word	0x40021c00
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	887b      	ldrh	r3, [r7, #2]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	401a      	ands	r2, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d104      	bne.n	80013da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e25b      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d075      	beq.n	80014f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140a:	4ba3      	ldr	r3, [pc, #652]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d00c      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d112      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4b99      	ldr	r3, [pc, #612]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d05b      	beq.n	80014f4 <HAL_RCC_OscConfig+0x108>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d157      	bne.n	80014f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e236      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d106      	bne.n	8001460 <HAL_RCC_OscConfig+0x74>
 8001452:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a90      	ldr	r2, [pc, #576]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x98>
 800146a:	4b8b      	ldr	r3, [pc, #556]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a8a      	ldr	r2, [pc, #552]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xb0>
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a83      	ldr	r2, [pc, #524]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a80      	ldr	r2, [pc, #512]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fccc 	bl	8000e40 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fcc8 	bl	8000e40 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1fb      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xc0>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcb8 	bl	8000e40 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcb4 	bl	8000e40 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1e7      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0xe8>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001502:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1bb      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4952      	ldr	r1, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_RCC_OscConfig+0x2b0>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fc6d 	bl	8000e40 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fc69 	bl	8000e40 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e19c      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4940      	ldr	r1, [pc, #256]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_OscConfig+0x2b0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc4c 	bl	8000e40 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc48 	bl	8000e40 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e17b      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d030      	beq.n	8001638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d016      	beq.n	800160c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_RCC_OscConfig+0x2b4>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc2c 	bl	8000e40 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc28 	bl	8000e40 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e15b      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x200>
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x2b4>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001612:	f7ff fc15 	bl	8000e40 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff fc11 	bl	8000e40 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e144      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f0      	bne.n	800161a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a0 	beq.w	8001786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x2b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d121      	bne.n	80016c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_RCC_OscConfig+0x2b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <HAL_RCC_OscConfig+0x2b8>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7ff fbd7 	bl	8000e40 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e011      	b.n	80016ba <HAL_RCC_OscConfig+0x2ce>
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	42470000 	.word	0x42470000
 80016a0:	42470e80 	.word	0x42470e80
 80016a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff fbca 	bl	8000e40 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0fd      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b81      	ldr	r3, [pc, #516]	; (80018c0 <HAL_RCC_OscConfig+0x4d4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x2f0>
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a7c      	ldr	r2, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	e01c      	b.n	8001716 <HAL_RCC_OscConfig+0x32a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d10c      	bne.n	80016fe <HAL_RCC_OscConfig+0x312>
 80016e4:	4b77      	ldr	r3, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a76      	ldr	r2, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
 80016f0:	4b74      	ldr	r3, [pc, #464]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	4a73      	ldr	r2, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6713      	str	r3, [r2, #112]	; 0x70
 80016fc:	e00b      	b.n	8001716 <HAL_RCC_OscConfig+0x32a>
 80016fe:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	4a70      	ldr	r2, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
 800170a:	4b6e      	ldr	r3, [pc, #440]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170e:	4a6d      	ldr	r2, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d015      	beq.n	800174a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fb8f 	bl	8000e40 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fb8b 	bl	8000e40 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0bc      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0ee      	beq.n	8001726 <HAL_RCC_OscConfig+0x33a>
 8001748:	e014      	b.n	8001774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb79 	bl	8000e40 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fb75 	bl	8000e40 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0a6      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8092 	beq.w	80018b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 030c 	and.w	r3, r3, #12
 8001798:	2b08      	cmp	r3, #8
 800179a:	d05c      	beq.n	8001856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d141      	bne.n	8001828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_RCC_OscConfig+0x4dc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb49 	bl	8000e40 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fb45 	bl	8000e40 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e078      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	085b      	lsrs	r3, r3, #1
 80017e8:	3b01      	subs	r3, #1
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	061b      	lsls	r3, r3, #24
 80017f4:	4933      	ldr	r1, [pc, #204]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x4dc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb1e 	bl	8000e40 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb1a 	bl	8000e40 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e04d      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x41c>
 8001826:	e045      	b.n	80018b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x4dc>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb07 	bl	8000e40 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff fb03 	bl	8000e40 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e036      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x44a>
 8001854:	e02e      	b.n	80018b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e029      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_RCC_OscConfig+0x4d8>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	429a      	cmp	r2, r3
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d115      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001890:	4293      	cmp	r3, r2
 8001892:	d10d      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40007000 	.word	0x40007000
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470060 	.word	0x42470060

080018cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0cc      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d90c      	bls.n	8001908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d044      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d003      	beq.n	800198a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001986:	2b03      	cmp	r3, #3
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b3f      	ldr	r3, [pc, #252]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e06f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e067      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa40 	bl	8000e40 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa3c 	bl	8000e40 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e04f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d20c      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f8f0 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08006628 	.word	0x08006628
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d00d      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	f200 80bd 	bhi.w	8001c3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x34>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aca:	e0b7      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b61      	ldr	r3, [pc, #388]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ace:	60bb      	str	r3, [r7, #8]
       break;
 8001ad0:	e0b7      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad2:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e0b4      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad8:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04d      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	461a      	mov	r2, r3
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	ea02 0800 	and.w	r8, r2, r0
 8001b06:	ea03 0901 	and.w	r9, r3, r1
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	014b      	lsls	r3, r1, #5
 8001b18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b1c:	0142      	lsls	r2, r0, #5
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	ebb0 0008 	subs.w	r0, r0, r8
 8001b26:	eb61 0109 	sbc.w	r1, r1, r9
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b38:	0182      	lsls	r2, r0, #6
 8001b3a:	1a12      	subs	r2, r2, r0
 8001b3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	00d9      	lsls	r1, r3, #3
 8001b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b4e:	00d0      	lsls	r0, r2, #3
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	eb12 0208 	adds.w	r2, r2, r8
 8001b58:	eb43 0309 	adc.w	r3, r3, r9
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	0259      	lsls	r1, r3, #9
 8001b66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b6a:	0250      	lsls	r0, r2, #9
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	f7fe fb72 	bl	8000264 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e04a      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	099b      	lsrs	r3, r3, #6
 8001b90:	461a      	mov	r2, r3
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	ea02 0400 	and.w	r4, r2, r0
 8001ba2:	ea03 0501 	and.w	r5, r3, r1
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	4629      	mov	r1, r5
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	014b      	lsls	r3, r1, #5
 8001bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bb8:	0142      	lsls	r2, r0, #5
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	1b00      	subs	r0, r0, r4
 8001bc0:	eb61 0105 	sbc.w	r1, r1, r5
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	018b      	lsls	r3, r1, #6
 8001bce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bd2:	0182      	lsls	r2, r0, #6
 8001bd4:	1a12      	subs	r2, r2, r0
 8001bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bda:	f04f 0000 	mov.w	r0, #0
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	00d9      	lsls	r1, r3, #3
 8001be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001be8:	00d0      	lsls	r0, r2, #3
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	1912      	adds	r2, r2, r4
 8001bf0:	eb45 0303 	adc.w	r3, r5, r3
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0299      	lsls	r1, r3, #10
 8001bfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c02:	0290      	lsls	r0, r2, #10
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f7fe fb26 	bl	8000264 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	60bb      	str	r3, [r7, #8]
      break;
 8001c3a:	e002      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c3e:	60bb      	str	r3, [r7, #8]
      break;
 8001c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c42:	68bb      	ldr	r3, [r7, #8]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	007a1200 	.word	0x007a1200

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08006638 	.word	0x08006638

08001c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220f      	movs	r2, #15
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <HAL_RCC_GetClockConfig+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 020f 	and.w	r2, r3, #15
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e01d      	b.n	8001d4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f815 	bl	8001d56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f968 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d122      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d11b      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0202 	mvn.w	r2, #2
 8001dde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8ee 	bl	8001fd6 <HAL_TIM_IC_CaptureCallback>
 8001dfa:	e005      	b.n	8001e08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8e0 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8f1 	bl	8001fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d122      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d11b      	bne.n	8001e62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f06f 0204 	mvn.w	r2, #4
 8001e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f8c4 	bl	8001fd6 <HAL_TIM_IC_CaptureCallback>
 8001e4e:	e005      	b.n	8001e5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8b6 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8c7 	bl	8001fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d122      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f06f 0208 	mvn.w	r2, #8
 8001e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f89a 	bl	8001fd6 <HAL_TIM_IC_CaptureCallback>
 8001ea2:	e005      	b.n	8001eb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f88c 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f89d 	bl	8001fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d122      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d11b      	bne.n	8001f0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f06f 0210 	mvn.w	r2, #16
 8001eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f870 	bl	8001fd6 <HAL_TIM_IC_CaptureCallback>
 8001ef6:	e005      	b.n	8001f04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f862 	bl	8001fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f873 	bl	8001fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d10e      	bne.n	8001f36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0201 	mvn.w	r2, #1
 8001f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7fe fe4f 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d10e      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b80      	cmp	r3, #128	; 0x80
 8001f50:	d107      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f903 	bl	8002168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d10e      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b40      	cmp	r3, #64	; 0x40
 8001f7c:	d107      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f838 	bl	8001ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d10e      	bne.n	8001fba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d107      	bne.n	8001fba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0220 	mvn.w	r2, #32
 8001fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8cd 	bl	8002154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a40      	ldr	r2, [pc, #256]	; (8002128 <TIM_Base_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d00f      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <TIM_Base_SetConfig+0x118>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00b      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <TIM_Base_SetConfig+0x120>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2f      	ldr	r2, [pc, #188]	; (8002128 <TIM_Base_SetConfig+0x114>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d027      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <TIM_Base_SetConfig+0x118>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d023      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <TIM_Base_SetConfig+0x11c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <TIM_Base_SetConfig+0x120>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d017      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a28      	ldr	r2, [pc, #160]	; (800213c <TIM_Base_SetConfig+0x128>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a27      	ldr	r2, [pc, #156]	; (8002140 <TIM_Base_SetConfig+0x12c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <TIM_Base_SetConfig+0x130>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <TIM_Base_SetConfig+0x134>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <TIM_Base_SetConfig+0x138>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <TIM_Base_SetConfig+0x13c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <TIM_Base_SetConfig+0x114>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <TIM_Base_SetConfig+0xf8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <TIM_Base_SetConfig+0x124>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40010400 	.word	0x40010400
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800
 8002148:	40001800 	.word	0x40001800
 800214c:	40001c00 	.word	0x40001c00
 8002150:	40002000 	.word	0x40002000

08002154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d103      	bne.n	800223e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e00c      	b.n	8002258 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3308      	adds	r3, #8
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e002      	b.n	800224c <vListInsert+0x2e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	429a      	cmp	r2, r3
 8002256:	d2f6      	bcs.n	8002246 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6852      	ldr	r2, [r2, #4]
 80022b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d103      	bne.n	80022c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 f9f7 	bl	80036ec <pvPortMalloc>
 80022fe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002306:	2058      	movs	r0, #88	; 0x58
 8002308:	f001 f9f0 	bl	80036ec <pvPortMalloc>
 800230c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
 800231a:	e005      	b.n	8002328 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800231c:	6978      	ldr	r0, [r7, #20]
 800231e:	f001 fac5 	bl	80038ac <vPortFree>
 8002322:	e001      	b.n	8002328 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d013      	beq.n	8002356 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	2300      	movs	r3, #0
 8002332:	9303      	str	r3, [sp, #12]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f80e 	bl	8002366 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800234a:	69f8      	ldr	r0, [r7, #28]
 800234c:	f000 f8a2 	bl	8002494 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002350:	2301      	movs	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e002      	b.n	800235c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800235c:	69bb      	ldr	r3, [r7, #24]
    }
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	21a5      	movs	r1, #165	; 0xa5
 8002380:	f004 f872 	bl	8006468 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800238e:	3b01      	subs	r3, #1
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f023 0307 	bic.w	r3, r3, #7
 800239c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <prvInitialiseNewTask+0x58>
        __asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	617b      	str	r3, [r7, #20]
    }
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01f      	beq.n	8002404 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	e012      	b.n	80023f0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	7819      	ldrb	r1, [r3, #0]
 80023d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	3334      	adds	r3, #52	; 0x34
 80023da:	460a      	mov	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d9e9      	bls.n	80023ca <prvInitialiseNewTask+0x64>
 80023f6:	e000      	b.n	80023fa <prvInitialiseNewTask+0x94>
            {
                break;
 80023f8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002402:	e003      	b.n	800240c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	2b04      	cmp	r3, #4
 8002410:	d901      	bls.n	8002416 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002412:	2304      	movs	r3, #4
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002420:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2200      	movs	r2, #0
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fec5 	bl	80021bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	3318      	adds	r3, #24
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fec0 	bl	80021bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002440:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	f1c3 0205 	rsb	r2, r3, #5
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	3350      	adds	r3, #80	; 0x50
 8002456:	2204      	movs	r2, #4
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f004 f804 	bl	8006468 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	3354      	adds	r3, #84	; 0x54
 8002464:	2201      	movs	r2, #1
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fffd 	bl	8006468 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	f000 fe62 	bl	800313c <pxPortInitialiseStack>
 8002478:	4602      	mov	r2, r0
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002488:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800248a:	bf00      	nop
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af02      	add	r7, sp, #8
 800249a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800249c:	f000 fffa 	bl	8003494 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <prvAddNewTaskToReadyList+0xfc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a3a      	ldr	r2, [pc, #232]	; (8002590 <prvAddNewTaskToReadyList+0xfc>)
 80024a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80024aa:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <prvAddNewTaskToReadyList+0x100>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80024b2:	4a38      	ldr	r2, [pc, #224]	; (8002594 <prvAddNewTaskToReadyList+0x100>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <prvAddNewTaskToReadyList+0xfc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d110      	bne.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80024c0:	f000 fbb0 	bl	8002c24 <prvInitialiseTaskLists>
 80024c4:	e00d      	b.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <prvAddNewTaskToReadyList+0x104>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <prvAddNewTaskToReadyList+0x100>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d802      	bhi.n	80024e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80024dc:	4a2d      	ldr	r2, [pc, #180]	; (8002594 <prvAddNewTaskToReadyList+0x100>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80024e2:	4b2e      	ldr	r3, [pc, #184]	; (800259c <prvAddNewTaskToReadyList+0x108>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a2c      	ldr	r2, [pc, #176]	; (800259c <prvAddNewTaskToReadyList+0x108>)
 80024ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <prvAddNewTaskToReadyList+0x108>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <prvAddNewTaskToReadyList+0x94>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fcc3 	bl	8005e88 <SEGGER_SYSVIEW_OnTaskCreate>
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	461d      	mov	r5, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461c      	mov	r4, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	1ae3      	subs	r3, r4, r3
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	462b      	mov	r3, r5
 8002524:	f001 fb88 	bl	8003c38 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fd30 	bl	8005f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2201      	movs	r2, #1
 8002536:	409a      	lsls	r2, r3
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <prvAddNewTaskToReadyList+0x10c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <prvAddNewTaskToReadyList+0x10c>)
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <prvAddNewTaskToReadyList+0x110>)
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f7ff fe3c 	bl	80021d6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800255e:	f000 ffc9 	bl	80034f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <prvAddNewTaskToReadyList+0x104>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <prvAddNewTaskToReadyList+0x100>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <prvAddNewTaskToReadyList+0x114>)
 800257a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bdb0      	pop	{r4, r5, r7, pc}
 8002590:	20000114 	.word	0x20000114
 8002594:	2000003c 	.word	0x2000003c
 8002598:	20000120 	.word	0x20000120
 800259c:	20000130 	.word	0x20000130
 80025a0:	2000011c 	.word	0x2000011c
 80025a4:	20000040 	.word	0x20000040
 80025a8:	e000ed04 	.word	0xe000ed04

080025ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80025b4:	f000 ff6e 	bl	8003494 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <vTaskDelete+0x18>
 80025be:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <vTaskDelete+0x12c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e000      	b.n	80025c6 <vTaskDelete+0x1a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fe5f 	bl	8002290 <uxListRemove>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d115      	bne.n	8002604 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	493f      	ldr	r1, [pc, #252]	; (80026dc <vTaskDelete+0x130>)
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <vTaskDelete+0x58>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	2201      	movs	r2, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43da      	mvns	r2, r3
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <vTaskDelete+0x134>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4013      	ands	r3, r2
 8002600:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <vTaskDelete+0x134>)
 8002602:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3318      	adds	r3, #24
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fe3d 	bl	8002290 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002616:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <vTaskDelete+0x138>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <vTaskDelete+0x138>)
 800261e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <vTaskDelete+0x12c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	429a      	cmp	r2, r3
 8002628:	d118      	bne.n	800265c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3304      	adds	r3, #4
 800262e:	4619      	mov	r1, r3
 8002630:	482d      	ldr	r0, [pc, #180]	; (80026e8 <vTaskDelete+0x13c>)
 8002632:	f7ff fdd0 	bl	80021d6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <vTaskDelete+0x140>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3301      	adds	r3, #1
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <vTaskDelete+0x140>)
 800263e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fd46 	bl	80060d4 <SEGGER_SYSVIEW_ShrinkId>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	2022      	movs	r0, #34	; 0x22
 800264e:	f002 ff93 	bl	8005578 <SEGGER_SYSVIEW_RecordU32>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fb57 	bl	8003d08 <SYSVIEW_DeleteTask>
 800265a:	e016      	b.n	800268a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <vTaskDelete+0x144>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3b01      	subs	r3, #1
 8002662:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <vTaskDelete+0x144>)
 8002664:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fd33 	bl	80060d4 <SEGGER_SYSVIEW_ShrinkId>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	2022      	movs	r0, #34	; 0x22
 8002674:	f002 ff80 	bl	8005578 <SEGGER_SYSVIEW_RecordU32>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f001 fb44 	bl	8003d08 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb3d 	bl	8002d00 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002686:	f000 fb4b 	bl	8002d20 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800268a:	f000 ff33 	bl	80034f4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <vTaskDelete+0x148>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01b      	beq.n	80026ce <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <vTaskDelete+0x12c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d116      	bne.n	80026ce <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <vTaskDelete+0x14c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <vTaskDelete+0x112>
        __asm volatile
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	60bb      	str	r3, [r7, #8]
    }
 80026ba:	bf00      	nop
 80026bc:	e7fe      	b.n	80026bc <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <vTaskDelete+0x150>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000003c 	.word	0x2000003c
 80026dc:	20000040 	.word	0x20000040
 80026e0:	2000011c 	.word	0x2000011c
 80026e4:	20000130 	.word	0x20000130
 80026e8:	200000e8 	.word	0x200000e8
 80026ec:	200000fc 	.word	0x200000fc
 80026f0:	20000114 	.word	0x20000114
 80026f4:	20000120 	.word	0x20000120
 80026f8:	2000013c 	.word	0x2000013c
 80026fc:	e000ed04 	.word	0xe000ed04

08002700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d01b      	beq.n	800274a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <vTaskDelay+0x68>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <vTaskDelay+0x30>
        __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	60bb      	str	r3, [r7, #8]
    }
 800272c:	bf00      	nop
 800272e:	e7fe      	b.n	800272e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002730:	f000 f87a 	bl	8002828 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	2023      	movs	r0, #35	; 0x23
 8002738:	f002 ff1e 	bl	8005578 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800273c:	2100      	movs	r1, #0
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fc84 	bl	800304c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002744:	f000 f87e 	bl	8002844 <xTaskResumeAll>
 8002748:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <vTaskDelay+0x6c>)
 8002752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000013c 	.word	0x2000013c
 800276c:	e000ed04 	.word	0xe000ed04

08002770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <vTaskStartScheduler+0x98>)
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2300      	movs	r3, #0
 8002780:	2282      	movs	r2, #130	; 0x82
 8002782:	4922      	ldr	r1, [pc, #136]	; (800280c <vTaskStartScheduler+0x9c>)
 8002784:	4822      	ldr	r0, [pc, #136]	; (8002810 <vTaskStartScheduler+0xa0>)
 8002786:	f7ff fdad 	bl	80022e4 <xTaskCreate>
 800278a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d124      	bne.n	80027dc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	60bb      	str	r3, [r7, #8]
    }
 80027a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <vTaskStartScheduler+0xa4>)
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <vTaskStartScheduler+0xa8>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <vTaskStartScheduler+0xac>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <vTaskStartScheduler+0xb0>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <vTaskStartScheduler+0x98>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d102      	bne.n	80027cc <vTaskStartScheduler+0x5c>
 80027c6:	f003 fb43 	bl	8005e50 <SEGGER_SYSVIEW_OnIdle>
 80027ca:	e004      	b.n	80027d6 <vTaskStartScheduler+0x66>
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <vTaskStartScheduler+0xb0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fb9b 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80027d6:	f000 fd3d 	bl	8003254 <xPortStartScheduler>
 80027da:	e00e      	b.n	80027fa <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d10a      	bne.n	80027fa <vTaskStartScheduler+0x8a>
        __asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	607b      	str	r3, [r7, #4]
    }
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <vTaskStartScheduler+0xb4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000138 	.word	0x20000138
 800280c:	08006554 	.word	0x08006554
 8002810:	08002bf5 	.word	0x08002bf5
 8002814:	20000134 	.word	0x20000134
 8002818:	20000120 	.word	0x20000120
 800281c:	20000118 	.word	0x20000118
 8002820:	2000003c 	.word	0x2000003c
 8002824:	2000000c 	.word	0x2000000c

08002828 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <vTaskSuspendAll+0x18>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	4a03      	ldr	r2, [pc, #12]	; (8002840 <vTaskSuspendAll+0x18>)
 8002834:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	2000013c 	.word	0x2000013c

08002844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <xTaskResumeAll+0x11c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <xTaskResumeAll+0x2c>
        __asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	603b      	str	r3, [r7, #0]
    }
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002870:	f000 fe10 	bl	8003494 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002874:	4b3a      	ldr	r3, [pc, #232]	; (8002960 <xTaskResumeAll+0x11c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	4a39      	ldr	r2, [pc, #228]	; (8002960 <xTaskResumeAll+0x11c>)
 800287c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <xTaskResumeAll+0x11c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d165      	bne.n	8002952 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002886:	4b37      	ldr	r3, [pc, #220]	; (8002964 <xTaskResumeAll+0x120>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d061      	beq.n	8002952 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800288e:	e032      	b.n	80028f6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <xTaskResumeAll+0x124>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3318      	adds	r3, #24
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fcf7 	bl	8002290 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3304      	adds	r3, #4
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fcf2 	bl	8002290 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fb6e 	bl	8005f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	2201      	movs	r2, #1
 80028ba:	409a      	lsls	r2, r3
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <xTaskResumeAll+0x128>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <xTaskResumeAll+0x128>)
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4a27      	ldr	r2, [pc, #156]	; (8002970 <xTaskResumeAll+0x12c>)
 80028d4:	441a      	add	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff fc7a 	bl	80021d6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <xTaskResumeAll+0x130>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <xTaskResumeAll+0x134>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <xTaskResumeAll+0x124>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c8      	bne.n	8002890 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002904:	f000 fa0c 	bl	8002d20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <xTaskResumeAll+0x138>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d010      	beq.n	8002936 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002914:	f000 f848 	bl	80029a8 <xTaskIncrementTick>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <xTaskResumeAll+0x134>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f1      	bne.n	8002914 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <xTaskResumeAll+0x138>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <xTaskResumeAll+0x134>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800293e:	2301      	movs	r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <xTaskResumeAll+0x13c>)
 8002944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002952:	f000 fdcf 	bl	80034f4 <vPortExitCritical>

    return xAlreadyYielded;
 8002956:	68bb      	ldr	r3, [r7, #8]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2000013c 	.word	0x2000013c
 8002964:	20000114 	.word	0x20000114
 8002968:	200000d4 	.word	0x200000d4
 800296c:	2000011c 	.word	0x2000011c
 8002970:	20000040 	.word	0x20000040
 8002974:	2000003c 	.word	0x2000003c
 8002978:	20000128 	.word	0x20000128
 800297c:	20000124 	.word	0x20000124
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800298a:	f000 fe6f 	bl	800366c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <xTaskGetTickCountFromISR+0x20>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002998:	683b      	ldr	r3, [r7, #0]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000118 	.word	0x20000118

080029a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b2:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <xTaskIncrementTick+0x14c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 8092 	bne.w	8002ae0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029bc:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <xTaskIncrementTick+0x150>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <xTaskIncrementTick+0x150>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d120      	bne.n	8002a12 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <xTaskIncrementTick+0x154>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <xTaskIncrementTick+0x48>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	603b      	str	r3, [r7, #0]
    }
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xTaskIncrementTick+0x46>
 80029f0:	4b42      	ldr	r3, [pc, #264]	; (8002afc <xTaskIncrementTick+0x154>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <xTaskIncrementTick+0x158>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a40      	ldr	r2, [pc, #256]	; (8002afc <xTaskIncrementTick+0x154>)
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <xTaskIncrementTick+0x158>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <xTaskIncrementTick+0x15c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	4a3e      	ldr	r2, [pc, #248]	; (8002b04 <xTaskIncrementTick+0x15c>)
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	f000 f987 	bl	8002d20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <xTaskIncrementTick+0x160>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d34c      	bcc.n	8002ab6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a1c:	4b37      	ldr	r3, [pc, #220]	; (8002afc <xTaskIncrementTick+0x154>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <xTaskIncrementTick+0x160>)
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	601a      	str	r2, [r3, #0]
                    break;
 8002a2e:	e042      	b.n	8002ab6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <xTaskIncrementTick+0x154>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d203      	bcs.n	8002a50 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <xTaskIncrementTick+0x160>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a4e:	e032      	b.n	8002ab6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fc1b 	bl	8002290 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3318      	adds	r3, #24
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fc12 	bl	8002290 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fa8e 	bl	8005f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <xTaskIncrementTick+0x164>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <xTaskIncrementTick+0x164>)
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <xTaskIncrementTick+0x168>)
 8002a94:	441a      	add	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	f7ff fb9a 	bl	80021d6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <xTaskIncrementTick+0x16c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3b5      	bcc.n	8002a1c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ab4:	e7b2      	b.n	8002a1c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <xTaskIncrementTick+0x16c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	4914      	ldr	r1, [pc, #80]	; (8002b10 <xTaskIncrementTick+0x168>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d901      	bls.n	8002ad2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <xTaskIncrementTick+0x170>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e004      	b.n	8002aea <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <xTaskIncrementTick+0x174>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <xTaskIncrementTick+0x174>)
 8002ae8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002aea:	697b      	ldr	r3, [r7, #20]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000013c 	.word	0x2000013c
 8002af8:	20000118 	.word	0x20000118
 8002afc:	200000cc 	.word	0x200000cc
 8002b00:	200000d0 	.word	0x200000d0
 8002b04:	2000012c 	.word	0x2000012c
 8002b08:	20000134 	.word	0x20000134
 8002b0c:	2000011c 	.word	0x2000011c
 8002b10:	20000040 	.word	0x20000040
 8002b14:	2000003c 	.word	0x2000003c
 8002b18:	20000128 	.word	0x20000128
 8002b1c:	20000124 	.word	0x20000124

08002b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <vTaskSwitchContext+0xbc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <vTaskSwitchContext+0xc0>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b34:	e04d      	b.n	8002bd2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <vTaskSwitchContext+0xc0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <vTaskSwitchContext+0xc4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	f1c3 031f 	rsb	r3, r3, #31
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	4925      	ldr	r1, [pc, #148]	; (8002be8 <vTaskSwitchContext+0xc8>)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <vTaskSwitchContext+0x5a>
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <vTaskSwitchContext+0xc8>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d104      	bne.n	8002bac <vTaskSwitchContext+0x8c>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <vTaskSwitchContext+0xcc>)
 8002bb4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <vTaskSwitchContext+0xcc>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <vTaskSwitchContext+0xd0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d102      	bne.n	8002bc8 <vTaskSwitchContext+0xa8>
 8002bc2:	f003 f945 	bl	8005e50 <SEGGER_SYSVIEW_OnIdle>
}
 8002bc6:	e004      	b.n	8002bd2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <vTaskSwitchContext+0xcc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f99d 	bl	8005f0c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000013c 	.word	0x2000013c
 8002be0:	20000128 	.word	0x20000128
 8002be4:	2000011c 	.word	0x2000011c
 8002be8:	20000040 	.word	0x20000040
 8002bec:	2000003c 	.word	0x2000003c
 8002bf0:	20000138 	.word	0x20000138

08002bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bfc:	f000 f852 	bl	8002ca4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <prvIdleTask+0x28>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d9f9      	bls.n	8002bfc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <prvIdleTask+0x2c>)
 8002c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c18:	e7f0      	b.n	8002bfc <prvIdleTask+0x8>
 8002c1a:	bf00      	nop
 8002c1c:	20000040 	.word	0x20000040
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	e00c      	b.n	8002c4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <prvInitialiseTaskLists+0x60>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fa9c 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3301      	adds	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d9ef      	bls.n	8002c30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c50:	480d      	ldr	r0, [pc, #52]	; (8002c88 <prvInitialiseTaskLists+0x64>)
 8002c52:	f7ff fa93 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <prvInitialiseTaskLists+0x68>)
 8002c58:	f7ff fa90 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <prvInitialiseTaskLists+0x6c>)
 8002c5e:	f7ff fa8d 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c62:	480c      	ldr	r0, [pc, #48]	; (8002c94 <prvInitialiseTaskLists+0x70>)
 8002c64:	f7ff fa8a 	bl	800217c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <prvInitialiseTaskLists+0x74>)
 8002c6a:	f7ff fa87 	bl	800217c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <prvInitialiseTaskLists+0x78>)
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <prvInitialiseTaskLists+0x64>)
 8002c72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <prvInitialiseTaskLists+0x7c>)
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <prvInitialiseTaskLists+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000040 	.word	0x20000040
 8002c88:	200000a4 	.word	0x200000a4
 8002c8c:	200000b8 	.word	0x200000b8
 8002c90:	200000d4 	.word	0x200000d4
 8002c94:	200000e8 	.word	0x200000e8
 8002c98:	20000100 	.word	0x20000100
 8002c9c:	200000cc 	.word	0x200000cc
 8002ca0:	200000d0 	.word	0x200000d0

08002ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002caa:	e019      	b.n	8002ce0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002cac:	f000 fbf2 	bl	8003494 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <prvCheckTasksWaitingTermination+0x50>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fae7 	bl	8002290 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <prvCheckTasksWaitingTermination+0x54>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <prvCheckTasksWaitingTermination+0x54>)
 8002cca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <prvCheckTasksWaitingTermination+0x58>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <prvCheckTasksWaitingTermination+0x58>)
 8002cd4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002cd6:	f000 fc0d 	bl	80034f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f810 	bl	8002d00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <prvCheckTasksWaitingTermination+0x58>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e1      	bne.n	8002cac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200000e8 	.word	0x200000e8
 8002cf8:	20000114 	.word	0x20000114
 8002cfc:	200000fc 	.word	0x200000fc

08002d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fdcd 	bl	80038ac <vPortFree>
                vPortFree( pxTCB );
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fdca 	bl	80038ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <prvResetNextTaskUnblockTime+0x30>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <prvResetNextTaskUnblockTime+0x34>)
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d36:	e005      	b.n	8002d44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <prvResetNextTaskUnblockTime+0x30>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <prvResetNextTaskUnblockTime+0x34>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	200000cc 	.word	0x200000cc
 8002d54:	20000134 	.word	0x20000134

08002d58 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	613b      	str	r3, [r7, #16]
    }
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002d82:	f000 fb87 	bl	8003494 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002d86:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3354      	adds	r3, #84	; 0x54
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d022      	beq.n	8002dde <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	3214      	adds	r2, #20
 8002da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	43d2      	mvns	r2, r2
 8002da8:	4011      	ands	r1, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	3214      	adds	r2, #20
 8002dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002db2:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	3354      	adds	r3, #84	; 0x54
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	6a38      	ldr	r0, [r7, #32]
 8002dca:	f000 f93f 	bl	800304c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <xTaskGenericNotifyWait+0x10c>)
 8002dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002dde:	f000 fb89 	bl	80034f4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002de2:	f000 fb57 	bl	8003494 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	2040      	movs	r0, #64	; 0x40
 8002df4:	f002 fc56 	bl	80056a4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	3214      	adds	r2, #20
 8002e06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	3354      	adds	r3, #84	; 0x54
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d002      	beq.n	8002e26 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e00e      	b.n	8002e44 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	3214      	adds	r2, #20
 8002e2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	43d2      	mvns	r2, r2
 8002e36:	4011      	ands	r1, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	3214      	adds	r2, #20
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <xTaskGenericNotifyWait+0x108>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3354      	adds	r3, #84	; 0x54
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002e52:	f000 fb4f 	bl	80034f4 <vPortExitCritical>

        return xReturn;
 8002e56:	697b      	ldr	r3, [r7, #20]
    }
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000003c 	.word	0x2000003c
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	623b      	str	r3, [r7, #32]
    }
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xTaskGenericNotify+0x4a>
        __asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	61fb      	str	r3, [r7, #28]
    }
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002eb6:	f000 faed 	bl	8003494 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	3214      	adds	r2, #20
 8002ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3354      	adds	r3, #84	; 0x54
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3354      	adds	r3, #84	; 0x54
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d83b      	bhi.n	8002f66 <xTaskGenericNotify+0xfe>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <xTaskGenericNotify+0x8c>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f85 	.word	0x08002f85
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f3d 	.word	0x08002f3d
 8002f04:	08002f4b 	.word	0x08002f4b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	3214      	adds	r2, #20
 8002f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	3214      	adds	r2, #20
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002f22:	e032      	b.n	8002f8a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	3214      	adds	r2, #20
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	3214      	adds	r2, #20
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002f3a:	e026      	b.n	8002f8a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	3214      	adds	r2, #20
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002f48:	e01f      	b.n	8002f8a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d006      	beq.n	8002f60 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	3214      	adds	r2, #20
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8002f5e:	e014      	b.n	8002f8a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002f64:	e011      	b.n	8002f8a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <xTaskGenericNotify+0x1d0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <xTaskGenericNotify+0x120>
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	61bb      	str	r3, [r7, #24]
    }
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskGenericNotify+0x11a>
                    break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <xTaskGenericNotify+0x122>

                    break;
 8002f88:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 f8a1 	bl	80060d4 <SEGGER_SYSVIEW_ShrinkId>
 8002f92:	4601      	mov	r1, r0
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	203e      	movs	r0, #62	; 0x3e
 8002fa0:	f002 fb80 	bl	80056a4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d13d      	bne.n	8003028 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f96d 	bl	8002290 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 ffe9 	bl	8005f90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <xTaskGenericNotify+0x1d4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	; (800303c <xTaskGenericNotify+0x1d4>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <xTaskGenericNotify+0x1d8>)
 8002fde:	441a      	add	r2, r3
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7ff f8f5 	bl	80021d6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <xTaskGenericNotify+0x1a2>
        __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	617b      	str	r3, [r7, #20]
    }
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <xTaskGenericNotify+0x1dc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d907      	bls.n	8003028 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <xTaskGenericNotify+0x1e0>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003028:	f000 fa64 	bl	80034f4 <vPortExitCritical>

        return xReturn;
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800302e:	4618      	mov	r0, r3
 8003030:	3730      	adds	r7, #48	; 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000118 	.word	0x20000118
 800303c:	2000011c 	.word	0x2000011c
 8003040:	20000040 	.word	0x20000040
 8003044:	2000003c 	.word	0x2000003c
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003056:	4b32      	ldr	r3, [pc, #200]	; (8003120 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3304      	adds	r3, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f914 	bl	8002290 <uxListRemove>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	2201      	movs	r2, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <prvAddCurrentTaskToDelayedList+0xdc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4013      	ands	r3, r2
 8003082:	4a29      	ldr	r2, [pc, #164]	; (8003128 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003084:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d110      	bne.n	80030b0 <prvAddCurrentTaskToDelayedList+0x64>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003094:	4b23      	ldr	r3, [pc, #140]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	211b      	movs	r1, #27
 800309a:	4618      	mov	r0, r3
 800309c:	f002 ffba 	bl	8006014 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a0:	4b20      	ldr	r3, [pc, #128]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4820      	ldr	r0, [pc, #128]	; (800312c <prvAddCurrentTaskToDelayedList+0xe0>)
 80030aa:	f7ff f894 	bl	80021d6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80030ae:	e032      	b.n	8003116 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d20f      	bcs.n	80030e8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2104      	movs	r1, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f002 ffa0 	bl	8006014 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <prvAddCurrentTaskToDelayedList+0xe4>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3304      	adds	r3, #4
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f7ff f89c 	bl	800221e <vListInsert>
}
 80030e6:	e016      	b.n	8003116 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2104      	movs	r1, #4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 ff90 	bl	8006014 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <prvAddCurrentTaskToDelayedList+0xe8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <prvAddCurrentTaskToDelayedList+0xd8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7ff f88c 	bl	800221e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <prvAddCurrentTaskToDelayedList+0xec>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d202      	bcs.n	8003116 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003110:	4a09      	ldr	r2, [pc, #36]	; (8003138 <prvAddCurrentTaskToDelayedList+0xec>)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6013      	str	r3, [r2, #0]
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000118 	.word	0x20000118
 8003124:	2000003c 	.word	0x2000003c
 8003128:	2000011c 	.word	0x2000011c
 800312c:	20000100 	.word	0x20000100
 8003130:	200000d0 	.word	0x200000d0
 8003134:	200000cc 	.word	0x200000cc
 8003138:	20000134 	.word	0x20000134

0800313c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3b04      	subs	r3, #4
 800314c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003154:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b04      	subs	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0201 	bic.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3b04      	subs	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800316c:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <pxPortInitialiseStack+0x64>)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b14      	subs	r3, #20
 8003176:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3b04      	subs	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f06f 0202 	mvn.w	r2, #2
 800318a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3b20      	subs	r3, #32
 8003190:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	080031a5 	.word	0x080031a5

080031a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <prvTaskExitError+0x54>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d00a      	beq.n	80031ce <prvTaskExitError+0x2a>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60fb      	str	r3, [r7, #12]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <prvTaskExitError+0x28>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	60bb      	str	r3, [r7, #8]
    }
 80031e0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80031e2:	bf00      	nop
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0fc      	beq.n	80031e4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	20000010 	.word	0x20000010
 80031fc:	00000000 	.word	0x00000000

08003200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <pxCurrentTCBConst2>)
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	6808      	ldr	r0, [r1, #0]
 8003206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320a:	f380 8809 	msr	PSP, r0
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f380 8811 	msr	BASEPRI, r0
 800321a:	4770      	bx	lr
 800321c:	f3af 8000 	nop.w

08003220 <pxCurrentTCBConst2>:
 8003220:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop

08003228 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003228:	4808      	ldr	r0, [pc, #32]	; (800324c <prvPortStartFirstTask+0x24>)
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	6800      	ldr	r0, [r0, #0]
 800322e:	f380 8808 	msr	MSP, r0
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f380 8814 	msr	CONTROL, r0
 800323a:	b662      	cpsie	i
 800323c:	b661      	cpsie	f
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	df00      	svc	0
 8003248:	bf00      	nop
 800324a:	0000      	.short	0x0000
 800324c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop

08003254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <xPortStartScheduler+0x120>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a46      	ldr	r2, [pc, #280]	; (8003378 <xPortStartScheduler+0x124>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10a      	bne.n	800327a <xPortStartScheduler+0x26>
        __asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	613b      	str	r3, [r7, #16]
    }
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800327a:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <xPortStartScheduler+0x120>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3f      	ldr	r2, [pc, #252]	; (800337c <xPortStartScheduler+0x128>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10a      	bne.n	800329a <xPortStartScheduler+0x46>
        __asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	60fb      	str	r3, [r7, #12]
    }
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <xPortStartScheduler+0x12c>)
 800329c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b31      	ldr	r3, [pc, #196]	; (8003384 <xPortStartScheduler+0x130>)
 80032c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032c2:	4b31      	ldr	r3, [pc, #196]	; (8003388 <xPortStartScheduler+0x134>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032c8:	e009      	b.n	80032de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <xPortStartScheduler+0x134>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <xPortStartScheduler+0x134>)
 80032d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d0ef      	beq.n	80032ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80032ea:	4b27      	ldr	r3, [pc, #156]	; (8003388 <xPortStartScheduler+0x134>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d00a      	beq.n	800330c <xPortStartScheduler+0xb8>
        __asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60bb      	str	r3, [r7, #8]
    }
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <xPortStartScheduler+0x134>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <xPortStartScheduler+0x134>)
 8003314:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <xPortStartScheduler+0x134>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800331e:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <xPortStartScheduler+0x134>)
 8003320:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <xPortStartScheduler+0x138>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a17      	ldr	r2, [pc, #92]	; (800338c <xPortStartScheduler+0x138>)
 8003330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003334:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <xPortStartScheduler+0x138>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a14      	ldr	r2, [pc, #80]	; (800338c <xPortStartScheduler+0x138>)
 800333c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003340:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003342:	f000 f963 	bl	800360c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <xPortStartScheduler+0x13c>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800334c:	f000 f982 	bl	8003654 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <xPortStartScheduler+0x140>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <xPortStartScheduler+0x140>)
 8003356:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800335a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800335c:	f7ff ff64 	bl	8003228 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003360:	f7ff fbde 	bl	8002b20 <vTaskSwitchContext>
    prvTaskExitError();
 8003364:	f7ff ff1e 	bl	80031a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	e000ed00 	.word	0xe000ed00
 8003378:	410fc271 	.word	0x410fc271
 800337c:	410fc270 	.word	0x410fc270
 8003380:	e000e400 	.word	0xe000e400
 8003384:	20000140 	.word	0x20000140
 8003388:	20000144 	.word	0x20000144
 800338c:	e000ed20 	.word	0xe000ed20
 8003390:	20000010 	.word	0x20000010
 8003394:	e000ef34 	.word	0xe000ef34

08003398 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800339e:	4b37      	ldr	r3, [pc, #220]	; (800347c <vInitPrioGroupValue+0xe4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a37      	ldr	r2, [pc, #220]	; (8003480 <vInitPrioGroupValue+0xe8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10a      	bne.n	80033be <vInitPrioGroupValue+0x26>
        __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	613b      	str	r3, [r7, #16]
    }
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <vInitPrioGroupValue+0xe4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a30      	ldr	r2, [pc, #192]	; (8003484 <vInitPrioGroupValue+0xec>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10a      	bne.n	80033de <vInitPrioGroupValue+0x46>
        __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60fb      	str	r3, [r7, #12]
    }
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <vInitPrioGroupValue+0xf0>)
 80033e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <vInitPrioGroupValue+0xf4>)
 8003404:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003408:	2207      	movs	r2, #7
 800340a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800340c:	e009      	b.n	8003422 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3b01      	subs	r3, #1
 8003414:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003416:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d0ef      	beq.n	800340e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	d00a      	beq.n	8003450 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	60bb      	str	r3, [r7, #8]
    }
 800344c:	bf00      	nop
 800344e:	e7fe      	b.n	800344e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003458:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <vInitPrioGroupValue+0xf8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <vInitPrioGroupValue+0xf8>)
 8003464:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	e000ed00 	.word	0xe000ed00
 8003480:	410fc271 	.word	0x410fc271
 8003484:	410fc270 	.word	0x410fc270
 8003488:	e000e400 	.word	0xe000e400
 800348c:	20000140 	.word	0x20000140
 8003490:	20000144 	.word	0x20000144

08003494 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
        __asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
    }
 80034ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80034ae:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <vPortEnterCritical+0x58>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <vPortEnterCritical+0x58>)
 80034b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <vPortEnterCritical+0x58>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10f      	bne.n	80034e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <vPortEnterCritical+0x5c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	603b      	str	r3, [r7, #0]
    }
 80034dc:	bf00      	nop
 80034de:	e7fe      	b.n	80034de <vPortEnterCritical+0x4a>
    }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000010 	.word	0x20000010
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <vPortExitCritical+0x50>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vPortExitCritical+0x24>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	607b      	str	r3, [r7, #4]
    }
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <vPortExitCritical+0x50>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3b01      	subs	r3, #1
 800351e:	4a09      	ldr	r2, [pc, #36]	; (8003544 <vPortExitCritical+0x50>)
 8003520:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <vPortExitCritical+0x50>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <vPortExitCritical+0x42>
 800352a:	2300      	movs	r3, #0
 800352c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003534:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000010 	.word	0x20000010
	...

08003550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003550:	f3ef 8009 	mrs	r0, PSP
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <pxCurrentTCBConst>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	f01e 0f10 	tst.w	lr, #16
 8003560:	bf08      	it	eq
 8003562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356a:	6010      	str	r0, [r2, #0]
 800356c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003574:	f380 8811 	msr	BASEPRI, r0
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f7ff face 	bl	8002b20 <vTaskSwitchContext>
 8003584:	f04f 0000 	mov.w	r0, #0
 8003588:	f380 8811 	msr	BASEPRI, r0
 800358c:	bc09      	pop	{r0, r3}
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	6808      	ldr	r0, [r1, #0]
 8003592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003596:	f01e 0f10 	tst.w	lr, #16
 800359a:	bf08      	it	eq
 800359c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035a0:	f380 8809 	msr	PSP, r0
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	f3af 8000 	nop.w

080035b0 <pxCurrentTCBConst>:
 80035b0:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop

080035b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	607b      	str	r3, [r7, #4]
    }
 80035d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80035d2:	f002 fbc3 	bl	8005d5c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035d6:	f7ff f9e7 	bl	80029a8 <xTaskIncrementTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80035e0:	f002 fc1a 	bl	8005e18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <SysTick_Handler+0x50>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e001      	b.n	80035f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80035ee:	f002 fbf7 	bl	8005de0 <SEGGER_SYSVIEW_RecordExitISR>
 80035f2:	2300      	movs	r3, #0
 80035f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f383 8811 	msr	BASEPRI, r3
    }
 80035fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <vPortSetupTimerInterrupt+0x34>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <vPortSetupTimerInterrupt+0x38>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <vPortSetupTimerInterrupt+0x3c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <vPortSetupTimerInterrupt+0x40>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <vPortSetupTimerInterrupt+0x44>)
 800362a:	3b01      	subs	r3, #1
 800362c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <vPortSetupTimerInterrupt+0x34>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e010 	.word	0xe000e010
 8003644:	e000e018 	.word	0xe000e018
 8003648:	20000000 	.word	0x20000000
 800364c:	10624dd3 	.word	0x10624dd3
 8003650:	e000e014 	.word	0xe000e014

08003654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003664 <vPortEnableVFP+0x10>
 8003658:	6801      	ldr	r1, [r0, #0]
 800365a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800365e:	6001      	str	r1, [r0, #0]
 8003660:	4770      	bx	lr
 8003662:	0000      	.short	0x0000
 8003664:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop

0800366c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003672:	f3ef 8305 	mrs	r3, IPSR
 8003676:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	d914      	bls.n	80036a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800367e:	4a17      	ldr	r2, [pc, #92]	; (80036dc <vPortValidateInterruptPriority+0x70>)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <vPortValidateInterruptPriority+0x74>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	7afa      	ldrb	r2, [r7, #11]
 800368e:	429a      	cmp	r2, r3
 8003690:	d20a      	bcs.n	80036a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	607b      	str	r3, [r7, #4]
    }
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <vPortValidateInterruptPriority+0x78>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036b0:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <vPortValidateInterruptPriority+0x7c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d90a      	bls.n	80036ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	603b      	str	r3, [r7, #0]
    }
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <vPortValidateInterruptPriority+0x60>
    }
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e3f0 	.word	0xe000e3f0
 80036e0:	20000140 	.word	0x20000140
 80036e4:	e000ed0c 	.word	0xe000ed0c
 80036e8:	20000144 	.word	0x20000144

080036ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80036f8:	f7ff f896 	bl	8002828 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80036fc:	4b65      	ldr	r3, [pc, #404]	; (8003894 <pvPortMalloc+0x1a8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003704:	f000 f934 	bl	8003970 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003708:	4b63      	ldr	r3, [pc, #396]	; (8003898 <pvPortMalloc+0x1ac>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 80a7 	bne.w	8003864 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02d      	beq.n	8003778 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800371c:	2208      	movs	r2, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d227      	bcs.n	8003778 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003728:	2208      	movs	r2, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	2b00      	cmp	r3, #0
 8003738:	d021      	beq.n	800377e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f023 0307 	bic.w	r3, r3, #7
 8003740:	3308      	adds	r3, #8
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d214      	bcs.n	8003772 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f023 0307 	bic.w	r3, r3, #7
 800374e:	3308      	adds	r3, #8
 8003750:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <pvPortMalloc+0x92>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	617b      	str	r3, [r7, #20]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003776:	e002      	b.n	800377e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	e000      	b.n	8003780 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800377e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06e      	beq.n	8003864 <pvPortMalloc+0x178>
 8003786:	4b45      	ldr	r3, [pc, #276]	; (800389c <pvPortMalloc+0x1b0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d869      	bhi.n	8003864 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <pvPortMalloc+0x1b4>)
 8003792:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003794:	4b42      	ldr	r3, [pc, #264]	; (80038a0 <pvPortMalloc+0x1b4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800379a:	e004      	b.n	80037a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d903      	bls.n	80037b8 <pvPortMalloc+0xcc>
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f1      	bne.n	800379c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037b8:	4b36      	ldr	r3, [pc, #216]	; (8003894 <pvPortMalloc+0x1a8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	429a      	cmp	r2, r3
 80037c0:	d050      	beq.n	8003864 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2208      	movs	r2, #8
 80037c8:	4413      	add	r3, r2
 80037ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	2308      	movs	r3, #8
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d91f      	bls.n	8003824 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <pvPortMalloc+0x120>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	613b      	str	r3, [r7, #16]
    }
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800381e:	69b8      	ldr	r0, [r7, #24]
 8003820:	f000 f908 	bl	8003a34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <pvPortMalloc+0x1b0>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <pvPortMalloc+0x1b0>)
 8003830:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <pvPortMalloc+0x1b0>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <pvPortMalloc+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d203      	bcs.n	8003846 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <pvPortMalloc+0x1b0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <pvPortMalloc+0x1b8>)
 8003844:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <pvPortMalloc+0x1ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	431a      	orrs	r2, r3
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800385a:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <pvPortMalloc+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <pvPortMalloc+0x1bc>)
 8003862:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003864:	f7fe ffee 	bl	8002844 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <pvPortMalloc+0x19c>
        __asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60fb      	str	r3, [r7, #12]
    }
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <pvPortMalloc+0x19a>
    return pvReturn;
 8003888:	69fb      	ldr	r3, [r7, #28]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3728      	adds	r7, #40	; 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20019150 	.word	0x20019150
 8003898:	20019164 	.word	0x20019164
 800389c:	20019154 	.word	0x20019154
 80038a0:	20019148 	.word	0x20019148
 80038a4:	20019158 	.word	0x20019158
 80038a8:	2001915c 	.word	0x2001915c

080038ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04d      	beq.n	800395a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038be:	2308      	movs	r3, #8
 80038c0:	425b      	negs	r3, r3
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <vPortFree+0xb8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <vPortFree+0x44>
        __asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60fb      	str	r3, [r7, #12]
    }
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <vPortFree+0x62>
        __asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60bb      	str	r3, [r7, #8]
    }
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <vPortFree+0xb8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01e      	beq.n	800395a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11a      	bne.n	800395a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <vPortFree+0xb8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003934:	f7fe ff78 	bl	8002828 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <vPortFree+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4413      	add	r3, r2
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <vPortFree+0xbc>)
 8003944:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003946:	6938      	ldr	r0, [r7, #16]
 8003948:	f000 f874 	bl	8003a34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <vPortFree+0xc0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	4a06      	ldr	r2, [pc, #24]	; (800396c <vPortFree+0xc0>)
 8003954:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003956:	f7fe ff75 	bl	8002844 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20019164 	.word	0x20019164
 8003968:	20019154 	.word	0x20019154
 800396c:	20019160 	.word	0x20019160

08003970 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003976:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800397a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <prvHeapInit+0xac>)
 800397e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00c      	beq.n	80039a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3307      	adds	r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0307 	bic.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <prvHeapInit+0xac>)
 80039a0:	4413      	add	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <prvHeapInit+0xb0>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <prvHeapInit+0xb0>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	4413      	add	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039bc:	2208      	movs	r2, #8
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <prvHeapInit+0xb4>)
 80039d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <prvHeapInit+0xb4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2200      	movs	r2, #0
 80039d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <prvHeapInit+0xb4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	1ad2      	subs	r2, r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <prvHeapInit+0xb4>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <prvHeapInit+0xb8>)
 80039fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <prvHeapInit+0xbc>)
 8003a06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <prvHeapInit+0xc0>)
 8003a0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	20000148 	.word	0x20000148
 8003a20:	20019148 	.word	0x20019148
 8003a24:	20019150 	.word	0x20019150
 8003a28:	20019158 	.word	0x20019158
 8003a2c:	20019154 	.word	0x20019154
 8003a30:	20019164 	.word	0x20019164

08003a34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a3c:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <prvInsertBlockIntoFreeList+0xac>)
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <prvInsertBlockIntoFreeList+0x14>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d8f7      	bhi.n	8003a42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d108      	bne.n	8003a76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	441a      	add	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d118      	bne.n	8003abc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d00d      	beq.n	8003ab2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e008      	b.n	8003ac4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <prvInsertBlockIntoFreeList+0xb0>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e003      	b.n	8003ac4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d002      	beq.n	8003ad2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20019148 	.word	0x20019148
 8003ae4:	20019150 	.word	0x20019150

08003ae8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003aec:	4803      	ldr	r0, [pc, #12]	; (8003afc <_cbSendSystemDesc+0x14>)
 8003aee:	f002 f8df 	bl	8005cb0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003af2:	4803      	ldr	r0, [pc, #12]	; (8003b00 <_cbSendSystemDesc+0x18>)
 8003af4:	f002 f8dc 	bl	8005cb0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	0800655c 	.word	0x0800655c
 8003b00:	080065a0 	.word	0x080065a0

08003b04 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b12:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <SEGGER_SYSVIEW_Conf+0x28>)
 8003b14:	f001 fcbe 	bl	8005494 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b1c:	f001 fcfe 	bl	800551c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000000 	.word	0x20000000
 8003b28:	08003ae9 	.word	0x08003ae9
 8003b2c:	08006640 	.word	0x08006640

08003b30 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	e033      	b.n	8003ba4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b3c:	491e      	ldr	r1, [pc, #120]	; (8003bb8 <_cbSendTaskList+0x88>)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	491a      	ldr	r1, [pc, #104]	; (8003bb8 <_cbSendTaskList+0x88>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	4c16      	ldr	r4, [pc, #88]	; (8003bb8 <_cbSendTaskList+0x88>)
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4423      	add	r3, r4
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	681c      	ldr	r4, [r3, #0]
 8003b70:	4d11      	ldr	r5, [pc, #68]	; (8003bb8 <_cbSendTaskList+0x88>)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	442b      	add	r3, r5
 8003b7e:	330c      	adds	r3, #12
 8003b80:	681d      	ldr	r5, [r3, #0]
 8003b82:	4e0d      	ldr	r6, [pc, #52]	; (8003bb8 <_cbSendTaskList+0x88>)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4433      	add	r3, r6
 8003b90:	3310      	adds	r3, #16
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	462b      	mov	r3, r5
 8003b98:	4622      	mov	r2, r4
 8003b9a:	f000 f971 	bl	8003e80 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <_cbSendTaskList+0x8c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3c6      	bcc.n	8003b3c <_cbSendTaskList+0xc>
  }
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb8:	20019168 	.word	0x20019168
 8003bbc:	20019208 	.word	0x20019208

08003bc0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003bc0:	b5b0      	push	{r4, r5, r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003bc6:	f7fe fedd 	bl	8002984 <xTaskGetTickCountFromISR>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	f04f 0400 	mov.w	r4, #0
 8003be2:	f04f 0500 	mov.w	r5, #0
 8003be6:	015d      	lsls	r5, r3, #5
 8003be8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003bec:	0154      	lsls	r4, r2, #5
 8003bee:	4622      	mov	r2, r4
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	1a12      	subs	r2, r2, r0
 8003bf4:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf8:	f04f 0400 	mov.w	r4, #0
 8003bfc:	f04f 0500 	mov.w	r5, #0
 8003c00:	009d      	lsls	r5, r3, #2
 8003c02:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003c06:	0094      	lsls	r4, r2, #2
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	1812      	adds	r2, r2, r0
 8003c0e:	eb41 0303 	adc.w	r3, r1, r3
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	00d9      	lsls	r1, r3, #3
 8003c1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c20:	00d0      	lsls	r0, r2, #3
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bdb0      	pop	{r4, r5, r7, pc}

08003c38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003c46:	2205      	movs	r2, #5
 8003c48:	492b      	ldr	r1, [pc, #172]	; (8003cf8 <SYSVIEW_AddTask+0xc0>)
 8003c4a:	68b8      	ldr	r0, [r7, #8]
 8003c4c:	f002 fbf0 	bl	8006430 <memcmp>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04b      	beq.n	8003cee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c56:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b07      	cmp	r3, #7
 8003c5c:	d903      	bls.n	8003c66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c5e:	4828      	ldr	r0, [pc, #160]	; (8003d00 <SYSVIEW_AddTask+0xc8>)
 8003c60:	f002 fb38 	bl	80062d4 <SEGGER_SYSVIEW_Warn>
    return;
 8003c64:	e044      	b.n	8003cf0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4926      	ldr	r1, [pc, #152]	; (8003d04 <SYSVIEW_AddTask+0xcc>)
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4921      	ldr	r1, [pc, #132]	; (8003d04 <SYSVIEW_AddTask+0xcc>)
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	491b      	ldr	r1, [pc, #108]	; (8003d04 <SYSVIEW_AddTask+0xcc>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4916      	ldr	r1, [pc, #88]	; (8003d04 <SYSVIEW_AddTask+0xcc>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4910      	ldr	r1, [pc, #64]	; (8003d04 <SYSVIEW_AddTask+0xcc>)
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	3310      	adds	r3, #16
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <SYSVIEW_AddTask+0xc4>)
 8003cda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f8ca 	bl	8003e80 <SYSVIEW_SendTaskInfo>
 8003cec:	e000      	b.n	8003cf0 <SYSVIEW_AddTask+0xb8>
    return;
 8003cee:	bf00      	nop

}
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	080065b0 	.word	0x080065b0
 8003cfc:	20019208 	.word	0x20019208
 8003d00:	080065b8 	.word	0x080065b8
 8003d04:	20019168 	.word	0x20019168

08003d08 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80ab 	beq.w	8003e70 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e00d      	b.n	8003d3c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003d20:	4956      	ldr	r1, [pc, #344]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d008      	beq.n	8003d48 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3ec      	bcc.n	8003d20 <SYSVIEW_DeleteTask+0x18>
 8003d46:	e000      	b.n	8003d4a <SYSVIEW_DeleteTask+0x42>
      break;
 8003d48:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003d4a:	4b4b      	ldr	r3, [pc, #300]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d111      	bne.n	8003d7a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4a46      	ldr	r2, [pc, #280]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003d62:	4413      	add	r3, r2
 8003d64:	2214      	movs	r2, #20
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 fb7d 	bl	8006468 <memset>
    _NumTasks--;
 8003d6e:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	e07b      	b.n	8003e72 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003d7a:	4b3f      	ldr	r3, [pc, #252]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d276      	bcs.n	8003e72 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003d84:	4b3c      	ldr	r3, [pc, #240]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1e5a      	subs	r2, r3, #1
 8003d8a:	493c      	ldr	r1, [pc, #240]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	6819      	ldr	r1, [r3, #0]
 8003d98:	4838      	ldr	r0, [pc, #224]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4403      	add	r3, r0
 8003da6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	4933      	ldr	r1, [pc, #204]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3304      	adds	r3, #4
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	482f      	ldr	r0, [pc, #188]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	3304      	adds	r3, #4
 8003dce:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	4929      	ldr	r1, [pc, #164]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	3308      	adds	r3, #8
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	4825      	ldr	r0, [pc, #148]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4403      	add	r3, r0
 8003df4:	3308      	adds	r3, #8
 8003df6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	491f      	ldr	r1, [pc, #124]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	481b      	ldr	r0, [pc, #108]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4403      	add	r3, r0
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003e20:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1e5a      	subs	r2, r3, #1
 8003e26:	4915      	ldr	r1, [pc, #84]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3310      	adds	r3, #16
 8003e34:	6819      	ldr	r1, [r3, #0]
 8003e36:	4811      	ldr	r0, [pc, #68]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4403      	add	r3, r0
 8003e44:	3310      	adds	r3, #16
 8003e46:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <SYSVIEW_DeleteTask+0x174>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	2214      	movs	r2, #20
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f002 fb02 	bl	8006468 <memset>
    _NumTasks--;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a03      	ldr	r2, [pc, #12]	; (8003e78 <SYSVIEW_DeleteTask+0x170>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e000      	b.n	8003e72 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003e70:	bf00      	nop
  }
}
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20019208 	.word	0x20019208
 8003e7c:	20019168 	.word	0x20019168

08003e80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e8e:	f107 0314 	add.w	r3, r7, #20
 8003e92:	2214      	movs	r2, #20
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f002 fae6 	bl	8006468 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fe03 	bl	8005ac0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003eba:	bf00      	nop
 8003ebc:	3728      	adds	r7, #40	; 0x28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <__NVIC_EnableIRQ>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	db0b      	blt.n	8003eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	f003 021f 	and.w	r2, r3, #31
 8003edc:	4907      	ldr	r1, [pc, #28]	; (8003efc <__NVIC_EnableIRQ+0x38>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000e100 	.word	0xe000e100

08003f00 <__NVIC_SetPriority>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db0a      	blt.n	8003f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	490c      	ldr	r1, [pc, #48]	; (8003f4c <__NVIC_SetPriority+0x4c>)
 8003f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	440b      	add	r3, r1
 8003f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f28:	e00a      	b.n	8003f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4908      	ldr	r1, [pc, #32]	; (8003f50 <__NVIC_SetPriority+0x50>)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	3b04      	subs	r3, #4
 8003f38:	0112      	lsls	r2, r2, #4
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	761a      	strb	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000e100 	.word	0xe000e100
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003f5a:	f002 fa17 	bl	800638c <SEGGER_SYSVIEW_IsStarted>
 8003f5e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003f66:	f001 fc2f 	bl	80057c8 <SEGGER_SYSVIEW_Start>
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <_cbOnUARTRx+0x3c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d806      	bhi.n	8003f94 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <_cbOnUARTRx+0x3c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <_cbOnUARTRx+0x3c>)
 8003f90:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003f92:	e009      	b.n	8003fa8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003f94:	f7ff ffde 	bl	8003f54 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <_cbOnUARTRx+0x3c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	1dfb      	adds	r3, r7, #7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f000 fb9a 	bl	80046dc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003fa8:	bf00      	nop
}
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000014 	.word	0x20000014

08003fb4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <_cbOnUARTTx+0x5c>)
 8003fbe:	785b      	ldrb	r3, [r3, #1]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d80f      	bhi.n	8003fe4 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <_cbOnUARTTx+0x5c>)
 8003fc6:	785b      	ldrb	r3, [r3, #1]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <_cbOnUARTTx+0x60>)
 8003fcc:	5c9a      	ldrb	r2, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <_cbOnUARTTx+0x5c>)
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <_cbOnUARTTx+0x5c>)
 8003fdc:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003fe2:	e00f      	b.n	8004004 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <_cbOnUARTTx+0x5c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fa19 	bl	8004424 <SEGGER_RTT_ReadUpBufferNoLock>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	da02      	bge.n	8004002 <_cbOnUARTTx+0x4e>
    r = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e000      	b.n	8004004 <_cbOnUARTTx+0x50>
  }
Done:
 8004002:	bf00      	nop
  return r;
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000014 	.word	0x20000014
 8004014:	08006648 	.word	0x08006648

08004018 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <SEGGER_UART_init+0x1c>)
 8004022:	4905      	ldr	r1, [pc, #20]	; (8004038 <SEGGER_UART_init+0x20>)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f863 	bl	80040f0 <HIF_UART_Init>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	08003f75 	.word	0x08003f75
 8004038:	08003fb5 	.word	0x08003fb5

0800403c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <USART2_IRQHandler+0x80>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <USART2_IRQHandler+0x84>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 030b 	and.w	r3, r3, #11
 8004060:	2b00      	cmp	r3, #0
 8004062:	d108      	bne.n	8004076 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <USART2_IRQHandler+0x88>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800406c:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <USART2_IRQHandler+0x88>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	79fa      	ldrb	r2, [r7, #7]
 8004072:	4610      	mov	r0, r2
 8004074:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <USART2_IRQHandler+0x8c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d015      	beq.n	80040b4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <USART2_IRQHandler+0x8c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1dfa      	adds	r2, r7, #7
 800408e:	4610      	mov	r0, r2
 8004090:	4798      	blx	r3
 8004092:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800409a:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <USART2_IRQHandler+0x90>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <USART2_IRQHandler+0x90>)
 80040a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e006      	b.n	80040b6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <USART2_IRQHandler+0x80>)
 80040aa:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80040ac:	79fa      	ldrb	r2, [r7, #7]
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <USART2_IRQHandler+0x84>)
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e000      	b.n	80040b6 <USART2_IRQHandler+0x7a>
      return;
 80040b4:	bf00      	nop
    }
  }
}
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40004400 	.word	0x40004400
 80040c0:	40004404 	.word	0x40004404
 80040c4:	2001920c 	.word	0x2001920c
 80040c8:	20019210 	.word	0x20019210
 80040cc:	4000440c 	.word	0x4000440c

080040d0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <HIF_UART_EnableTXEInterrupt+0x1c>)
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	4000440c 	.word	0x4000440c

080040f0 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HIF_UART_Init+0xc8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <HIF_UART_Init+0xc8>)
 8004102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004106:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004108:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HIF_UART_Init+0xcc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2b      	ldr	r2, [pc, #172]	; (80041bc <HIF_UART_Init+0xcc>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <HIF_UART_Init+0xd0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004120:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004128:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800412a:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <HIF_UART_Init+0xd0>)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004130:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HIF_UART_Init+0xd4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004144:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004146:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HIF_UART_Init+0xd4>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HIF_UART_Init+0xd8>)
 800414e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004152:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HIF_UART_Init+0xdc>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800415a:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HIF_UART_Init+0xe0>)
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HIF_UART_Init+0xe4>)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	3301      	adds	r3, #1
 8004170:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417e:	d302      	bcc.n	8004186 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004180:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004184:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <HIF_UART_Init+0xe8>)
 8004192:	b29b      	uxth	r3, r3
 8004194:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004196:	4a11      	ldr	r2, [pc, #68]	; (80041dc <HIF_UART_Init+0xec>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800419c:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <HIF_UART_Init+0xf0>)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80041a2:	2106      	movs	r1, #6
 80041a4:	2026      	movs	r0, #38	; 0x26
 80041a6:	f7ff feab 	bl	8003f00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80041aa:	2026      	movs	r0, #38	; 0x26
 80041ac:	f7ff fe8a 	bl	8003ec4 <__NVIC_EnableIRQ>
}
 80041b0:	bf00      	nop
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023840 	.word	0x40023840
 80041bc:	40023830 	.word	0x40023830
 80041c0:	40020020 	.word	0x40020020
 80041c4:	40020000 	.word	0x40020000
 80041c8:	4000440c 	.word	0x4000440c
 80041cc:	40004410 	.word	0x40004410
 80041d0:	40004414 	.word	0x40004414
 80041d4:	0501bd00 	.word	0x0501bd00
 80041d8:	40004408 	.word	0x40004408
 80041dc:	2001920c 	.word	0x2001920c
 80041e0:	20019210 	.word	0x20019210

080041e4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <_DoInit+0x98>)
 80041ec:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2203      	movs	r2, #3
 80041f2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2203      	movs	r2, #3
 80041f8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <_DoInit+0x9c>)
 80041fe:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <_DoInit+0xa0>)
 8004204:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800420c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a17      	ldr	r2, [pc, #92]	; (8004280 <_DoInit+0x9c>)
 8004224:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <_DoInit+0xa4>)
 800422a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2210      	movs	r2, #16
 8004230:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3307      	adds	r3, #7
 8004248:	4a10      	ldr	r2, [pc, #64]	; (800428c <_DoInit+0xa8>)
 800424a:	6810      	ldr	r0, [r2, #0]
 800424c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800424e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <_DoInit+0xac>)
 8004256:	6810      	ldr	r0, [r2, #0]
 8004258:	6018      	str	r0, [r3, #0]
 800425a:	8891      	ldrh	r1, [r2, #4]
 800425c:	7992      	ldrb	r2, [r2, #6]
 800425e:	8099      	strh	r1, [r3, #4]
 8004260:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004262:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800426c:	f3bf 8f5f 	dmb	sy
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	2001a794 	.word	0x2001a794
 8004280:	08006608 	.word	0x08006608
 8004284:	20019214 	.word	0x20019214
 8004288:	20019614 	.word	0x20019614
 800428c:	08006614 	.word	0x08006614
 8004290:	08006618 	.word	0x08006618

08004294 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d905      	bls.n	80042c4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e007      	b.n	80042d4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	1acb      	subs	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3b01      	subs	r3, #1
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4293      	cmp	r3, r2
 80042e0:	bf28      	it	cs
 80042e2:	4613      	movcs	r3, r2
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4293      	cmp	r3, r2
 80042ec:	bf28      	it	cs
 80042ee:	4613      	movcs	r3, r2
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f002 f8a3 	bl	800644c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	4413      	add	r3, r2
 800430c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	4413      	add	r3, r2
 8004314:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	4413      	add	r3, r2
 8004324:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	429a      	cmp	r2, r3
 800432e:	d101      	bne.n	8004334 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004334:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1b2      	bne.n	80042aa <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004344:	6a3b      	ldr	r3, [r7, #32]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3728      	adds	r7, #40	; 0x28
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800434e:	b580      	push	{r7, lr}
 8004350:	b088      	sub	sp, #32
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d911      	bls.n	8004396 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	6938      	ldr	r0, [r7, #16]
 8004382:	f002 f863 	bl	800644c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004386:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004394:	e01f      	b.n	80043d6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	6938      	ldr	r0, [r7, #16]
 80043aa:	f002 f84f 	bl	800644c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4619      	mov	r1, r3
 80043c6:	6938      	ldr	r0, [r7, #16]
 80043c8:	f002 f840 	bl	800644c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043cc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	60da      	str	r2, [r3, #12]
}
 80043d6:	bf00      	nop
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80043de:	b480      	push	{r7}
 80043e0:	b087      	sub	sp, #28
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d808      	bhi.n	800440c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad2      	subs	r2, r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	3b01      	subs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e004      	b.n	8004416 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004416:	697b      	ldr	r3, [r7, #20]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b08c      	sub	sp, #48	; 0x30
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800443e:	f7ff fed1 	bl	80041e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4a37      	ldr	r2, [pc, #220]	; (800452c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004450:	4413      	add	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d92b      	bls.n	80044c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4293      	cmp	r3, r2
 8004480:	bf28      	it	cs
 8004482:	4613      	movcs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	4413      	add	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	6939      	ldr	r1, [r7, #16]
 8004494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004496:	f001 ffd9 	bl	800644c <memcpy>
    NumBytesRead += NumBytesRem;
 800449a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4413      	add	r3, r2
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d101      	bne.n	80044c8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf28      	it	cs
 80044d8:	4613      	movcs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d019      	beq.n	8004516 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	4413      	add	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044f2:	f001 ffab 	bl	800644c <memcpy>
    NumBytesRead += NumBytesRem;
 80044f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4413      	add	r3, r2
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800450e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004520:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004524:	4618      	mov	r0, r3
 8004526:	3730      	adds	r7, #48	; 0x30
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2001a794 	.word	0x2001a794

08004530 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800453c:	4b3e      	ldr	r3, [pc, #248]	; (8004638 <SEGGER_RTT_ReadNoLock+0x108>)
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <SEGGER_RTT_ReadNoLock+0x1e>
 800454a:	f7ff fe4b 	bl	80041e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3360      	adds	r3, #96	; 0x60
 800455a:	4a37      	ldr	r2, [pc, #220]	; (8004638 <SEGGER_RTT_ReadNoLock+0x108>)
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004570:	2300      	movs	r3, #0
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d92b      	bls.n	80045d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4293      	cmp	r3, r2
 800458c:	bf28      	it	cs
 800458e:	4613      	movcs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045a2:	f001 ff53 	bl	800644c <memcpy>
    NumBytesRead += NumBytesRem;
 80045a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d101      	bne.n	80045d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf28      	it	cs
 80045e4:	4613      	movcs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	4413      	add	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045fe:	f001 ff25 	bl	800644c <memcpy>
    NumBytesRead += NumBytesRem;
 8004602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4413      	add	r3, r2
 8004608:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800461a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4413      	add	r3, r2
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2001a794 	.word	0x2001a794

0800463c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	3360      	adds	r3, #96	; 0x60
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800465a:	4413      	add	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d029      	beq.n	80046ba <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004666:	2b02      	cmp	r3, #2
 8004668:	d82e      	bhi.n	80046c8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800466e:	2b01      	cmp	r3, #1
 8004670:	d013      	beq.n	800469a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004672:	e029      	b.n	80046c8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7ff feb2 	bl	80043de <_GetAvailWriteSpace>
 800467a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004688:	e021      	b.n	80046ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7ff fe5b 	bl	800434e <_WriteNoCheck>
    break;
 8004698:	e019      	b.n	80046ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff fe9f 	bl	80043de <_GetAvailWriteSpace>
 80046a0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf28      	it	cs
 80046aa:	4613      	movcs	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff fe4b 	bl	800434e <_WriteNoCheck>
    break;
 80046b8:	e009      	b.n	80046ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	6978      	ldr	r0, [r7, #20]
 80046c0:	f7ff fde8 	bl	8004294 <_WriteBlocking>
 80046c4:	61f8      	str	r0, [r7, #28]
    break;
 80046c6:	e002      	b.n	80046ce <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
    break;
 80046cc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80046ce:	69fb      	ldr	r3, [r7, #28]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	2001a794 	.word	0x2001a794

080046dc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <SEGGER_RTT_WriteDownBuffer+0x1e>
 80046f6:	f7ff fd75 	bl	80041e4 <_DoInit>
  SEGGER_RTT_LOCK();
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	f04f 0120 	mov.w	r1, #32
 8004702:	f381 8811 	msr	BASEPRI, r1
 8004706:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ff95 	bl	800463c <SEGGER_RTT_WriteDownBufferNoLock>
 8004712:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800471a:	697b      	ldr	r3, [r7, #20]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	2001a794 	.word	0x2001a794

08004728 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004744:	f7ff fd4e 	bl	80041e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004748:	f3ef 8311 	mrs	r3, BASEPRI
 800474c:	f04f 0120 	mov.w	r1, #32
 8004750:	f381 8811 	msr	BASEPRI, r1
 8004754:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004756:	4b35      	ldr	r3, [pc, #212]	; (800482c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004758:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800475e:	6939      	ldr	r1, [r7, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	3304      	adds	r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	dbeb      	blt.n	800475e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004786:	e000      	b.n	800478a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004788:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	429a      	cmp	r2, r3
 8004792:	da3f      	bge.n	8004814 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004794:	6939      	ldr	r1, [r7, #16]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	440b      	add	r3, r1
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	440b      	add	r3, r1
 80047cc:	3320      	adds	r3, #32
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	440b      	add	r3, r1
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	4613      	mov	r3, r2
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	4413      	add	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	440b      	add	r3, r1
 8004808:	332c      	adds	r3, #44	; 0x2c
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800480e:	f3bf 8f5f 	dmb	sy
 8004812:	e002      	b.n	800481a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004820:	69fb      	ldr	r3, [r7, #28]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2001a794 	.word	0x2001a794

08004830 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800483e:	4b33      	ldr	r3, [pc, #204]	; (800490c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800484c:	f7ff fcca 	bl	80041e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004850:	4b2e      	ldr	r3, [pc, #184]	; (800490c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004852:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	461a      	mov	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4293      	cmp	r3, r2
 800485e:	d24d      	bcs.n	80048fc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004860:	f3ef 8311 	mrs	r3, BASEPRI
 8004864:	f04f 0120 	mov.w	r1, #32
 8004868:	f381 8811 	msr	BASEPRI, r1
 800486c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d031      	beq.n	80048d8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004874:	6979      	ldr	r1, [r7, #20]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	440b      	add	r3, r1
 8004882:	3360      	adds	r3, #96	; 0x60
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	3364      	adds	r3, #100	; 0x64
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800489c:	6979      	ldr	r1, [r7, #20]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	3368      	adds	r3, #104	; 0x68
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	440b      	add	r3, r1
 80048be:	3370      	adds	r3, #112	; 0x70
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4613      	mov	r3, r2
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4413      	add	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	440b      	add	r3, r1
 80048d2:	336c      	adds	r3, #108	; 0x6c
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80048d8:	6979      	ldr	r1, [r7, #20]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	440b      	add	r3, r1
 80048e6:	3374      	adds	r3, #116	; 0x74
 80048e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ea:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80048ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e002      	b.n	8004902 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004900:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004902:	69fb      	ldr	r3, [r7, #28]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	2001a794 	.word	0x2001a794

08004910 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004920:	e002      	b.n	8004928 <_EncodeStr+0x18>
    Len++;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3301      	adds	r3, #1
 8004926:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f6      	bne.n	8004922 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d901      	bls.n	8004940 <_EncodeStr+0x30>
    Len = Limit;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2bfe      	cmp	r3, #254	; 0xfe
 8004944:	d806      	bhi.n	8004954 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	60fa      	str	r2, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e011      	b.n	8004978 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	60fa      	str	r2, [r7, #12]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	60fa      	str	r2, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	0a19      	lsrs	r1, r3, #8
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	b2ca      	uxtb	r2, r1
 8004976:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800497c:	e00a      	b.n	8004994 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	1c53      	adds	r3, r2, #1
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	60f9      	str	r1, [r7, #12]
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
    n++;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	3301      	adds	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d3f0      	bcc.n	800497e <_EncodeStr+0x6e>
  }
  return pPayload;
 800499c:	68fb      	ldr	r3, [r7, #12]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <_HandleIncomingPacket+0xe0>)
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	4618      	mov	r0, r3
 80049d0:	1cfb      	adds	r3, r7, #3
 80049d2:	2201      	movs	r2, #1
 80049d4:	4619      	mov	r1, r3
 80049d6:	f7ff fdab 	bl	8004530 <SEGGER_RTT_ReadNoLock>
 80049da:	4603      	mov	r3, r0
 80049dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd54      	ble.n	8004a8e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d032      	beq.n	8004a50 <_HandleIncomingPacket+0x8c>
 80049ea:	2b80      	cmp	r3, #128	; 0x80
 80049ec:	dc42      	bgt.n	8004a74 <_HandleIncomingPacket+0xb0>
 80049ee:	2b07      	cmp	r3, #7
 80049f0:	dc16      	bgt.n	8004a20 <_HandleIncomingPacket+0x5c>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dd3e      	ble.n	8004a74 <_HandleIncomingPacket+0xb0>
 80049f6:	3b01      	subs	r3, #1
 80049f8:	2b06      	cmp	r3, #6
 80049fa:	d83b      	bhi.n	8004a74 <_HandleIncomingPacket+0xb0>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <_HandleIncomingPacket+0x40>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a27 	.word	0x08004a27
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a33 	.word	0x08004a33
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a3f 	.word	0x08004a3f
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a4b 	.word	0x08004a4b
 8004a20:	2b7f      	cmp	r3, #127	; 0x7f
 8004a22:	d036      	beq.n	8004a92 <_HandleIncomingPacket+0xce>
 8004a24:	e026      	b.n	8004a74 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a26:	f000 fecf 	bl	80057c8 <SEGGER_SYSVIEW_Start>
      break;
 8004a2a:	e037      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a2c:	f000 ff88 	bl	8005940 <SEGGER_SYSVIEW_Stop>
      break;
 8004a30:	e034      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a32:	f001 f961 	bl	8005cf8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a36:	e031      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a38:	f001 f926 	bl	8005c88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a3c:	e02e      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a3e:	f000 ffa5 	bl	800598c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a42:	e02b      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a44:	f001 fbf4 	bl	8006230 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a48:	e028      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a4a:	f001 fbd3 	bl	80061f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004a4e:	e025      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <_HandleIncomingPacket+0xe0>)
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	4618      	mov	r0, r3
 8004a56:	1cfb      	adds	r3, r7, #3
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	f7ff fd68 	bl	8004530 <SEGGER_RTT_ReadNoLock>
 8004a60:	4603      	mov	r3, r0
 8004a62:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dd15      	ble.n	8004a96 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fb41 	bl	80060f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a72:	e010      	b.n	8004a96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	b25b      	sxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da0e      	bge.n	8004a9a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <_HandleIncomingPacket+0xe0>)
 8004a7e:	7e1b      	ldrb	r3, [r3, #24]
 8004a80:	4618      	mov	r0, r3
 8004a82:	1cfb      	adds	r3, r7, #3
 8004a84:	2201      	movs	r2, #1
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7ff fd52 	bl	8004530 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004a8c:	e005      	b.n	8004a9a <_HandleIncomingPacket+0xd6>
    }
  }
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
      break;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
      break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <_HandleIncomingPacket+0xd8>
      break;
 8004a9a:	bf00      	nop
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2001a62c 	.word	0x2001a62c

08004aa8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004aae:	2301      	movs	r3, #1
 8004ab0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	e00b      	b.n	8004adc <_TrySendOverflowPacket+0x34>
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	1c59      	adds	r1, r3, #1
 8004acc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	09db      	lsrs	r3, r3, #7
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae0:	d8f0      	bhi.n	8004ac4 <_TrySendOverflowPacket+0x1c>
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004af2:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <_TrySendOverflowPacket+0xe4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	e00b      	b.n	8004b24 <_TrySendOverflowPacket+0x7c>
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	6279      	str	r1, [r7, #36]	; 0x24
 8004b16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	09db      	lsrs	r3, r3, #7
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	2b7f      	cmp	r3, #127	; 0x7f
 8004b28:	d8f0      	bhi.n	8004b0c <_TrySendOverflowPacket+0x64>
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004b3a:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f7fb fb40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b50:	4603      	mov	r3, r0
 8004b52:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004b54:	f7ff fabc 	bl	80040d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	e004      	b.n	8004b7c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	3301      	adds	r3, #1
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <_TrySendOverflowPacket+0xe0>)
 8004b7a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004b7c:	693b      	ldr	r3, [r7, #16]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3730      	adds	r7, #48	; 0x30
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2001a62c 	.word	0x2001a62c
 8004b8c:	e0001004 	.word	0xe0001004

08004b90 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004b9c:	4b6d      	ldr	r3, [pc, #436]	; (8004d54 <_SendPacket+0x1c4>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d010      	beq.n	8004bc6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ba4:	4b6b      	ldr	r3, [pc, #428]	; (8004d54 <_SendPacket+0x1c4>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a5 	beq.w	8004cf8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004bae:	4b69      	ldr	r3, [pc, #420]	; (8004d54 <_SendPacket+0x1c4>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d109      	bne.n	8004bca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004bb6:	f7ff ff77 	bl	8004aa8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004bba:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <_SendPacket+0x1c4>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	f040 809c 	bne.w	8004cfc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004bc4:	e001      	b.n	8004bca <_SendPacket+0x3a>
    goto Send;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <_SendPacket+0x3c>
Send:
 8004bca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b1f      	cmp	r3, #31
 8004bd0:	d809      	bhi.n	8004be6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004bd2:	4b60      	ldr	r3, [pc, #384]	; (8004d54 <_SendPacket+0x1c4>)
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 808d 	bne.w	8004d00 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b17      	cmp	r3, #23
 8004bea:	d807      	bhi.n	8004bfc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e03d      	b.n	8004c78 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	2b7f      	cmp	r3, #127	; 0x7f
 8004c08:	d912      	bls.n	8004c30 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	09da      	lsrs	r2, r3, #7
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	3a01      	subs	r2, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e006      	b.n	8004c3e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b7f      	cmp	r3, #127	; 0x7f
 8004c42:	d912      	bls.n	8004c6a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	09da      	lsrs	r2, r3, #7
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	60fa      	str	r2, [r7, #12]
 8004c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e006      	b.n	8004c78 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c78:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <_SendPacket+0x1c8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004c7e:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <_SendPacket+0x1c4>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	e00b      	b.n	8004caa <_SendPacket+0x11a>
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	6279      	str	r1, [r7, #36]	; 0x24
 8004c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	09db      	lsrs	r3, r3, #7
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	2b7f      	cmp	r3, #127	; 0x7f
 8004cae:	d8f0      	bhi.n	8004c92 <_SendPacket+0x102>
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	627a      	str	r2, [r7, #36]	; 0x24
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004cc0:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <_SendPacket+0x1c4>)
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f7fb fa7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004cd8:	f7ff f9fa 	bl	80040d0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ce2:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <_SendPacket+0x1c4>)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	e00b      	b.n	8004d02 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004cea:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <_SendPacket+0x1c4>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <_SendPacket+0x1c4>)
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e004      	b.n	8004d02 <_SendPacket+0x172>
    goto SendDone;
 8004cf8:	bf00      	nop
 8004cfa:	e002      	b.n	8004d02 <_SendPacket+0x172>
      goto SendDone;
 8004cfc:	bf00      	nop
 8004cfe:	e000      	b.n	8004d02 <_SendPacket+0x172>
      goto SendDone;
 8004d00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <_SendPacket+0x1c4>)
 8004d04:	7e1b      	ldrb	r3, [r3, #24]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <_SendPacket+0x1cc>)
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	336c      	adds	r3, #108	; 0x6c
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <_SendPacket+0x1c4>)
 8004d1a:	7e1b      	ldrb	r3, [r3, #24]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	490f      	ldr	r1, [pc, #60]	; (8004d5c <_SendPacket+0x1cc>)
 8004d20:	4603      	mov	r3, r0
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4403      	add	r3, r0
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	440b      	add	r3, r1
 8004d2a:	3370      	adds	r3, #112	; 0x70
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d00b      	beq.n	8004d4a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <_SendPacket+0x1c4>)
 8004d34:	789b      	ldrb	r3, [r3, #2]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <_SendPacket+0x1c4>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d40:	f7ff fe40 	bl	80049c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <_SendPacket+0x1c4>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d4a:	bf00      	nop
 8004d4c:	3728      	adds	r7, #40	; 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2001a62c 	.word	0x2001a62c
 8004d58:	e0001004 	.word	0xe0001004
 8004d5c:	2001a794 	.word	0x2001a794

08004d60 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	3301      	adds	r3, #1
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d80a      	bhi.n	8004d90 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6051      	str	r1, [r2, #4]
 8004d84:	78fa      	ldrb	r2, [r7, #3]
 8004d86:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d15a      	bne.n	8004e4e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	e00b      	b.n	8004dd2 <_StoreChar+0x72>
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <_StoreChar+0x5a>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	2300      	movs	r3, #0
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e00b      	b.n	8004e0a <_StoreChar+0xaa>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	61f9      	str	r1, [r7, #28]
 8004dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0e:	d8f0      	bhi.n	8004df2 <_StoreChar+0x92>
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	61fa      	str	r2, [r7, #28]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	221a      	movs	r2, #26
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff feb1 	bl	8004b90 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fdb9 	bl	80049aa <_PreparePacket>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]
  }
}
 8004e4e:	bf00      	nop
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e72:	e007      	b.n	8004e84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	623b      	str	r3, [r7, #32]
    Width++;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d2f3      	bcs.n	8004e74 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d901      	bls.n	8004e98 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d11f      	bne.n	8004ee2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01c      	beq.n	8004ee2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <_PrintUnsigned+0x66>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <_PrintUnsigned+0x66>
        c = '0';
 8004eb8:	2330      	movs	r3, #48	; 0x30
 8004eba:	76fb      	strb	r3, [r7, #27]
 8004ebc:	e001      	b.n	8004ec2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004ebe:	2320      	movs	r3, #32
 8004ec0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ec2:	e007      	b.n	8004ed4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004eca:	7efb      	ldrb	r3, [r7, #27]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ff46 	bl	8004d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <_PrintUnsigned+0x8a>
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d3f0      	bcc.n	8004ec4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d903      	bls.n	8004ef0 <_PrintUnsigned+0x98>
      NumDigits--;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	e009      	b.n	8004f04 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d200      	bcs.n	8004f04 <_PrintUnsigned+0xac>
        break;
 8004f02:	e005      	b.n	8004f10 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	fb02 f303 	mul.w	r3, r2, r3
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004f0e:	e7e8      	b.n	8004ee2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <_PrintUnsigned+0x128>)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f7ff ff14 	bl	8004d60 <_StoreChar>
    Digit /= Base;
 8004f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e3      	bne.n	8004f10 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d011      	beq.n	8004f76 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f58:	e006      	b.n	8004f68 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004f60:	2120      	movs	r1, #32
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fefc 	bl	8004d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <_PrintUnsigned+0x11e>
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d3f1      	bcc.n	8004f5a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004f76:	bf00      	nop
 8004f78:	3728      	adds	r7, #40	; 0x28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	08006658 	.word	0x08006658

08004f84 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bfb8      	it	lt
 8004f98:	425b      	neglt	r3, r3
 8004f9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004fa0:	e007      	b.n	8004fb2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004faa:	613b      	str	r3, [r7, #16]
    Width++;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	daf3      	bge.n	8004fa2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d901      	bls.n	8004fc6 <_PrintInt+0x42>
    Width = NumDigits;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <_PrintInt+0x5e>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db04      	blt.n	8004fdc <_PrintInt+0x58>
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <_PrintInt+0x5e>
    FieldWidth--;
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <_PrintInt+0x6e>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <_PrintInt+0x9c>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d111      	bne.n	8005020 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00e      	beq.n	8005020 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005002:	e006      	b.n	8005012 <_PrintInt+0x8e>
        FieldWidth--;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	3b01      	subs	r3, #1
 8005008:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800500a:	2120      	movs	r1, #32
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff fea7 	bl	8004d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <_PrintInt+0x9c>
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	429a      	cmp	r2, r3
 800501e:	d3f1      	bcc.n	8005004 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	da07      	bge.n	8005036 <_PrintInt+0xb2>
    v = -v;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	425b      	negs	r3, r3
 800502a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800502c:	212d      	movs	r1, #45	; 0x2d
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fe96 	bl	8004d60 <_StoreChar>
 8005034:	e008      	b.n	8005048 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005040:	212b      	movs	r1, #43	; 0x2b
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fe8c 	bl	8004d60 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d019      	beq.n	8005086 <_PrintInt+0x102>
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d114      	bne.n	8005086 <_PrintInt+0x102>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d111      	bne.n	8005086 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00e      	beq.n	8005086 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005068:	e006      	b.n	8005078 <_PrintInt+0xf4>
        FieldWidth--;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	3b01      	subs	r3, #1
 800506e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005070:	2130      	movs	r1, #48	; 0x30
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff fe74 	bl	8004d60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <_PrintInt+0x102>
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	429a      	cmp	r2, r3
 8005084:	d3f1      	bcc.n	800506a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff fedf 	bl	8004e58 <_PrintUnsigned>
}
 800509a:	bf00      	nop
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b098      	sub	sp, #96	; 0x60
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050b0:	f3ef 8311 	mrs	r3, BASEPRI
 80050b4:	f04f 0120 	mov.w	r1, #32
 80050b8:	f381 8811 	msr	BASEPRI, r1
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
 80050be:	48b7      	ldr	r0, [pc, #732]	; (800539c <_VPrintTarget+0x2f8>)
 80050c0:	f7ff fc73 	bl	80049aa <_PreparePacket>
 80050c4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80050c6:	4bb5      	ldr	r3, [pc, #724]	; (800539c <_VPrintTarget+0x2f8>)
 80050c8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80050ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8183 	beq.w	80053fa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80050f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050f8:	2b25      	cmp	r3, #37	; 0x25
 80050fa:	f040 8170 	bne.w	80053de <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80050fe:	2300      	movs	r3, #0
 8005100:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800510e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005112:	3b23      	subs	r3, #35	; 0x23
 8005114:	2b0d      	cmp	r3, #13
 8005116:	d83f      	bhi.n	8005198 <_VPrintTarget+0xf4>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <_VPrintTarget+0x7c>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005189 	.word	0x08005189
 8005124:	08005199 	.word	0x08005199
 8005128:	08005199 	.word	0x08005199
 800512c:	08005199 	.word	0x08005199
 8005130:	08005199 	.word	0x08005199
 8005134:	08005199 	.word	0x08005199
 8005138:	08005199 	.word	0x08005199
 800513c:	08005199 	.word	0x08005199
 8005140:	08005179 	.word	0x08005179
 8005144:	08005199 	.word	0x08005199
 8005148:	08005159 	.word	0x08005159
 800514c:	08005199 	.word	0x08005199
 8005150:	08005199 	.word	0x08005199
 8005154:	08005169 	.word	0x08005169
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e01a      	b.n	800519e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3301      	adds	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e012      	b.n	800519e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3301      	adds	r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e00a      	b.n	800519e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518a:	f043 0308 	orr.w	r3, r3, #8
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e002      	b.n	800519e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005198:	2300      	movs	r3, #0
 800519a:	653b      	str	r3, [r7, #80]	; 0x50
 800519c:	bf00      	nop
        }
      } while (v);
 800519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1b0      	bne.n	8005106 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80051a4:	2300      	movs	r3, #0
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80051b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051b4:	2b2f      	cmp	r3, #47	; 0x2f
 80051b6:	d912      	bls.n	80051de <_VPrintTarget+0x13a>
 80051b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051bc:	2b39      	cmp	r3, #57	; 0x39
 80051be:	d80e      	bhi.n	80051de <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80051c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	461a      	mov	r2, r3
 80051d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051d6:	4413      	add	r3, r2
 80051d8:	3b30      	subs	r3, #48	; 0x30
 80051da:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80051dc:	e7e4      	b.n	80051a8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80051de:	2300      	movs	r3, #0
 80051e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80051ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ee:	2b2e      	cmp	r3, #46	; 0x2e
 80051f0:	d11d      	bne.n	800522e <_VPrintTarget+0x18a>
        sFormat++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005204:	2b2f      	cmp	r3, #47	; 0x2f
 8005206:	d912      	bls.n	800522e <_VPrintTarget+0x18a>
 8005208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800520c:	2b39      	cmp	r3, #57	; 0x39
 800520e:	d80e      	bhi.n	800522e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	461a      	mov	r2, r3
 8005222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005226:	4413      	add	r3, r2
 8005228:	3b30      	subs	r3, #48	; 0x30
 800522a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800522c:	e7e4      	b.n	80051f8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800523a:	2b6c      	cmp	r3, #108	; 0x6c
 800523c:	d003      	beq.n	8005246 <_VPrintTarget+0x1a2>
 800523e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005242:	2b68      	cmp	r3, #104	; 0x68
 8005244:	d107      	bne.n	8005256 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3301      	adds	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005254:	e7ef      	b.n	8005236 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005256:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800525a:	2b25      	cmp	r3, #37	; 0x25
 800525c:	f000 80b3 	beq.w	80053c6 <_VPrintTarget+0x322>
 8005260:	2b25      	cmp	r3, #37	; 0x25
 8005262:	f2c0 80b7 	blt.w	80053d4 <_VPrintTarget+0x330>
 8005266:	2b78      	cmp	r3, #120	; 0x78
 8005268:	f300 80b4 	bgt.w	80053d4 <_VPrintTarget+0x330>
 800526c:	2b58      	cmp	r3, #88	; 0x58
 800526e:	f2c0 80b1 	blt.w	80053d4 <_VPrintTarget+0x330>
 8005272:	3b58      	subs	r3, #88	; 0x58
 8005274:	2b20      	cmp	r3, #32
 8005276:	f200 80ad 	bhi.w	80053d4 <_VPrintTarget+0x330>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <_VPrintTarget+0x1dc>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005377 	.word	0x08005377
 8005284:	080053d5 	.word	0x080053d5
 8005288:	080053d5 	.word	0x080053d5
 800528c:	080053d5 	.word	0x080053d5
 8005290:	080053d5 	.word	0x080053d5
 8005294:	080053d5 	.word	0x080053d5
 8005298:	080053d5 	.word	0x080053d5
 800529c:	080053d5 	.word	0x080053d5
 80052a0:	080053d5 	.word	0x080053d5
 80052a4:	080053d5 	.word	0x080053d5
 80052a8:	080053d5 	.word	0x080053d5
 80052ac:	08005305 	.word	0x08005305
 80052b0:	0800532b 	.word	0x0800532b
 80052b4:	080053d5 	.word	0x080053d5
 80052b8:	080053d5 	.word	0x080053d5
 80052bc:	080053d5 	.word	0x080053d5
 80052c0:	080053d5 	.word	0x080053d5
 80052c4:	080053d5 	.word	0x080053d5
 80052c8:	080053d5 	.word	0x080053d5
 80052cc:	080053d5 	.word	0x080053d5
 80052d0:	080053d5 	.word	0x080053d5
 80052d4:	080053d5 	.word	0x080053d5
 80052d8:	080053d5 	.word	0x080053d5
 80052dc:	080053d5 	.word	0x080053d5
 80052e0:	080053a1 	.word	0x080053a1
 80052e4:	080053d5 	.word	0x080053d5
 80052e8:	080053d5 	.word	0x080053d5
 80052ec:	080053d5 	.word	0x080053d5
 80052f0:	080053d5 	.word	0x080053d5
 80052f4:	08005351 	.word	0x08005351
 80052f8:	080053d5 	.word	0x080053d5
 80052fc:	080053d5 	.word	0x080053d5
 8005300:	08005377 	.word	0x08005377
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1d19      	adds	r1, r3, #4
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005318:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fd1c 	bl	8004d60 <_StoreChar>
        break;
 8005328:	e055      	b.n	80053d6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	1d19      	adds	r1, r3, #4
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6011      	str	r1, [r2, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005338:	f107 0014 	add.w	r0, r7, #20
 800533c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	220a      	movs	r2, #10
 8005348:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800534a:	f7ff fe1b 	bl	8004f84 <_PrintInt>
        break;
 800534e:	e042      	b.n	80053d6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	1d19      	adds	r1, r3, #4
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6011      	str	r1, [r2, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800535e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005360:	f107 0014 	add.w	r0, r7, #20
 8005364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536e:	220a      	movs	r2, #10
 8005370:	f7ff fd72 	bl	8004e58 <_PrintUnsigned>
        break;
 8005374:	e02f      	b.n	80053d6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6011      	str	r1, [r2, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005384:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005386:	f107 0014 	add.w	r0, r7, #20
 800538a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005394:	2210      	movs	r2, #16
 8005396:	f7ff fd5f 	bl	8004e58 <_PrintUnsigned>
        break;
 800539a:	e01c      	b.n	80053d6 <_VPrintTarget+0x332>
 800539c:	2001a65c 	.word	0x2001a65c
      case 'p':
        v = va_arg(*pParamList, int);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6011      	str	r1, [r2, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80053ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053b0:	f107 0014 	add.w	r0, r7, #20
 80053b4:	2300      	movs	r3, #0
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	2308      	movs	r3, #8
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2308      	movs	r3, #8
 80053be:	2210      	movs	r2, #16
 80053c0:	f7ff fd4a 	bl	8004e58 <_PrintUnsigned>
        break;
 80053c4:	e007      	b.n	80053d6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	2125      	movs	r1, #37	; 0x25
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fcc7 	bl	8004d60 <_StoreChar>
        break;
 80053d2:	e000      	b.n	80053d6 <_VPrintTarget+0x332>
      default:
        break;
 80053d4:	bf00      	nop
      }
      sFormat++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e007      	b.n	80053ee <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80053de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053e2:	f107 0314 	add.w	r3, r7, #20
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff fcb9 	bl	8004d60 <_StoreChar>
    }
  } while (*sFormat);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f ae72 	bne.w	80050dc <_VPrintTarget+0x38>
 80053f8:	e000      	b.n	80053fc <_VPrintTarget+0x358>
      break;
 80053fa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d041      	beq.n	8005486 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	643b      	str	r3, [r7, #64]	; 0x40
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005412:	e00b      	b.n	800542c <_VPrintTarget+0x388>
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	b2da      	uxtb	r2, r3
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	6439      	str	r1, [r7, #64]	; 0x40
 800541e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	09db      	lsrs	r3, r3, #7
 800542a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	2b7f      	cmp	r3, #127	; 0x7f
 8005430:	d8f0      	bhi.n	8005414 <_VPrintTarget+0x370>
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	643a      	str	r2, [r7, #64]	; 0x40
 8005438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005440:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	e00b      	b.n	8005464 <_VPrintTarget+0x3c0>
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	b2da      	uxtb	r2, r3
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	63b9      	str	r1, [r7, #56]	; 0x38
 8005456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	09db      	lsrs	r3, r3, #7
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	2b7f      	cmp	r3, #127	; 0x7f
 8005468:	d8f0      	bhi.n	800544c <_VPrintTarget+0x3a8>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	221a      	movs	r2, #26
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fb85 	bl	8004b90 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800548c:	bf00      	nop
 800548e:	3758      	adds	r7, #88	; 0x58
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80054a2:	2300      	movs	r3, #0
 80054a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054a8:	4917      	ldr	r1, [pc, #92]	; (8005508 <SEGGER_SYSVIEW_Init+0x74>)
 80054aa:	4818      	ldr	r0, [pc, #96]	; (800550c <SEGGER_SYSVIEW_Init+0x78>)
 80054ac:	f7ff f93c 	bl	8004728 <SEGGER_RTT_AllocUpBuffer>
 80054b0:	4603      	mov	r3, r0
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054ba:	785a      	ldrb	r2, [r3, #1]
 80054bc:	4b14      	ldr	r3, [pc, #80]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054c2:	7e1b      	ldrb	r3, [r3, #24]
 80054c4:	4618      	mov	r0, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2308      	movs	r3, #8
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <SEGGER_SYSVIEW_Init+0x80>)
 80054ce:	490f      	ldr	r1, [pc, #60]	; (800550c <SEGGER_SYSVIEW_Init+0x78>)
 80054d0:	f7ff f9ae 	bl	8004830 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <SEGGER_SYSVIEW_Init+0x84>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80054e2:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80054f4:	4a06      	ldr	r2, [pc, #24]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <SEGGER_SYSVIEW_Init+0x7c>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20019624 	.word	0x20019624
 800550c:	08006620 	.word	0x08006620
 8005510:	2001a62c 	.word	0x2001a62c
 8005514:	2001a624 	.word	0x2001a624
 8005518:	e0001004 	.word	0xe0001004

0800551c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005524:	4a04      	ldr	r2, [pc, #16]	; (8005538 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6113      	str	r3, [r2, #16]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	2001a62c 	.word	0x2001a62c

0800553c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005544:	f3ef 8311 	mrs	r3, BASEPRI
 8005548:	f04f 0120 	mov.w	r1, #32
 800554c:	f381 8811 	msr	BASEPRI, r1
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	4808      	ldr	r0, [pc, #32]	; (8005574 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005554:	f7ff fa29 	bl	80049aa <_PreparePacket>
 8005558:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68b8      	ldr	r0, [r7, #8]
 8005560:	f7ff fb16 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f383 8811 	msr	BASEPRI, r3
}
 800556a:	bf00      	nop
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	2001a65c 	.word	0x2001a65c

08005578 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005582:	f3ef 8311 	mrs	r3, BASEPRI
 8005586:	f04f 0120 	mov.w	r1, #32
 800558a:	f381 8811 	msr	BASEPRI, r1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	4816      	ldr	r0, [pc, #88]	; (80055ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005592:	f7ff fa0a 	bl	80049aa <_PreparePacket>
 8005596:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e00b      	b.n	80055be <SEGGER_SYSVIEW_RecordU32+0x46>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	61f9      	str	r1, [r7, #28]
 80055b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b7f      	cmp	r3, #127	; 0x7f
 80055c2:	d8f0      	bhi.n	80055a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	61fa      	str	r2, [r7, #28]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6938      	ldr	r0, [r7, #16]
 80055da:	f7ff fad9 	bl	8004b90 <_SendPacket>
  RECORD_END();
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f383 8811 	msr	BASEPRI, r3
}
 80055e4:	bf00      	nop
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2001a65c 	.word	0x2001a65c

080055f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80055fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005600:	f04f 0120 	mov.w	r1, #32
 8005604:	f381 8811 	msr	BASEPRI, r1
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	4825      	ldr	r0, [pc, #148]	; (80056a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800560c:	f7ff f9cd 	bl	80049aa <_PreparePacket>
 8005610:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	62f9      	str	r1, [r7, #44]	; 0x2c
 800562a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b7f      	cmp	r3, #127	; 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	623b      	str	r3, [r7, #32]
 8005656:	e00b      	b.n	8005670 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6279      	str	r1, [r7, #36]	; 0x24
 8005662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	09db      	lsrs	r3, r3, #7
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b7f      	cmp	r3, #127	; 0x7f
 8005674:	d8f0      	bhi.n	8005658 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	627a      	str	r2, [r7, #36]	; 0x24
 800567c:	6a3a      	ldr	r2, [r7, #32]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f7ff fa80 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f383 8811 	msr	BASEPRI, r3
}
 8005696:	bf00      	nop
 8005698:	3730      	adds	r7, #48	; 0x30
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2001a65c 	.word	0x2001a65c

080056a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b090      	sub	sp, #64	; 0x40
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80056b2:	f3ef 8311 	mrs	r3, BASEPRI
 80056b6:	f04f 0120 	mov.w	r1, #32
 80056ba:	f381 8811 	msr	BASEPRI, r1
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	4840      	ldr	r0, [pc, #256]	; (80057c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056c2:	f7ff f972 	bl	80049aa <_PreparePacket>
 80056c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d4:	e00b      	b.n	80056ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	09db      	lsrs	r3, r3, #7
 80056ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	2b7f      	cmp	r3, #127	; 0x7f
 80056f2:	d8f0      	bhi.n	80056d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
 800570c:	e00b      	b.n	8005726 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	6379      	str	r1, [r7, #52]	; 0x34
 8005718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	09db      	lsrs	r3, r3, #7
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	2b7f      	cmp	r3, #127	; 0x7f
 800572a:	d8f0      	bhi.n	800570e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	637a      	str	r2, [r7, #52]	; 0x34
 8005732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
 8005744:	e00b      	b.n	800575e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	1c59      	adds	r1, r3, #1
 800574e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	09db      	lsrs	r3, r3, #7
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2b7f      	cmp	r3, #127	; 0x7f
 8005762:	d8f0      	bhi.n	8005746 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800576a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	e00b      	b.n	8005796 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1c59      	adds	r1, r3, #1
 8005786:	6279      	str	r1, [r7, #36]	; 0x24
 8005788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	2b7f      	cmp	r3, #127	; 0x7f
 800579a:	d8f0      	bhi.n	800577e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	627a      	str	r2, [r7, #36]	; 0x24
 80057a2:	6a3a      	ldr	r2, [r7, #32]
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	6979      	ldr	r1, [r7, #20]
 80057b0:	69b8      	ldr	r0, [r7, #24]
 80057b2:	f7ff f9ed 	bl	8004b90 <_SendPacket>
  RECORD_END();
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f383 8811 	msr	BASEPRI, r3
}
 80057bc:	bf00      	nop
 80057be:	3740      	adds	r7, #64	; 0x40
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2001a65c 	.word	0x2001a65c

080057c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057ce:	4b59      	ldr	r3, [pc, #356]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80057d4:	f3ef 8311 	mrs	r3, BASEPRI
 80057d8:	f04f 0120 	mov.w	r1, #32
 80057dc:	f381 8811 	msr	BASEPRI, r1
 80057e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80057e2:	4b54      	ldr	r3, [pc, #336]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	220a      	movs	r2, #10
 80057e8:	4953      	ldr	r1, [pc, #332]	; (8005938 <SEGGER_SYSVIEW_Start+0x170>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fa fcf0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80057f6:	f7fe fc6b 	bl	80040d0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80057fa:	200a      	movs	r0, #10
 80057fc:	f7ff fe9e 	bl	800553c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005800:	f3ef 8311 	mrs	r3, BASEPRI
 8005804:	f04f 0120 	mov.w	r1, #32
 8005808:	f381 8811 	msr	BASEPRI, r1
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	484b      	ldr	r0, [pc, #300]	; (800593c <SEGGER_SYSVIEW_Start+0x174>)
 8005810:	f7ff f8cb 	bl	80049aa <_PreparePacket>
 8005814:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
 8005824:	e00b      	b.n	800583e <SEGGER_SYSVIEW_Start+0x76>
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	b2da      	uxtb	r2, r3
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	09db      	lsrs	r3, r3, #7
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	2b7f      	cmp	r3, #127	; 0x7f
 8005842:	d8f0      	bhi.n	8005826 <SEGGER_SYSVIEW_Start+0x5e>
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800584a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	4b36      	ldr	r3, [pc, #216]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e00b      	b.n	8005878 <SEGGER_SYSVIEW_Start+0xb0>
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	b2da      	uxtb	r2, r3
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	6279      	str	r1, [r7, #36]	; 0x24
 800586a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	09db      	lsrs	r3, r3, #7
 8005876:	623b      	str	r3, [r7, #32]
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2b7f      	cmp	r3, #127	; 0x7f
 800587c:	d8f0      	bhi.n	8005860 <SEGGER_SYSVIEW_Start+0x98>
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	627a      	str	r2, [r7, #36]	; 0x24
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	4b28      	ldr	r3, [pc, #160]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e00b      	b.n	80058b2 <SEGGER_SYSVIEW_Start+0xea>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	61f9      	str	r1, [r7, #28]
 80058a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	09db      	lsrs	r3, r3, #7
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b7f      	cmp	r3, #127	; 0x7f
 80058b6:	d8f0      	bhi.n	800589a <SEGGER_SYSVIEW_Start+0xd2>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	61fa      	str	r2, [r7, #28]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	e00b      	b.n	80058ea <SEGGER_SYSVIEW_Start+0x122>
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	6179      	str	r1, [r7, #20]
 80058dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b7f      	cmp	r3, #127	; 0x7f
 80058ee:	d8f0      	bhi.n	80058d2 <SEGGER_SYSVIEW_Start+0x10a>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	617a      	str	r2, [r7, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005900:	2218      	movs	r2, #24
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff f943 	bl	8004b90 <_SendPacket>
      RECORD_END();
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800591e:	f000 f9eb 	bl	8005cf8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005922:	f000 f9b1 	bl	8005c88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005926:	f000 fc83 	bl	8006230 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800592a:	bf00      	nop
 800592c:	3730      	adds	r7, #48	; 0x30
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	2001a62c 	.word	0x2001a62c
 8005938:	0800664c 	.word	0x0800664c
 800593c:	2001a65c 	.word	0x2001a65c

08005940 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005946:	f3ef 8311 	mrs	r3, BASEPRI
 800594a:	f04f 0120 	mov.w	r1, #32
 800594e:	f381 8811 	msr	BASEPRI, r1
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	480b      	ldr	r0, [pc, #44]	; (8005984 <SEGGER_SYSVIEW_Stop+0x44>)
 8005956:	f7ff f828 	bl	80049aa <_PreparePacket>
 800595a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <SEGGER_SYSVIEW_Stop+0x48>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005964:	220b      	movs	r2, #11
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6838      	ldr	r0, [r7, #0]
 800596a:	f7ff f911 	bl	8004b90 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <SEGGER_SYSVIEW_Stop+0x48>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f383 8811 	msr	BASEPRI, r3
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2001a65c 	.word	0x2001a65c
 8005988:	2001a62c 	.word	0x2001a62c

0800598c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b08c      	sub	sp, #48	; 0x30
 8005990:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005992:	f3ef 8311 	mrs	r3, BASEPRI
 8005996:	f04f 0120 	mov.w	r1, #32
 800599a:	f381 8811 	msr	BASEPRI, r1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	4845      	ldr	r0, [pc, #276]	; (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059a2:	f7ff f802 	bl	80049aa <_PreparePacket>
 80059a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b0:	4b42      	ldr	r3, [pc, #264]	; (8005abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b6:	e00b      	b.n	80059d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	09db      	lsrs	r3, r3, #7
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b7f      	cmp	r3, #127	; 0x7f
 80059d4:	d8f0      	bhi.n	80059b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ea:	4b34      	ldr	r3, [pc, #208]	; (8005abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	623b      	str	r3, [r7, #32]
 80059f0:	e00b      	b.n	8005a0a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	6279      	str	r1, [r7, #36]	; 0x24
 80059fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	09db      	lsrs	r3, r3, #7
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0e:	d8f0      	bhi.n	80059f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	627a      	str	r2, [r7, #36]	; 0x24
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	4b25      	ldr	r3, [pc, #148]	; (8005abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e00b      	b.n	8005a44 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	61f9      	str	r1, [r7, #28]
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	61fa      	str	r2, [r7, #28]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	e00b      	b.n	8005a7c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	6179      	str	r1, [r7, #20]
 8005a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a80:	d8f0      	bhi.n	8005a64 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	617a      	str	r2, [r7, #20]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a92:	2218      	movs	r2, #24
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	68b8      	ldr	r0, [r7, #8]
 8005a98:	f7ff f87a 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005aaa:	4b04      	ldr	r3, [pc, #16]	; (8005abc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	4798      	blx	r3
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3730      	adds	r7, #48	; 0x30
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	2001a65c 	.word	0x2001a65c
 8005abc:	2001a62c 	.word	0x2001a62c

08005ac0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b092      	sub	sp, #72	; 0x48
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	f04f 0120 	mov.w	r1, #32
 8005ad0:	f381 8811 	msr	BASEPRI, r1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	486a      	ldr	r0, [pc, #424]	; (8005c80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ad8:	f7fe ff67 	bl	80049aa <_PreparePacket>
 8005adc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b66      	ldr	r3, [pc, #408]	; (8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	643b      	str	r3, [r7, #64]	; 0x40
 8005af2:	e00b      	b.n	8005b0c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	6479      	str	r1, [r7, #68]	; 0x44
 8005afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b08:	09db      	lsrs	r3, r3, #7
 8005b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b10:	d8f0      	bhi.n	8005af4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	647a      	str	r2, [r7, #68]	; 0x44
 8005b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b2c:	e00b      	b.n	8005b46 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3c:	b2d2      	uxtb	r2, r2
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4a:	d8f0      	bhi.n	8005b2e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7fe fed3 	bl	8004910 <_EncodeStr>
 8005b6a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b6c:	2209      	movs	r2, #9
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	6938      	ldr	r0, [r7, #16]
 8005b72:	f7ff f80d 	bl	8004b90 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b40      	ldr	r3, [pc, #256]	; (8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	e00b      	b.n	8005ba4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	6379      	str	r1, [r7, #52]	; 0x34
 8005b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	09db      	lsrs	r3, r3, #7
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba8:	d8f0      	bhi.n	8005b8c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	637a      	str	r2, [r7, #52]	; 0x34
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc4:	e00b      	b.n	8005bde <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	2b7f      	cmp	r3, #127	; 0x7f
 8005be2:	d8f0      	bhi.n	8005bc6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	e00b      	b.n	8005c18 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	6279      	str	r1, [r7, #36]	; 0x24
 8005c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	09db      	lsrs	r3, r3, #7
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1c:	d8f0      	bhi.n	8005c00 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	627a      	str	r2, [r7, #36]	; 0x24
 8005c24:	6a3a      	ldr	r2, [r7, #32]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e00b      	b.n	8005c50 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	61f9      	str	r1, [r7, #28]
 8005c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	09db      	lsrs	r3, r3, #7
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b7f      	cmp	r3, #127	; 0x7f
 8005c54:	d8f0      	bhi.n	8005c38 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c66:	2215      	movs	r2, #21
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	6938      	ldr	r0, [r7, #16]
 8005c6c:	f7fe ff90 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f383 8811 	msr	BASEPRI, r3
}
 8005c76:	bf00      	nop
 8005c78:	3748      	adds	r7, #72	; 0x48
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	2001a65c 	.word	0x2001a65c
 8005c84:	2001a62c 	.word	0x2001a62c

08005c88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c9e:	4b03      	ldr	r3, [pc, #12]	; (8005cac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4798      	blx	r3
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	2001a62c 	.word	0x2001a62c

08005cb0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005cbc:	f04f 0120 	mov.w	r1, #32
 8005cc0:	f381 8811 	msr	BASEPRI, r1
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	480b      	ldr	r0, [pc, #44]	; (8005cf4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005cc8:	f7fe fe6f 	bl	80049aa <_PreparePacket>
 8005ccc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	6938      	ldr	r0, [r7, #16]
 8005cd4:	f7fe fe1c 	bl	8004910 <_EncodeStr>
 8005cd8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005cda:	220e      	movs	r2, #14
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	6938      	ldr	r0, [r7, #16]
 8005ce0:	f7fe ff56 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f383 8811 	msr	BASEPRI, r3
}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2001a65c 	.word	0x2001a65c

08005cf8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005cf8:	b590      	push	{r4, r7, lr}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01a      	beq.n	8005d3c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4798      	blx	r3
 8005d18:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d1c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	000a      	movs	r2, r1
 8005d2c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d2e:	4613      	mov	r3, r2
 8005d30:	461a      	mov	r2, r3
 8005d32:	4621      	mov	r1, r4
 8005d34:	200d      	movs	r0, #13
 8005d36:	f7ff fc5b 	bl	80055f0 <SEGGER_SYSVIEW_RecordU32x2>
 8005d3a:	e006      	b.n	8005d4a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4619      	mov	r1, r3
 8005d42:	200c      	movs	r0, #12
 8005d44:	f7ff fc18 	bl	8005578 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2001a62c 	.word	0x2001a62c
 8005d58:	e0001004 	.word	0xe0001004

08005d5c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d62:	f3ef 8311 	mrs	r3, BASEPRI
 8005d66:	f04f 0120 	mov.w	r1, #32
 8005d6a:	f381 8811 	msr	BASEPRI, r1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	4819      	ldr	r0, [pc, #100]	; (8005dd8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d72:	f7fe fe1a 	bl	80049aa <_PreparePacket>
 8005d76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d7c:	4b17      	ldr	r3, [pc, #92]	; (8005ddc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d84:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	613b      	str	r3, [r7, #16]
 8005d8e:	e00b      	b.n	8005da8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6179      	str	r1, [r7, #20]
 8005d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	09db      	lsrs	r3, r3, #7
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b7f      	cmp	r3, #127	; 0x7f
 8005dac:	d8f0      	bhi.n	8005d90 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	617a      	str	r2, [r7, #20]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	68b8      	ldr	r0, [r7, #8]
 8005dc4:	f7fe fee4 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f383 8811 	msr	BASEPRI, r3
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	2001a65c 	.word	0x2001a65c
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005de6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dea:	f04f 0120 	mov.w	r1, #32
 8005dee:	f381 8811 	msr	BASEPRI, r1
 8005df2:	607b      	str	r3, [r7, #4]
 8005df4:	4807      	ldr	r0, [pc, #28]	; (8005e14 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005df6:	f7fe fdd8 	bl	80049aa <_PreparePacket>
 8005dfa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005dfc:	2203      	movs	r2, #3
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6838      	ldr	r0, [r7, #0]
 8005e02:	f7fe fec5 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f383 8811 	msr	BASEPRI, r3
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2001a65c 	.word	0x2001a65c

08005e18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e22:	f04f 0120 	mov.w	r1, #32
 8005e26:	f381 8811 	msr	BASEPRI, r1
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	4807      	ldr	r0, [pc, #28]	; (8005e4c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e2e:	f7fe fdbc 	bl	80049aa <_PreparePacket>
 8005e32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e34:	2212      	movs	r2, #18
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6838      	ldr	r0, [r7, #0]
 8005e3a:	f7fe fea9 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f383 8811 	msr	BASEPRI, r3
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2001a65c 	.word	0x2001a65c

08005e50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e56:	f3ef 8311 	mrs	r3, BASEPRI
 8005e5a:	f04f 0120 	mov.w	r1, #32
 8005e5e:	f381 8811 	msr	BASEPRI, r1
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	4807      	ldr	r0, [pc, #28]	; (8005e84 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e66:	f7fe fda0 	bl	80049aa <_PreparePacket>
 8005e6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005e6c:	2211      	movs	r2, #17
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6838      	ldr	r0, [r7, #0]
 8005e72:	f7fe fe8d 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f383 8811 	msr	BASEPRI, r3
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2001a65c 	.word	0x2001a65c

08005e88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e90:	f3ef 8311 	mrs	r3, BASEPRI
 8005e94:	f04f 0120 	mov.w	r1, #32
 8005e98:	f381 8811 	msr	BASEPRI, r1
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	4819      	ldr	r0, [pc, #100]	; (8005f04 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005ea0:	f7fe fd83 	bl	80049aa <_PreparePacket>
 8005ea4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005eaa:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	e00b      	b.n	8005ed6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	61f9      	str	r1, [r7, #28]
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	61fa      	str	r2, [r7, #28]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005eec:	2208      	movs	r2, #8
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6938      	ldr	r0, [r7, #16]
 8005ef2:	f7fe fe4d 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
}
 8005efc:	bf00      	nop
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	2001a65c 	.word	0x2001a65c
 8005f08:	2001a62c 	.word	0x2001a62c

08005f0c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f14:	f3ef 8311 	mrs	r3, BASEPRI
 8005f18:	f04f 0120 	mov.w	r1, #32
 8005f1c:	f381 8811 	msr	BASEPRI, r1
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	4819      	ldr	r0, [pc, #100]	; (8005f88 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f24:	f7fe fd41 	bl	80049aa <_PreparePacket>
 8005f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f2e:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e00b      	b.n	8005f5a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	1c59      	adds	r1, r3, #1
 8005f4a:	61f9      	str	r1, [r7, #28]
 8005f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	09db      	lsrs	r3, r3, #7
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5e:	d8f0      	bhi.n	8005f42 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005f70:	2204      	movs	r2, #4
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6938      	ldr	r0, [r7, #16]
 8005f76:	f7fe fe0b 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f383 8811 	msr	BASEPRI, r3
}
 8005f80:	bf00      	nop
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	2001a65c 	.word	0x2001a65c
 8005f8c:	2001a62c 	.word	0x2001a62c

08005f90 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f98:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9c:	f04f 0120 	mov.w	r1, #32
 8005fa0:	f381 8811 	msr	BASEPRI, r1
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	4819      	ldr	r0, [pc, #100]	; (800600c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005fa8:	f7fe fcff 	bl	80049aa <_PreparePacket>
 8005fac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fb2:	4b17      	ldr	r3, [pc, #92]	; (8006010 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e00b      	b.n	8005fde <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	1c59      	adds	r1, r3, #1
 8005fce:	61f9      	str	r1, [r7, #28]
 8005fd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	09db      	lsrs	r3, r3, #7
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe2:	d8f0      	bhi.n	8005fc6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	61fa      	str	r2, [r7, #28]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005ff4:	2206      	movs	r2, #6
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	6938      	ldr	r0, [r7, #16]
 8005ffa:	f7fe fdc9 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f383 8811 	msr	BASEPRI, r3
}
 8006004:	bf00      	nop
 8006006:	3720      	adds	r7, #32
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	2001a65c 	.word	0x2001a65c
 8006010:	2001a62c 	.word	0x2001a62c

08006014 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800601e:	f3ef 8311 	mrs	r3, BASEPRI
 8006022:	f04f 0120 	mov.w	r1, #32
 8006026:	f381 8811 	msr	BASEPRI, r1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	4827      	ldr	r0, [pc, #156]	; (80060cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800602e:	f7fe fcbc 	bl	80049aa <_PreparePacket>
 8006032:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	e00b      	b.n	8006064 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	1c59      	adds	r1, r3, #1
 8006054:	6279      	str	r1, [r7, #36]	; 0x24
 8006056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	09db      	lsrs	r3, r3, #7
 8006062:	623b      	str	r3, [r7, #32]
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b7f      	cmp	r3, #127	; 0x7f
 8006068:	d8f0      	bhi.n	800604c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	627a      	str	r2, [r7, #36]	; 0x24
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	61bb      	str	r3, [r7, #24]
 8006082:	e00b      	b.n	800609c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	61f9      	str	r1, [r7, #28]
 800608e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d8f0      	bhi.n	8006084 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	61fa      	str	r2, [r7, #28]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80060b2:	2207      	movs	r2, #7
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	6938      	ldr	r0, [r7, #16]
 80060b8:	f7fe fd6a 	bl	8004b90 <_SendPacket>
  RECORD_END();
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f383 8811 	msr	BASEPRI, r3
}
 80060c2:	bf00      	nop
 80060c4:	3728      	adds	r7, #40	; 0x28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2001a65c 	.word	0x2001a65c
 80060d0:	2001a62c 	.word	0x2001a62c

080060d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	1ad3      	subs	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	2001a62c 	.word	0x2001a62c

080060f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08c      	sub	sp, #48	; 0x30
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80060fe:	4b3b      	ldr	r3, [pc, #236]	; (80061ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d06d      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800610c:	2300      	movs	r3, #0
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006110:	e008      	b.n	8006124 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	3301      	adds	r3, #1
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006128:	429a      	cmp	r2, r3
 800612a:	d3f2      	bcc.n	8006112 <SEGGER_SYSVIEW_SendModule+0x1e>
 800612c:	e000      	b.n	8006130 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800612e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d055      	beq.n	80061e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006136:	f3ef 8311 	mrs	r3, BASEPRI
 800613a:	f04f 0120 	mov.w	r1, #32
 800613e:	f381 8811 	msr	BASEPRI, r1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	482a      	ldr	r0, [pc, #168]	; (80061f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006146:	f7fe fc30 	bl	80049aa <_PreparePacket>
 800614a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	e00b      	b.n	8006172 <SEGGER_SYSVIEW_SendModule+0x7e>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	6279      	str	r1, [r7, #36]	; 0x24
 8006164:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	09db      	lsrs	r3, r3, #7
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2b7f      	cmp	r3, #127	; 0x7f
 8006176:	d8f0      	bhi.n	800615a <SEGGER_SYSVIEW_SendModule+0x66>
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	627a      	str	r2, [r7, #36]	; 0x24
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	61fb      	str	r3, [r7, #28]
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e00b      	b.n	80061ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	61f9      	str	r1, [r7, #28]
 800619e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	09db      	lsrs	r3, r3, #7
 80061aa:	61bb      	str	r3, [r7, #24]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b7f      	cmp	r3, #127	; 0x7f
 80061b0:	d8f0      	bhi.n	8006194 <SEGGER_SYSVIEW_SendModule+0xa0>
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	61fa      	str	r2, [r7, #28]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2280      	movs	r2, #128	; 0x80
 80061c8:	4619      	mov	r1, r3
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7fe fba0 	bl	8004910 <_EncodeStr>
 80061d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80061d2:	2216      	movs	r2, #22
 80061d4:	68f9      	ldr	r1, [r7, #12]
 80061d6:	6938      	ldr	r0, [r7, #16]
 80061d8:	f7fe fcda 	bl	8004b90 <_SendPacket>
      RECORD_END();
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80061e2:	bf00      	nop
 80061e4:	3730      	adds	r7, #48	; 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	2001a654 	.word	0x2001a654
 80061f0:	2001a65c 	.word	0x2001a65c

080061f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80061fa:	4b0c      	ldr	r3, [pc, #48]	; (800622c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00f      	beq.n	8006222 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f2      	bne.n	8006208 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	2001a654 	.word	0x2001a654

08006230 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006236:	f3ef 8311 	mrs	r3, BASEPRI
 800623a:	f04f 0120 	mov.w	r1, #32
 800623e:	f381 8811 	msr	BASEPRI, r1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	4817      	ldr	r0, [pc, #92]	; (80062a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006246:	f7fe fbb0 	bl	80049aa <_PreparePacket>
 800624a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e00b      	b.n	8006274 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	6179      	str	r1, [r7, #20]
 8006266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	09db      	lsrs	r3, r3, #7
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b7f      	cmp	r3, #127	; 0x7f
 8006278:	d8f0      	bhi.n	800625c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	617a      	str	r2, [r7, #20]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800628a:	221b      	movs	r2, #27
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	68b8      	ldr	r0, [r7, #8]
 8006290:	f7fe fc7e 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f383 8811 	msr	BASEPRI, r3
}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2001a65c 	.word	0x2001a65c
 80062a8:	2001a658 	.word	0x2001a658

080062ac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80062ac:	b40f      	push	{r0, r1, r2, r3}
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80062b4:	f107 0314 	add.w	r3, r7, #20
 80062b8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80062ba:	1d3b      	adds	r3, r7, #4
 80062bc:	461a      	mov	r2, r3
 80062be:	2100      	movs	r1, #0
 80062c0:	6938      	ldr	r0, [r7, #16]
 80062c2:	f7fe feef 	bl	80050a4 <_VPrintTarget>
  va_end(ParamList);
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d0:	b004      	add	sp, #16
 80062d2:	4770      	bx	lr

080062d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	f04f 0120 	mov.w	r1, #32
 80062e4:	f381 8811 	msr	BASEPRI, r1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	4827      	ldr	r0, [pc, #156]	; (8006388 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062ec:	f7fe fb5d 	bl	80049aa <_PreparePacket>
 80062f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062f2:	2280      	movs	r2, #128	; 0x80
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	6938      	ldr	r0, [r7, #16]
 80062f8:	f7fe fb0a 	bl	8004910 <_EncodeStr>
 80062fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	2301      	movs	r3, #1
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_Warn+0x4c>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	6279      	str	r1, [r7, #36]	; 0x24
 8006312:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_Warn+0x34>
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	627a      	str	r2, [r7, #36]	; 0x24
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	2300      	movs	r3, #0
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_Warn+0x84>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	61f9      	str	r1, [r7, #28]
 800634a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b7f      	cmp	r3, #127	; 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_Warn+0x6c>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	61fa      	str	r2, [r7, #28]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800636e:	221a      	movs	r2, #26
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	6938      	ldr	r0, [r7, #16]
 8006374:	f7fe fc0c 	bl	8004b90 <_SendPacket>
  RECORD_END();
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2001a65c 	.word	0x2001a65c

0800638c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006390:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006392:	7e1b      	ldrb	r3, [r3, #24]
 8006394:	4619      	mov	r1, r3
 8006396:	4a13      	ldr	r2, [pc, #76]	; (80063e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006398:	460b      	mov	r3, r1
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	440b      	add	r3, r1
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	336c      	adds	r3, #108	; 0x6c
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80063a8:	7e1b      	ldrb	r3, [r3, #24]
 80063aa:	4618      	mov	r0, r3
 80063ac:	490d      	ldr	r1, [pc, #52]	; (80063e4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80063ae:	4603      	mov	r3, r0
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	4403      	add	r3, r0
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	440b      	add	r3, r1
 80063b8:	3370      	adds	r3, #112	; 0x70
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d00b      	beq.n	80063d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80063c2:	789b      	ldrb	r3, [r3, #2]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d107      	bne.n	80063d8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80063ca:	2201      	movs	r2, #1
 80063cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80063ce:	f7fe faf9 	bl	80049c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80063d2:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80063d8:	4b01      	ldr	r3, [pc, #4]	; (80063e0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80063da:	781b      	ldrb	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2001a62c 	.word	0x2001a62c
 80063e4:	2001a794 	.word	0x2001a794

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	; (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	; (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	; (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	; (800642c <__libc_init_array+0x44>)
 80063fc:	f000 f83c 	bl	8006478 <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006670 	.word	0x08006670
 8006424:	08006670 	.word	0x08006670
 8006428:	08006670 	.word	0x08006670
 800642c:	08006674 	.word	0x08006674

08006430 <memcmp>:
 8006430:	b530      	push	{r4, r5, lr}
 8006432:	3901      	subs	r1, #1
 8006434:	2400      	movs	r4, #0
 8006436:	42a2      	cmp	r2, r4
 8006438:	d101      	bne.n	800643e <memcmp+0xe>
 800643a:	2000      	movs	r0, #0
 800643c:	e005      	b.n	800644a <memcmp+0x1a>
 800643e:	5d03      	ldrb	r3, [r0, r4]
 8006440:	3401      	adds	r4, #1
 8006442:	5d0d      	ldrb	r5, [r1, r4]
 8006444:	42ab      	cmp	r3, r5
 8006446:	d0f6      	beq.n	8006436 <memcmp+0x6>
 8006448:	1b58      	subs	r0, r3, r5
 800644a:	bd30      	pop	{r4, r5, pc}

0800644c <memcpy>:
 800644c:	440a      	add	r2, r1
 800644e:	4291      	cmp	r1, r2
 8006450:	f100 33ff 	add.w	r3, r0, #4294967295
 8006454:	d100      	bne.n	8006458 <memcpy+0xc>
 8006456:	4770      	bx	lr
 8006458:	b510      	push	{r4, lr}
 800645a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006462:	4291      	cmp	r1, r2
 8006464:	d1f9      	bne.n	800645a <memcpy+0xe>
 8006466:	bd10      	pop	{r4, pc}

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
